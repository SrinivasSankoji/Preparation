1.Introduction    					     (CodeEvolution)    [04-AUG-2019]  (Done)
2.Class and Template 					 (CodeEvolution)	[04-AUG-2019]  (Done)
3.Binding 								 (CodeEvolution)	[04-AUG-2019]  (Done)
4.Split Two Way Binding  				 (CodeEvolution)	[04-AUG-2019]  (Done)
5.Getters and Setters					 (CodeEvolution)	[04-AUG-2019]  (Done)
6.View Child Decorator					 (CodeEvolution)	[05-AUG-2019]  (Done)
7.Parent and Child						 (CodeEvolution)	[06-AUG-2019]  (Done)
8.Input Decorator						 (CodeEvolution)	[06-AUG-2019]  (Done)
9.Getters and Setters					 (CodeEvolution)	
10.ngOnChanges						     (CodeEvolution)
11.Template Reference Variables		     (CodeEvolution)
12.View Child Decorator				     (CodeEvolution)
13.Output Decorator					     (CodeEvolution)
14.Using a Service					     (CodeEvolution)

15.Child Component						 (procademy)		[24-APR-2023]  (Done)
16.Custom Property Binding @Input        (procademy)		[24-APR-2023]  (Done)
17.Custom Event Binding @Output          (procademy)		[25-APR-2023]  (Done)
18.Implementing Search Functionality     (procademy)		[02-MAY-2023]  (Done)
19.Template Reference Variable           (procademy)		[05-MAY-2023]  (Done)
20.@ViewChild                            (procademy)		[05-MAY-2023]  (Done)
21.View Encapsulation                    (procademy)		[06-MAY-2023]  (Done)
22.ng-content                    		 (procademy)		[06-MAY-2023]  (Done)


************************************************ 1.Introduction ************************************************

Components are the Building Blocks of an Angular Application.
We Start with Root Component and create Different Components for different parts of the Application.
Although Each Component Serves Specific Purpose,Some times Component needs to interact with Each Other to get the Job Done.
Some of the Common Scenarios where the Components interact with Each other to Share the Information are 

Single Component and Class i.e Component class interacts with view Using some of the API Properties and Methods.
Child Component
Parent Component 
Communication Between Components using Services

************************************************ 2.Single Component Class and Template ************************************************

Binding
Split Two Way Binding 
Getters and Setters
ViewChild()

These Concepts are Important to under stand the Concept of Inter Component Interaction

************************************************ 3.Binding **********************************************************

A Single Angular Component has a Class and a Template that Represents the View.
To Handle Push and Pull Logics  From Class and Template,Angular Provides 4 Forms of Binding.
Each Form has Binding to The DOM or From the DOM or in Both Directions.

Interpolation :  represented by {{}} 
This is one  Way Data Binding From the Component Class to The Template.

Property Binding : Represented BY []
This is One Way Data Binding From the Component Class to the Property of an HTML Element.

Event Binding : Represent By ()
This is One Way Data Binding form the HTML Template to the Component Class.
With Event Binding we can Execute Handlers on User Interactions.

Two Way Binding : Represented By [()]
Two Way Binding Combines Property and Event Binding in a Single Notation.
It Ensure Model and View are always in  Sync.

Practical : 
-----------
Create New Folder i.e Component Interaction
Create The Component  i.e interaction

To Work With  Two Way Data Binding We First Need to Include Forms Module in the App Module and add it to the Imports Array.
Declare the Variable name:String in the interaction.ts File
In the HTML Create the Text Box with Name Attribute.
For TwoWay Data Binding We Use ngModel Directive with Banana in the Box and Assign the Property i.e [ngModel]="userName".

************************************************ 4.Split Two Way Binding  ************************************************

Some Times when the Template and Component Class Interacts We Might want to Execute few Additional Lines of Code.
For Example We have an Input Element and We need to Consistently Keep Track on Change of the Input Element 
So That Value Can be Submitted to Server When Required For that Purpose we use Two Way Binding.
Whenever The Value Changes in Addition to Updating the Value I want To Execute Some Code and that is Not Possible with 
Two Way Data Binding.
To Be able to Execute Some Custom Logic We need a Method and We need to Split Two Way Data Binding
into Property Binding and Event Binding.

Splitting Can Happen in Two Steps.
First Create a Property Binding with NgModel Directive and  Event Binding with Property i.e 

<input type="text" [ngModel]="userName" (ngModelChange)="userName=$event">
<input type="text" [ngModel]="userName" (ngModelChange)="greetUser($event)">

Here $event has the Updated Value of the Text Box.
By Splitting we now have the Ability to Execute Some Piece of Code i.e 

greetUser(updatedValue) // Split Two Way Binding
 {
    this.userName = updatedValue;
    if(updatedValue == 'Srinivas')
    {
      alert('Welcome Bhaumik');
    }
 }

************************************************ 5.Getters and Setters ************************************************

Here We see the Same Thing as Splitting Two Way Data Binding that Execute Some Piece of Code when Property Value Changes
By Using Setters and Getters.

Declare the Private Variable in the Component Class and add Setters and Getters.
Use the Setter and Getter Function Name in the HTML not the Private Property.

private _customerName:String

get customerName() : String {
return this._customerName;
}

set customerName(value:String)
{
  this._customerName=value;
}

And add the Piece of Code which we want to Execute while Setting the Value.

************************************************ 6.View Child Decorator ************************************************

To Access DOM element in the Template from the Component Class We use View Child Decorator.
In The Previous Example we have 3 input Elements i.e name,UserName and CustomerName.
We have the Requirement that on Page Load, We need a focus on the Name input Element. 
To do this we use View Child Decorator.

Step1 : First Step Attach Template Reference Variable to the Input Element. i.e #nameRef
Step2 : Create a Property That will hold this DOM Element in the Component Class i.e nameElementRef:ElementRef
Step3 : Third Step is to Tell the ElementRef that which DOM Element it has to refer 
and For This Purpose we use ViewChild Decorator i.e @ViewChild('nameRef') nameElementRef:ElementRef

If we want to Write Component Initialization Code that uses the References injected by the ViewChild Decorator
we need to do inside ngAfterViewInit() Life Cycle Hook.
It is inside that LifeCycle Hook that all References to DOM Element Become Available.
Finally Implement ngAfterViewInit() Life Cycle Method.

 ngAfterViewInit() // View Child Decorator
 {
    this.nameElementRef.nativeElement.focus();
 }

this.nameElementRef is Like a Wrapper around the DOM Element and Access the Native Element Property 
and then call the focus().

************************************************ 7.Parent and Child ************************************************

Now We Have a Good Understanding of Interaction within a Component 
Lets See the Interaction Between Different Components i.e Parent and Child Component.

1.Sending Data From Parent Component to Child Component  Using @Input Decorator.
2.Intercept The Changes in Input Property Values While Sending Data From Parent to Child Using Getters,Setters and 
  ngOnChanges() Life Cycle Hook.
3.Parent Component Can Directly Access Child Component DOM Element,Class Properties and Methods Using Template Reference Variables
  and ViewChild Decorator.
4.Interaction with Parent Component i.e emitting Events From a Child Component to Communicate Information using eventEmitter.
  
************************************************ 8.Input Decorator ************************************************

Angular Components are Reusable and it is natural that Components are nested inside each other.
This establishes the Parent Child Relationship.
For Example :

	Component A 				Component B 

	Template A 					Template B
	<componentB></componentB>
	
	Class A 					Class B
	
Here Component B is nested inside Component A,Component A is the Parent Component and Component B is the Child Component.
Parent and Child Component often has to interact with each other.
First Scenario is Passing Data from Parent Component to Child Component i.e using @Input Decorator.

create a Variable in Parent Class i.e
public loggedIn=true;

In the Parent Component.HTML where the Child Component Selector is declared pass the loggedIn Variable. i.e  
<app-child [loggedIn] ></app-child>

In the Child Component Declare Two Paragraphs and based on Parent Message show the Value of Paragraph i.e 
<p  *ngIf="loggedUser">Please LogIn</p>
<p *ngIf="!loggedUser">Welcome Back</p>

To do this declare the variable i the Child Class i.e declared same as in the Parent Class i.e
@Input('loggedIn') loggedUser;

********************** 9.Intercept The Changes While Sending Data From Parent To Child Using Getters and Setters *******************************





*********************************************** 15.Child Component (procademy) *****************************************************************

We can pass the data from Component class to View Template and vice versa using Interpolation,Property Binding and Event Binding.
Similarly we can also pass data from Parent Component to Child Component and vice versa using @Input and @Output decorator.

	<div class="course-container" *ngFor="let course of courses">
    <div class="course-card">
        <div>
            <img [src]="course.image" style="width:220px; height:140px;">
        </div>
        <div class="course-name">
            <h4>{{ course.name}}</h4>
        </div>
        <div class="course-description">
            <p>{{course.description.slice(0, 80)}}...</p>
        </div>
        <div class="details">
            <div class="course-type" [ngStyle]="{color: course.type === 'Free' ? 'Green' : 'Red'}">{{course.type}}</div>
            <div class="course-price"><b>Price:</b> ${{course.price}}</div>
        </div>
        <div class="course-buttons">
            <button class="btn btn-buy">Buy Now</button>
            <button class="btn btn-show">Show Deatils</button>
        </div>
    </div>
	</div>
	
Now the Requirement is to add Search Component and Filter Component.
Search Component and Filter Component wiil be the Child Component of the Course Component.

In the Filter HTML Template 

	Filter: All Courses () Free Courses() Premium Courses ()
	
When the User Selects All Courses,All Courses should be displayed.
Similarly when the User selects Free Course only Free Courses should be shown.
Similar is the case with Premium Course.

Here Filter Component is the Child Component of Courses Component.
Declare 3 variables in the Filter Component Class.

	export class FilterComponent {
	  all: number = 0;
	  free: number = 0;
	  premium: number = 0
	}
	
	<div class="filter-container">
    <span>Filter: </span>
    <input type="radio" name="filter" value="All" />
    <span>{{'All Courses ['+all+']'}}</span>

    <input type="radio" name="filter" value="Free" />
    <span>{{'Free Courses ['+free+']'}}</span>

    <input type="radio" name="filter" value="Premium" />
    <span>{{'Premium Courses ['+premium+']'}}</span>
	</div>
	
*********************************************** 16.Custom Property Binding @Input (procademy) ***************************************************

We can pass the data from Parent Component to Child Component using @Input decorator.
This is also called as Custom Property Binding.
Here we bind the custom properties of the Child Component class with the property or method of the Parent Component class.

	export class FilterComponent {
	  @Input() all: number = 0;
	  @Input() free: number = 0;
	  @Input() premium: number = 0
	}
	
In Course Component Class :

	getTotalCourses() {
    return this.courses.length;
	}

	getFreeCourses() {
		return this.courses.filter(course => course.type === 'Free').length
	}

	getPremiumCourses() {
		return this.courses.filter(course => course.type === 'Premium').length
	}

In Course Component HTML :

	<div>
		<app-search></app-search>
		<app-filter [all]="getTotalCourses()" [free]="getFreeCourses()" [premium]="getPremiumCourses()"></app-filter>
	</div>

*********************************************** 17.Custom Event Binding @Output (procademy) **************************************************

Here we will see how to pass data from Child Component class to its Parent Component class using Custom Event Binding and @Output decorator.
Here the requirement is whenever user selects the all radio button it should show all the courses.
Similar is the case with free and premium courses.
Whenever the selection of the radio button changes we need to inform Parent Component and based on the selection Course Component should show the courses.

Note :
------
When the Page loads none of the radio button is selected.
Initially when the page loads by default all radio button should be selected and it should show all the courses.

Create one variable in Filter Component Class and apply the Two Way Binding for that variable.

	  selectedCourse:string='All';
	  
	<div class="filter-container">
		<span>Filter: </span>
		<input type="radio" name="filter" value="All" [(ngModel)]="selectedCourse" />
		<span>{{'All Courses ['+all+']'}}</span>

		<input type="radio" name="filter" value="Free" [(ngModel)]="selectedCourse" />
		<span>{{'Free Courses ['+free+']'}}</span>

		<input type="radio" name="filter" value="Premium" [(ngModel)]="selectedCourse" />
		<span>{{'Premium Courses ['+premium+']'}}</span>
	</div>

Similarly when we change the radio button value to Free it should show the Free Courses.
Here selectedCourse value should be assigned with Free and we need to create the custom Event in the Child Component.
To create a Custom Event 
we define the property and specify it as EventEmitter.
Decorate with it @Output.
Create a Method that will raise the event.
Wheneever the Event is emmitted It will emmit the value of the radio button which the user has selected.
Whenever the radio button is changed we need to rais the cutom event.

	<div class="filter-container">
		<span>Filter: </span>
		<input type="radio" name="filter" value="All" [(ngModel)]="selectedCourse" (change)="selectedCourseEvent()"/>
		<span>{{'All Courses ['+all+']'}}</span>

		<input type="radio" name="filter" value="Free" [(ngModel)]="selectedCourse" (change)="selectedCourseEvent()"/>
		<span>{{'Free Courses ['+free+']'}}</span>

		<input type="radio" name="filter" value="Premium" [(ngModel)]="selectedCourse" (change)="selectedCourseEvent()"/>
		<span>{{'Premium Courses ['+premium+']'}}</span>
	</div>
	
	selectedCourseEvent(){
    this.courseChange.emit(this.selectedCourse);
    console.log(this.selectedCourse);
	}
	
Here selectedCourse is updated based on radio button selection.
Now we need to pass the selected radio button value to the Parent Component.
Based on that Parent Component will decide which courses to be displayed.

   courseCountChange(data:any){
   this.courseCountRadioButton=data;
   console.log(this.courseCountRadioButton);
  }
  
In the Parent Component HTML	

	<div>
		<app-search></app-search>
		<app-filter [all]="getTotalCourses()" [free]="getFreeCourses()" [premium]="getPremiumCourses()" (selectedCourseEvent)="courseCountChange($event)"></app-filter>
	</div>

We cannot use two structural directives within the same HTML Element.
To avoid this we use ng-container directive.

	<ng-container *ngFor="let course of courses">
		<div class="course-container" *ngIf="courseCountRadioButton === 'All' || courseCountRadioButton === course.type">
			<div class="course-card">
				<div>
					<img [src]="course.image" style="width:220px; height:140px;">
				</div>
				<div class="course-name">
					<h4>{{ course.name}}</h4>
				</div>
				<div class="course-description">
					<p>{{course.description.slice(0, 80)}}...</p>
				</div>
				<div class="details">
					<div class="course-type" [ngStyle]="{color: course.type === 'Free' ? 'Green' : 'Red'}">{{course.type}}</div>
					<div class="course-price"><b>Price:</b> ${{course.price}}</div>
				</div>
				<div class="course-buttons">
					<button class="btn btn-buy">Buy Now</button>
					<button class="btn btn-show">Show Deatils</button>
				</div>
			</div>
		</div>
	</ng-container>

*********************************************** 18.Implementing Search Functionality (procademy) ***********************************************

1.Search Componenet :
---------------------

Create the property that will capture the Enterd Text in the Search Box.

	enteredSearchValue: string = '';
	
Then bind the property to the input Text element

	 <input type="text" [(ngModel)]="enteredSearchValue" >
	
Create the Custom Event that will be raised when the value changes in the Search Box.

	 searchTextChanged:EventEmitter<String>=new EventEmitter<String>();
	 
Create a function that will execute the event.

	onSearchTextChanged(){
     this.searchTextChanged.emit(this.enteredSearchValue);
	}
	
Now we want to call the function as soon as user starts typing in the Text Box.
Whenever users types in the Text Box input event will happen.
We are going to bind the input event with the method.

	 <input type="text" [(ngModel)]="enteredSearchValue" (input)="onSearchTextChanged()">
	

2.Course Componenet :
---------------------

Create new property in the Course Component.

	searchText: String = '';
	
To the above variable we want to assign the value which the user has entered.
We will get that value when the event raises.
Create the function that will be called when the cutom event of the child component raised.

	onSearchTextEntered(searchValue:string){
    this.searchText=searchValue;
    console.log(searchValue);
	}
	
Now we need to bind the custom event of the child component to the function of the parent component.

	 <app-search (searchTextChanged)="onSearchTextEntered($event)"></app-search>
	 

*********************************************** 19.Template Reference Variable (procademy) ***********************************************

Template Reference Variable is a variable which stores the reference to any DOM/HTML element,Componenet or a directive in the Template.
Create the new Component named TemplateReference

	ng g c TemplateReference
	
Requirement 1 :
---------------
Create one input text and add the reference to it by using Template Reference Variable.

	<input type="text" #myReference>
	<P></P>
	
Here myReference stores the reference to the input HTML Element.
When the HTML is rendered in the Web page,In the DOM an Obejct will be created.
This reference variable will point to the Object in the DOM.

Here the requirement is whatever we type in the Text box that has to displayed in the <p></p>
One way to achieve this is by using two way Data Binding.
The other way is to use local reference variable.
local reference variable has the value property which contains the value of the input element.

	<input type="text" #myReference>
	<P>{{myReference.value}}</P>
	
Here we wont see the input.
Initially when the page loads the Text box is empty.
When we are typing something HTML is not aware of the changes.
We are going to bind the keyup() which will do nothing.
But Angular will run the Change detection to the DOM Element.

	<input type="text" #myReference (keyup)="3">
	<P>{{myReference.value}}</P>
	
The requirement is to pass the local Reference of the input element to the Component class.
For this create a button Event.

	<button (click)="getLocalReference(myReference)">Template Reference</button>
	
	getLocalReference(inputElement:HTMLInputElement){
		alert("Hello : "+inputElement.value);
	}
	
Requirement 2 :
---------------
From the above scenario we are using local reference variable on the HTML Element,Similarly we can use local reference variable on the Component or directive.
Create the new component customer-list.
Add the customer array.

	customers: Customer[] = [
    {customerNo: 1, name: 'Mark Vought', address: '', city: 'London', country: 'UK'},
    {customerNo: 2, name: 'John Smith', address: '', city: 'New York', country: 'USA'},
    {customerNo: 3, name: 'Merry Ann', address: '', city: 'Berlin', country: 'Germany'},
    {customerNo: 4, name: 'Rajesh Khatri', address: '', city: 'Mumbai', country: 'India'},
    {customerNo: 5, name: 'Rahul Raj', address: '', city: 'Delhi', country: 'India'}
	]
	
	<table class='table'>
    <thead>
      <tr>
        <th>No</th>
        <th>Name</th>
        <th>Address</th>
        <th>City</th>
        <th>Country</th>
        <th>Select</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let customer of customers">
        <td>{{customer.customerNo}}</td>
        <td>{{customer.name}}</td>
        <td>{{customer.address}}</td>
        <td>{{customer.city}}</td>
        <td>{{customer.country}}</td>
        <button>Select</button>
      </tr>
    </tbody>
  </table>
  
Here the Requirement is whenever i click on the select button that particular Customer details has to be passed.
For this we need to add the local reference to the Componet class.

	<app-customer-list #customer></app-customer-list>
	<p>{{customer}}</p>

Create on property named selectedCustomer in the Component class.

	 selectedCustomer:any='';
	 
	 <button (click)="selectedCustomer = customer">Select</button>
	 
**************************************************** 20.@ViewChild (procademy) ********************************************************

Requirement 1:
--------------
How to access HTML Element from the View Template to the Component Class.
Consider the scenario where we need to display the age based on Date Selection.

	<div class="container-fluid">
    <label>Date of Birth :</label>
    <input type="date" class="form-control" #dob>
	</div>
	<br>
	<div>
		<label>Age :</label>
		<input type="text" class="form-control" #age>
	</div>
	
Here we need to pass the dob input element and age input element to the Component class.
One solution is to create the local reference variable and pass it to the function.
Sometimes we might want to access the HTML element before calling the method.
For that we can make use of @ViewChild decorator.

	 @ViewChild('dob') datOfBirth: ElementRef =new ElementRef('');
	 @ViewChild('age') ageInYears: ElementRef =new ElementRef('');
	 
By using @ViewChild decorator we can access the input elements in our Component class.
We can also access the Component or Directive using @ViewChild.

Create a method which will calculate the age based on date of birth.
Here we have to calculate based on the blur() event.

    @ViewChild('dob')
    datOfBirth!: ElementRef;

    @ViewChild('age')
    ageInYears!: ElementRef;

	calculateAge() {
	let dateOfBirth = new Date(this.datOfBirth.nativeElement.value).getFullYear();
	let currentYear = new Date().getFullYear();
	let ageInYears =currentYear - dateOfBirth;
	this.ageInYears.nativeElement.value=ageInYears;
	}
	
Using @ViewChild we can access an HTML Element or Component or a directive from the View Template to the Component class.

Requirement 2 :
---------------
How to access the Child Component from the Parent Component using @ViewChild.
To access the Child Component from the Parenet Component.

Create a function in Child Component.

	getChildComponent(){
    alert('Testing @ViewChild Calling Child Component from Parent Component');
	}
	
Create a variable in the Parent Component

	@ViewChild(ViewChildChildComponent,{static:true})
    viewChildChildComponent!: ViewChildChildComponent;
	
Call the method of Child Component from Parent Component.

	<div class="container-fluid">
    <app-view-child-child></app-view-child-child> 
	</div>
	{{viewChildChildComponent.getChildComponent()}}

******************************************************* 21.View Encapsulation (procademy) *******************************************************

Encapsulation means hiding data and behavior to the outside world.
Whenever we create any Component we specify the selector,TemplateURL and Style URL.
Whatever we specify in the StyleUrls that is applicable to that particular View Temaplate and not applicable to any other View Template.

View Encapsulation is a concept or behavior in Angular where Component CSS Styles are encapsulated into the Components View
and do not effect the rest of the Application.

Lets create 2 Components i.e. comp1 and comp2.
Each of these Components has button ELement.

If we add the styles related to button in app.component.css it will be shown only in the App Component.
Here Comp1 and Comp2 are the Child Components of App Component and the styles related to button are not reflected here.

It is important to ensure that CSS Styles specified in one Component does not override the CSS rules in other Component.
To achieve this we use View Encapsulation.
There are three types of View Encapsulation.

1.ViewEncapsulation.NONE
2.ViewEncapsulation.Emulated (Default)
3.ViewEncapsulation.ShadowDOM

In Emulated type of ViewEncapsulation Angular adds unique attributes to the Component CSS Type and also to the HTML Elements
in order to achieve ViewEncapsulation.

	_ngcontent-hxj-c2
	
In ViewEncapsulation.NONE Whatever CSS Styles applied to the Parent Component that will be applied to the Child Component.
In this case no unique attributes will be removed.

	@Component({
	  selector: 'app-root',
	  templateUrl: './app.component.html',
	  styleUrls: ['./app.component.css'],
	  encapsulation: ViewEncapsulation.None
	})
	export class AppComponent {
	  title = 'Components';
	}

When we apply the CSS in styles.css all the CSS will be applicable globally.
In ViewEncapsulation.ShadowDOM that Component creates its own DOM.
The Browser keeps the ShadowDOM seperate from Main DOM.
In this CSS mentioned in the Style.css are not applicable to this Component.

	@Component({
	  selector: 'app-comp2',
	  templateUrl: './comp2.component.html',
	  styleUrls: ['./comp2.component.css'],
	  encapsulation:ViewEncapsulation.ShadowDom
	})
	export class Comp2Component {
	}

******************************************************* 22.ng-content (procademy) ***************************************************************

ng-content is used whenever we want to insert the content dynamically inside the component that helps to increase the component reusability.
When Angular parses the ng-content it replaces the content that appears at the place of ng-content.

  <div class="container">
    <h2>New in Smart Phones</h2>
  </div>
  
Here the requirement is to add the newly created products.

	 <div class="container">
    <h2>New in Smart Phones</h2>
    <div class="more-products">
      <div class="card">
        <h4 class="title">New in iPhone</h4>
        <p class="summary">Lorem ipsum dolor sit amet, consectetur adipiscing elit,
          sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </p>
        <button class="btn btn-more">Show more in iPhone</button>
      </div>
      <div class="card">
        <h4 class="title">New in Samsung</h4>
        <p class="summary">Lorem ipsum dolor sit amet, consectetur adipiscing elit,
          sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </p>
        <button class="btn btn-more">Show more in Samsung</button>
      </div>
      <div class="card">
        <h4 class="title">New in OnePlus</h4>
        <p class="summary">Lorem ipsum dolor sit amet, consectetur adipiscing elit,
          sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </p>
        <button class="btn btn-more">Show more in OnePlus</button>
      </div>
      <div class="card">
        <h4 class="title">New in MI</h4>
        <p class="summary">Lorem ipsum dolor sit amet, consectetur adipiscing elit,
          sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </p>
        <button class="btn btn-more">Show more in MI</button>
      </div>
    </div>
  </div>
  
From the above code we are repeating the product records and it is not a best practice.
The solution is to create the Component and incude the content into another Component.
Create the Component named prouct.
	
	<div class="card">
    <ng-content></ng-content>
    <p class="summary">Lorem ipsum dolor sit amet, consectetur adipiscing elit,
        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
    </p>
    <button class="btn btn-more">Show more in iPhone</button>
	</div>
	
  <div class="container">
  <h2>New in Smart Phones</h2>
  <div class="more-products">
    <app-product>
      <h4 class="title">New in iPhone</h4>
      <button class="btn btn-more">Show more in iPhone</button>
    </app-product>
    <app-product>
      <h4 class="title">New in Samsung</h4>
      <button class="btn btn-more">Show more in Samsung</button>
    </app-product>
    <app-product>
      <h4 class="title">New in OnePlus</h4>
      <button class="btn btn-more">Show more in OnePlus</button>
    </app-product>
    <app-product>
      <h4 class="title">New in MI</h4>
      <button class="btn btn-more">Show more in MI</button>
    </app-product>
  </div>
	</div>
	
Note :
------
If we are using more than one ng-content Angular will replace the last Angular Content.
Here the requirement is to see the below order
Header
Descripton
Button

This can be done by using the class name.

	<div class="card">
    <ng-content select=".title"></ng-content>
    <p class="summary">Lorem ipsum dolor sit amet, consectetur adipiscing elit,
        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
    </p>
    <ng-content select=".btn-more"></ng-content>
	</div>
	





	
	

	




	






































