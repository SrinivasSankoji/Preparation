									Angular Component Interaction Code Evolution:
								   **********************************************
1.Introduction    					[04-AUG-2019]  (Done)
2.Class and Template 				[04-AUG-2019]  (Done)
3.Binding 							[04-AUG-2019]  (Done)
4.Split Two Way Binding  			[04-AUG-2019]  (Done)
5.Getters and Setters				[04-AUG-2019]  (Done)
6.View Child Decorator				[05-AUG-2019]  (Done)
7.Parent and Child					[06-AUG-2019]  (Done)
8.Input Decorator					[06-AUG-2019]  (Done)
9.Getters and Setters
10.ngOnChanges
11.Template Reference Variables
12.View Child Decorator
13.Output Decorator
14.Using a Service


1.Introduction : 
****************
Components are the Building Blocks of an Angular Application.
We Start with Root Component and create Different Components for different parts of the Application.
Although Each Component Serves Specific Purpose,Some times Component needs to interact with Each Other to get the Job Done.
Some of the Common Scenarios where the Components interact with Each other to Share the Information are 

Single Component and Class i.e Component class interacts with view Using some of the API Properties and Methods.
Child Component
Parent Component 
Communication Between Components using Services

2.Single Component Class and Template :
***************************************
Binding
Split Two Way Binding 
Getters and Setters
ViewChild()

These Concepts are Important to under stand the Concept of Inter Component Interaction

3.Binding :
***********
A Single Angular Component has a Class and a Template that Represents the View.
To Handle Push and Pull Logics  From Class and Template,Angular Provides 4 Forms of Binding.
Each Form has Binding to The DOM or From the DOM or in Both Directions.

Interpolation :  Represented By {{}} 
This is one  Way Data Binding From the Component Class to The Template.

Property Binding : Represented BY []
This is One Way Data Binding From the Component Class to the Property of an HTML Element.

Event Binding : Represent By ()
This is One Way Data Binding form the HTML Template to the Component Class.
With Event Binding we can Execute Handlers on User Interactions.


Two Way Binding : Represented By [()]
Two Way Binding Combines Property and Event Binding in a Single Notation.
It Ensure Model and View are always in  Sync.



Practical : 
-----------
Create New Folder i.e Component Interaction
Create The Component  i.e interaction

To Work With  Two Way Data Binding We First Need to Include Forms Module in the App Module and add it to the Imports Array.
Declare the Variable name:String in the interaction.ts File
In the HTML Create the Text Box with Name Attribute.
For TwoWay Data Binding We Use ngModel Directive with Banana in the Box and Assign the Property i.e [ngModel]="userName".

4.Split Two Way Binding  :
**************************
Some Times when the Template and Component Class Interacts We Might want to Execute few Additional Lines of Code.
For Example We have an Input Element and We need to Consistently Keep Track on Change of the Input Element 
So That Value Can be Submitted to Server When Required For that Purpose we use Two Way Binding.
Whenever The Value Changes in Addition to Updating the Value I want To Execute Some Code and that is Not Possible with 
Two Way Data Binding.
To Be able to Execute Some Custom Logic We need a Method and We need to Split Two Way Data Binding
into Property Binding and Event Binding.

Splitting Can Happen in Two Steps.
First Create a Property Binding with NgModel Directive and  Event Binding with Property i.e 

<input type="text" [ngModel]="userName" (ngModelChange)="userName=$event">
<input type="text" [ngModel]="userName" (ngModelChange)="greetUser($event)">

Here $event has the Updated Value of the Text Box.
By Splitting we now have the Ability to Execute Some Piece of Code i.e 

greetUser(updatedValue) // Split Two Way Binding
 {
    this.userName = updatedValue;
    if(updatedValue == 'Srinivas')
    {
      alert('Welcome Bhaumik');
    }
 }

5.Getters and Setters :
***********************
Here We see the Same Thing as Splitting Two Way Data Binding that Execute Some Piece of Code when Property Value Changes
By Using Setters and Getters.

Declare the Private Variable in the Component Class and add Setters and Getters.
Use the Setter and Getter Function Name in the HTML not the Private Property.

private _customerName:String

get customerName() : String {
return this._customerName;
}

set customerName(value:String)
{
  this._customerName=value;
}

And add the Piece of Code which we want to Execute while Setting the Value.

6.View Child Decorator :
************************
To Access DOM element in the Template from the Component Class We use View Child Decorator.
In The Previous Example we have 3 input Elements i.e name,UserName and CustomerName.
We have the Requirement that on Page Load, We need a focus on the Name input Element. 
To do this we use View Child Decorator.

Step1 : First Step Attach Template Reference Variable to the Input Element. i.e #nameRef
Step2 : Create a Property That will hold this DOM Element in the Component Class i.e nameElementRef:ElementRef
Step3 : Third Step is to Tell the ElementRef that which DOM Element it has to refer 
and For This Purpose we use ViewChild Decorator i.e @ViewChild('nameRef') nameElementRef:ElementRef

If we want to Write Component Initialization Code that uses the References injected by the ViewChild Decorator
we need to do inside ngAfterViewInit() Life Cycle Hook.
It is inside that LifeCycle Hook that all References to DOM Element Become Available.
Finally Implement ngAfterViewInit() Life Cycle Method.

 ngAfterViewInit() // View Child Decorator
 {
    this.nameElementRef.nativeElement.focus();
 }

this.nameElementRef is Like a Wrapper around the DOM Element and Access the Native Element Property 
and then call the focus().

7..Parent and Child :
*********************
Now We Have a Good Understanding of Interaction within a Component 
Lets See the Interaction Between Different Components i.e Parent and Child Component.

1.Sending Data From Parent Component to Child Component  Using @Input Decorator.
2.Intercept The Changes in Input Property Values While Sending Data From Parent to Child Using Getters,Setters and 
  ngOnChanges() Life Cycle Hook.
3.Parent Component Can Directly Access Child Component DOM Element,Class Properties and Methods Using Template Reference Variables
  and ViewChild Decorator.
4.Interaction with Parent Component i.e emitting Events From a Child Component to Communicate Information using eventEmitter.
  
8.Input Decorator :
*******************
Angular Components are Reusable and it is natural that Components are nested inside each other.
This establishes the Parent Child Relationship.
For Example :

	Component A 				Component B 

	Template A 					Template B
	<componentB></componentB>
	
	Class A 					Class B
	
Here Component B is nested inside Component A,Component A is the Parent Component and Component B is the Child Component.
Parent and Child Component often has to interact with each other.
First Scenario is Passing Data from Parent Component to Child Component i.e using @Input Decorator.

create a Variable in Parent Class i.e
public loggedIn=true;

In the Parent Component.HTML where the Child Component Selector is declared pass the loggedIn Variable. i.e  
<app-child [loggedIn] ></app-child>

In the Child Component Declare Two Paragraphs and based on Parent Message show the Value of Paragraph i.e 
<p  *ngIf="loggedUser">Please LogIn</p>
<p *ngIf="!loggedUser">Welcome Back</p>

To do this declare the variable i the Child Class i.e declared same as in the Parent Class i.e
@Input('loggedIn') loggedUser;

9.Intercept The Changes While Sending Data From Parent To Child Using Getters and Setters :
*******************************************************************************************








































