1.Microservice Configuration								[10-MAY-2020]  (Done)					
2.What and Why                                              [10-MAY-2020]  (Done)
3.Property File Configuration                               [10-MAY-2020]  (Done)
4.External Property Sources                                 [10-MAY-2020]  (Done)
5.Value Annotation                                          [10-MAY-2020]  (Done)
6.Configuration Properties                                  [10-MAY-2020]  (Done)
7.Yaml Files                                                [11-MAY-2020]  (Done)
8.Spring Profiles                                           [11-MAY-2020]  (Done)
9.Environment Object                                        [11-MAY-2020]  (Done)

10.Spring Cloud Config Server                               [12-MAY-2020]  (Done)
11.Set up Spring Cloud Config Server                        [12-MAY-2020]  ()
12.Spring Cloud Config Client                               [12-MAY-2020]  ()
13.Dynamic Config                                           [12-MAY-2020]  ()
14.Best Practices                                           [12-MAY-2020]  ()


*********************************************************  1.Microservice Configuration  *******************************************************************
Some of the Configuration features in Spring Boot are :

@Value
@Environment
ConfigProps
Actuator
Spring Profiles

Spring Cloud Config Server can be used for Dynamic Configuration.

*********************************************************  2.What and Why  **********************************************************************************

Configuration is essential for any Production Application.
It is the best practice to seperate the Application Code and Configuration.
If the parameters are not part of business Logic and they keep on change it is better to make them as configurable.
Some of the examples of Configuration are 

1.Database details
2.Credentials like Authentication
3.Feature Flags like boolean flag
4.Business Logic Configuration parameters like discount

5.Scenario Testing like increase the trafic of the Application
6.Spring Boot Configuration like Hystrix Parameters,Connection parameters,Error parameters

whenever we want to deploy any production Application It has to go through all the phases of Lifecycle and It has to run all the Test Cases,then deploy into production.
If we want to increase the number of threads for a particular Microservice then no need of build to deploy the Application.
For this Application has to be Configured and for Configuration changes no need of Build and Deployment.
Configuration changes are fast,easy and real time.

Different type of Configs are :
1.XML Files
2.properties
3.yaml
4.json

These are the files that we save the Configuration details that effects the Production.
Scenario's are 
Multiple Microservice Applications
Multiple instances of each Microservice Application

At the end of the development,Microservice Application should have

1.externalized Configuration
2.environment Specific Configuration
3.consistent i.e If we have multiple instance of each microservice then all the Microservice should point to the Same Configuration.
4.version History i.e we can have configuration History
5.Realtime Management i.e If one Microservice is consumed by lot of applications then increase the number of threads and it should effect while the Microservice are running.

 
*********************************************************  3.Property File Configuration   ************************************************************************

First step to externalize the Microservice Configuration is to actually put them in config file and then read it in our Application.
Create a Spring boot Project 
	
		spring-boot-config
		
Spring provides the value from the Property file instead of we asking for the Property.This is called value Injection.

	private String greetingMesage;
	
We can ask the Spring to inject the value from the property file into the above variable.
This can be done by using @Value annotation.

	@Value("${test.greeting}")
	private String greetingMesage;
	
Another thing about property File is that we can refer one property from another directly in our property file.

	test.greeting=${test.description}
	test.description= Welcome to Spring Boot ${test.name}
	test.name=Configuration 
	
Here we have taken only the Configuration out from the Code.
Property File is inside the Jar and to effect the Changes Application has to build and deploy.

*********************************************************  4.External Property Sources   **************************************************************************

Most of the cases we put the Configuration in our Spring boot Application and then we build the Application.
Here the Property file is inside the Jar.
If we want to change the Property value in the properties file no need to compress the Jar and do the Changes.
We can have Spring Boot Application with the Jar and looks for the Configuration outside the Jar without having to do anything with the Jar.
One way to run the Spring Boot Application is to run the Jar File.

	java -jar jarName
	
Create application.properties here and override the values.
Now the values are overidden by the Spring Boot when we run the Jar.
Property File outside the Jar is overridden inside the Jar.
We have an opportunity to create a MicroService with some default properties and push it to all the nodes where it needs to be run.
Any time If we want to override it,Create another application.properties next to it.
We have one step more for the Configuration.
Different host can have different values Configured for the Properties File.This is another way of overriding the Configuration.

We not only override the application.properties externally,we can also override the property in the application.properties file using command Line.

	java -jar jarName  test.greeting="From Command Line Argument"

@Value Annotation also looks for the System Properties as well.
There are lot of sources Spring looks for the property in the Configuration file and there are different levels where we can override them.

*********************************************************  5.Value Annotation   *********************************************************************************
 
@Value Annotation is an essential way to get the value from the Properties File.
By using @Value Annotation we can assign some static String to the variable.

	@Value("Welcome Bhaumik Chary")
	private String message;
	
There are some cases where we need a default value for the property and If the property does not exist in the properties file.
Here Application wont start.Possible Solution is Application should get the default value If the property does not exist.

	@Value("${message:Welcome Bhaumik Sankoji}")
	private String defaultMessage;
	
Sometimes we assign multiple values to the property in the properties File.
If we want to read the property as List we use the @Value Annotation.

	@Value("${test.names}")
	private List<String> names;
	
We can also define the key value pair in Properties File and read them using @Value Annotation.

	@Value("#{${test.dbdetails}}")
	private Map<String,String> dbdetails;
	
Here # treats as a Spring Expression Language


*********************************************************   6.Configuration Properties  ***************************************************************************

@ConfigurationProperties is an Annotation related to Configuration and can be used to pull the properties from the Configuration File.
This is sepcifically used when we have a group of Configuration values that we want to pull up at once and make it available throughout the Application.
Consider the case we have defined some properties in the Configuration file.
All the properties are prefix with db.

	db.driver=OracleDriver
	db.username=system
	db.password=bhaumik23
	
Create a Class that conatins all the properties and add the Annotation @ConfigurationProperties("db") to the Class.
Here it will automatically read the propertis from the Properties file.

	@ConfigurationProperties("db")
	@Data
	@Component
	public class DbDetails 
	{
		private String driver;
		private String username;
		private String password;
	}

Now Autowire the DbDetails ,then we get all the properties of db at one time.
If we change the type of the property in the properties file then we get an exception at the time of application Start up.

If we want to group the properties and want to use in Multiple places we use @ConfigurationProperties.
If we want to use for a Single property we use @Value.

Add the Actuator dependency to see all the End Points.
Add the below property in the proprties File.

	management.endpoints.web.exposure.include=*
	
Then Hit the following URL 

	http://localhost:3001/actuator/configpropsss
	

*********************************************************   7.Yaml Files   *****************************************************************************************

properties file is one way of Configuration and another way of configuration is YAML file.
YAML stand for Yet Another Markup Language or YAML Ain't Markup Language.
It is a Language to store data elements like Configuration.
YAML has the syntax of key:value.
YAML has support for different data types.
True benefit of YAML is in its Nesting Structure.
There must be space between keys and values in YAML.

*********************************************************   8.Spring Profiles    ***********************************************************************************

Goals that the MicroService should have in terms of Configuration.

1.Externalized
2.Environment Specific
3.Consistent
4.Version History
5.RealTime Management

With Properties file or YAML we have made the Configuration externalized.
If we seperate the Properties file from the Jar then we get environment specific Configuration.
Here the drawback is it is outside the Source Control.
It also needs a Manual Maangement across different Environments.

we can specify environment specific Configuration usig Spring Profiles.
When we run the Application without profiles we get No Active Profile Set in the Console and falls back to default Profile.
Profile is nothing but a set of Configuration values that is applicable to specific environment.
To create a Profile Name we use the below format.

	application-profile.properties
	
To Specify which Configuartion has to pickup by the Spring we need to mention the details in the Configuration File.

	spring:
		  profiles:
			active:
			- test
			
By default default Profile is active always i.e application.properties or application.yml and 
From the default Profile we specify the Configuration which profile has to pick up.
At any point of time we have Two Active Profiles if we specify the profile.
We have different Profile for different Environments.
If we want to run a Profile for Production Environment

	java -jar jarName --spring.profiles.active=production
	
We can also select the Beans by Profile Name.

	@Repository
	@profile("production")
	public Class ProductionDatasource
	{
	
	}
	
	@Repository
	@profile("local")
	public Class LocalDatasource
	{
	
	}
	
Beans have different instantiation based on Profiles.
If the Profile Annotation is not set for the Bean by default it takes the default profile.

*********************************************************   9.Environment Object   *********************************************************************************

By usig @Value and @Configprops we are asking Spring to inject the Configuration Values.
By using Environment Class we are looking up for the Configuration Values.
We need to Autowire the Environment and look up for the Configuration values.
By using Environment we can get the Active profiles in our Application.

	@Autowired
	Environment env;	
	
	@GetMapping("/envDetails")
	public String[] getEnvDetails()
	{
		return env.getActiveProfiles();
	}

We should not look up for profiles or properties and better to avoid Environment.


*********************************************************  10.Spring Cloud Config Server   **************************************************************************

we use properties file to Confifure Spring Boot Application.
Consistency is more important in Configuration in the context of MicroServices.
Consider the case we have Multiple MicroServices and we need to make sure that all the MicroService refers to the same Configuration File.
All we need to do is take out the Configuration from all the MicroServices and make it as a Configuration Server.
Here all the MicroServices refer to the same Configuration Server.
Each MicroService can ask the value for the Configuration Server varies i.e at the time of Application Startup etc.
Some of the technologies to implement Configuration as a Service are

1.Apache Zookeeper
2.ETCD - distributed key value store
3.Hashicorp Consul
4.Spring Cloud Configuration Server

Configuration Server stores the Configuration in the Repository.
Here changes to the Config should happen without build.
Spring Cloud Config Server can connect to various different data Sources.

********************************************************* 11.Set up Spring Cloud Config Server   ********************************************************************


















 



















