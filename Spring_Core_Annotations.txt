
Spring Core Annotations :
*************************
@Bean									    [31-OCT-2019]  (Done)
@Value										[31-OCT-2019]  (Done)
@Autowired									[31-OCT-2019]  ()
@Qualifier									[31-OCT-2019]  (Done)		(IOC)	
@Primary									[31-OCT-2019]  (Done)		(IOC)
@Required									[31-OCT-2019]  (Done)		
@Configuration								[31-OCT-2019]  (Done)		(IOC)
@EnableAutoConfiguration                    [18-NOV-2021]  (Done)
@ComponentScan                              [18-NOV-2021]  (Done)
@DependsOn                                  [31-OCT-2019]  (Done)		(IOC)
@Lazy                                       [31-OCT-2019]  (Done)		(IOC)
@Lookup                                     [31-OCT-2019]  ()
@Scope                                      [31-OCT-2019]  (Done)		(IOC)
@Profile                                    [31-OCT-2019]  (Done)
@Import                                     [31-OCT-2019]  (Done)	    (IOC)
@ImportResource                             [31-OCT-2019]  (Done)		(IOC)
@PropertySource                             [31-OCT-2019]  (Done)		(IOC)
@PropertySources                            [31-OCT-2019]  (Done)		(IOC)

Spring Stereotype Annotations :
*******************************
@Component									[17-OCT-2019]  (Done)			
@Controller                                 [17-OCT-2019]  (Done)
@Service                                    [17-OCT-2019]  (Done)
@Repository                                 [17-OCT-2019]  (Done)

**************************************   Spring Core Annotations  *****************************************************
@Bean :
-------
@Bean is a Method Level Annotation and is a direct analog of </bean> in XML.
@Bean Annotation is applied on a method to specify that it returns a bean to be managed by Spring Container.
Method annotated with @Bean can be used on any class directly or indirectly annotated with @Component.
Method annotated with @Bean can be used any where in the Application by using @Autowired Annotation.

@value :
--------
@value Annotation can be used to assign default values to the variables and Method Arguments.
@value Annotation can also be used to read Spring Environment Variables as well as System Variables.
@Value Annotation also supports Spring Expression Language.
@Value Annotation Argument can be String only but Spring tries to convert into specified type.

@Autowired :
------------

@Qualifier :
------------

		@Service("userService")
		public class UserServiceImpl implements UserService {
			@Override
			public void enableUser() { }
		}
		
		@Service("defaultUserService")
		public class DefaultUserService implements UserService {
		  @Override
		  public void enableUser() {}
		}
		
There may be Scenarios where we create more than one bean of the same type and want to Autowire them.
By using @Qualifier Annotation we can define which beans we want to use.
Here we use @Qualifier Annotation along with the @Autowired Annotation.

		public class OrderFacade {
		  
		  @Qualifier("userService")
		  @Autowired
		  private UserService userService;
		}
		
Note :
------
Without @Qualifier Annotation also we can resolve ambiguity problem when we have more than one bean of the same type.
Spring framework uses the bean name as the default Qualifier value.

		@Service("userService")
		public class UserServiceImpl implements UserService {
			@Override
			public void enableUser() { }
		}
		
		@Service("defaultUserService")
		public class DefaultUserService implements UserService {

		  @Override
		  public void enableUser() {}
		}

		public class OrderFacade {
		  @Autowired
		  private UserService userService;
		}

@Primary :
----------
@Primary Annotation can be used to give high preference to a Bean when there are multiple beans of the same Type.
When we have multile beans of the same type we use @Qualifier("beanName") along with @Autowired Annotation.
Here @Qualifier won't be applicable at the Configuration time.
To resolve this issue we use @Primary Annotation.

@Primary Annotation can be applied on any Class diretly or indirectly anootated with @Component or methods annotated with @Bean.

@Required :
-----------
@Required Annotation is a method level annotation and is applied to the setter method of a Bean.
@Required annotation indicates that setter method must be configured to be dependency inejected with the value at Configuration time.

Note :
If we are using @Autowired Annotation on our setter Method no need not use @Required Annotation because by default @Autowired Annotation has true value for required Attribute.

	@Data
	public class Person implements Serializable{

	private static final long serialVersionUID = 1L;
	
	@Required
	private College college;
	
	}

	@Configuration
	public class RequiredConfiguration {

	@Bean
	public College college() {
		College college = new College();
		college.setName("Partibha Degree College");
		college.setLocation("Siddipet");
		return college;
	}
	@Bean
	public Person person(College college) {
		Person person = new Person();
		person.setCollege(college);
		return person;
	}
	}
	
	public static void main(String[] args) {
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
				RequiredConfiguration.class);
		Person person = context.getBean(Person.class);
		System.out.println(person.getCollege().getName());
		context.close();
	}
	
@Configuration :
----------------
@Configuration is an analog for XML File i.e It is a Configuration using Java Class.
@Configuration is defined on Classes that defines one or more Beans.
Java Class Annotated with @Configuration is a Configuration by itself and will have methods to instantiate the configured dependencies.

@EnableAutoConfiguration :
--------------------------
@EnableAutoConfiguration enables automatic configuration features of SpringBoot Application based on the jars defined in the classpath.
@EnableAutoConfiguration also allows exclusion for us.

@ComponentScan :
----------------
@ComponentScan Annotation tells Spring where to pick the Spring Components explicitly.
The Classes Annotated with @Component,@Controller,@Service,@Repository,@Configuration,@RestController etc will be treated as Spring Components.

@DependsOn :
------------
By using @DependsOn Annotation we can force Spring Container to initialize one or more Beans before the bean which is Annotated with @DependOn
@DependsOn Annotation may be used on any Class directly or indirectly annotated with @Component or Methods Annotated with @Bean.

	@Bean
	@DependsOn(value = { "secondBean","thirdBean"})
	public FirstBean firstBean() {
		return new FirstBean();
	}

	@Bean
	public SecondBean secondBean() {
		return new SecondBean();
	}

	@Bean
	public ThirdBean thirdBean() {
		return new ThirdBean();
	}

@Lazy :
-------
Spring Container creates and initializes all the beans at the time of Application start up.
We can prevent this preInitialization of Singleton Bean by using @Lazy Annotation.
@Lazy Annotation may be used on any Class directly or indirectly annotated with @Component or on Methods which are Annotated with @Bean.

	@Bean
	@Lazy(value = true)
	public FirstBean firstBean() {
		return new FirstBean();
	}
	
	@Bean
	public SecondBean secondBean() {
		return new SecondBean();
	}   
	
	public static void main(String[] args) {
		AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(LazyConfiguration.class);
		FirstBean firstBean=context.getBean(FirstBean.class);
		firstBean.test();
		context.close();
	}
	
At the time of Application Startup only SecondBean is loaded and when we call the getBean() on FirstBean then FirstBean is loaded into ApplicationContext.

@Lookup :
---------

@Scope :
--------
@Scope Annotation can be applied to define the Scope of a Class Annotated with @Component or a Method annotated with @Bean.
Here Scope can be Singleton,Prototype,Request,Session,Global Session or some Custom Type.

	@Bean
	@Scope(value = ConfigurableBeanFactory.SCOPE_SINGLETON)
	public UserService userService()
	{
		return new UserService();	
	}
	
	@Data
	@Service
	@Scope("prototype")
	public class UserService {

		private String name;
	}

@Profile :
----------
By Default Spring Beans are loaded at the time of Application Start Up.Here Class can be annotated with @Component or a Method can be annotated With @Bean.
Here the requirement is Spring has to load the particular @Component Class or @Configuration Class or @Bean Method when the particular Profile is Active then we use @Profile.
We can configure the name of the Profile with the value argument of the Annotation.

	@Configuration
	@Profile("dev")
	public class DevConfigurations {
		// Skipped Configurations
	}
	
Note :
Spring profiles helps in seggregating Application Configuration and make them available only in certain environments.

@Import :
---------
By using @Import Annotation we can import one or more @Configuration Classes.
Here the @Beans are loaded from one configuration class to another Configuration class i.e 
To load the Bean definitions from one Configuration Class to another Configuration Class we use @Import Annotation.

@ImportResource :
-----------------
@ImportResource Annotation can be used to load the beans which are defined inside application-context.xml into ApplicationContext.

@PropertySource :
-----------------
@PropertySource annotation provides a convenient and declarative mechanism for adding Properties File to the Spring Environment.
It has to be used in Conjunction with @Configuration Class.
By default Spring identifies the application.properties.
If we want Spring to identify the user defined Properties File we use @PropertySource annotation that accepts the location of the Properties File.

	@Configuration
	@PropertySource("classpath:application.properties")
	public class PropertySourceConfiguration {

@PropertySources :
------------------
If we want to identify multiple user defined Properties Files by Spring we use @PropertySources Annotation.

**************************************   Spring Stereotype Annotations  *****************************************************
 
@Component  :
-------------
This Annotation is used on Classes to indicate that this is a Spring Component or Spring Bean.
When we add @Component Annotation,Spring Framework will add these Classes for Dependency Injection when Annotation based Configuration and Classpath scanning is used.

@Controller :
-------------
@Controller Annotation can be used to mark the Class as a Spring Controller.
This Annotation is used to identify Controllers for Spring MVC or Spring Web Flux.

@Service :
----------
This Annotation is used on Class.
@Service marks a Java Class that performs a service such as executes the Business Logic,perform calculations and call External API's.
This Annotation is a specialized form of @Component Annotation intended to be used in the Service Layer.

@Repository :
-------------
This Annotation is used on Classes which directly access the Database.
@Repository Annotation has Automatic Translation Feature.
For Example When an Exception Occurs in the @Repository There is a handler for that Exception and there is no need of Try Catch Block.
Here we can use DataAccessException or ExceptionTranslator to handle the Exceptions irrespective of JPA Vendor.

