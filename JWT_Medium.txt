1.What is JWT
2.When Should We Use JWT
3.JWT Structure
4.How JWT Works
5.JWT Authentication Summary
6.JWT Implementation


1.What is JWT :
***************
JWT is an Open Standard (RFC 7519) that defines a Compact and Self Contained way for Securely transmitting information between Parties as Json Object.
This Information can be verified and trusted because It Is digitally Signed.

JWT's Can be Signed Using a Secret key(With HMAC Algorithm) or public/private key Using RSA.

Compact :
---------
Because of their smaller size,JWT's Can Be sent through URL,POST parameter or inside HTTP Header.
Additionally smaller size means transmission is Fast.

Self-Contained :
----------------
The Payload Contains all the information about the User,avoiding the need to Query the Database more Than Once.

Authentication :
----------------
This is the most common Scenario For Using JWT.
Once The User is Logged in and for each subsequent request it will include the JWT along with the User to Access Routes,Services and resources that are permitted with The Token.
Single Sign on is a feature Widely used now a days using JWT Because of its Small OverHead and its ability to be easily used across different domains.

Information Exchange :
----------------------
JWT is Good Way of Securely transmitting the information between the parties because they are Signed using Public/Private Key Pairs.
Additionally the Signature is Calculated using Header and Payload so that we can verify the Content is Not Tampered With.

3.JWT Structure :
*****************
Json Web Token Consists of 3 Parts Which are Separated by Dots.

1.Header
2.PayLoad
3.Signature

Typically JWT Looks Like xxxxxx.yyyyyyy.zzzzzzzzz

1.Header :
----------
Typically Header consists of Two Parts.
Type of the Token i.e jwt and Hashing Algorithm to be used which can be either HMAC SHA256 or RSA.

Example :

	{
		"typ":"JWT",
		"alg":"HS256"
	}

Then this Json is base64Url Encoded to form the first part of The JWT.

2.PayLoad :
-----------
Second Part of the Token is Payload Which Contains the Claims.
Claims are Statements about an Entity (Typically the User) and MetaData.
There are 3 Types of Claims Reserved,Public and Private 

1.Reserved :
------------
These are Set of Predefined Claims which are not mandatory but recommended to Use to provide Set of useful InterOperable Claims.
Some of them are iss(Issue),exp(expiration time),sub(subject),aud(audience) etc.
Here Claims are only 3 Characters long as JWT is meant to be compact.

2.public :
----------


3.private :
-----------


An Example of Complete Payload Would be 

		{
		  "sub": "1234567890",
		  "name": "John Doe",
		  "admin": true
		}

The PayLoad is then Base64Url Encoded to Form the Second Part of the JWT.

Signature :
-----------
To Create The Signature part We Have to Take the encoded Header,encoded Payload,Secret Key and the Algorithm Specified in the Header and Sign That.

For Example If We Want to Use HMAC SHA256 algorithm,Then the Signature will be

hMACSHA256(
base64UrlEncode(header) + "." +
base64UrlEncode(payload),
secret
)

The Signature of the JWT is used to verify that the Sender of the JWT is Who it says it is and ensure that the Message was not changed along the Way.
The Output of 3 Base64 Strings is Separated by dots that can be easily passed in HTML and HTTP Environments.


4.How Does JWT Work :
*********************
When the User Successfully Logged in using their Credentials,A JWT Token will be returned as a part of Response and must be Saved Locally (Local Storage or a Cookie can also be used)
In The Traditional Approach,We Create a Session in the Server and return the Cookie.
When the user wants to access the protected route or resource,User Agent Should Send the JWT in the Authorization Header using Bearer Schema.

Authorization : Bearer <Token>

Using JWT is Stateless Authentication mechanism where the user state is never saved in the Server Memory.
The Server's Protected Resources will Check For a valid JWT in the Authorization Header
Once JWT is Present and validated,will be allowed to access the protected Resources.
AS JWT are Self Contained i.e all the necessary information is present,reducing the need to query the database multiple times.


5.JWT Authentication Summary :
******************************
Token Based Authentication has become very popular in recent times as they provide important benefits when compared to Session or Cookie.

CORS
No Need For csrf Protection
Better Integration with Mobile
Reduced Load on Authorization Server
No Need Of Distributed Session Store.


JWT Authentication Flow :
-------------------------
User Obtains access Token by providing credentials to the Authorization Server.
User Sends Access Token to each request to access protected API Resource.
Access Token is Signed,Contains User Identity and Authorization Claims.


JWT Implementation Details :
****************************

A.JWTTokenFilter :
------------------
JWTTokenFilter is applied to each API i.e "/**" with the exception of Sign In and Sign Out End Point.
JWTTokenFilter Checks for The access Token in the Authorization Header.
If the Access Token is found in the Authorization Header delegates the Authentication to JWTTokenProvider otherwise throws Authentication Exception.
Invokes Success or Failure Strategies based on the outcome of the Authentication Process Performed by the JWTTokenProvider.
On successful Authentication JWTTokenFilter invokes chain.doFilter(request, response) 
because last filter i.e FilterSecurityInterceptor is responsible to call the actual controller that is handling actual API Resource.

B.JwtTokenFilterConfigurer :
----------------------------
Adds the JWTTokenFilter To the DefaultSecurityFilterChain of Spring Boot Security.

C.JwtTokenProvider :
--------------------
The JWTTokenProvider has the Following Responsibilities.

Verify The access Token's Signature.
Extract Identity and Authorization Claims from the access Token and uses them to create UserContext.
If the Access Token is malformed,expired or Token is not Signed with the appropriate Sign in Key then Authentication Exception will be Thrown.


