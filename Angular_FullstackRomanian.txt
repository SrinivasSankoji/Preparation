1.Angular Architecture						[25-APR-2020]  (Done)
2.Create an Angular Application             [25-APR-2020]  (Done)
3.Add Bootstrap                             [25-APR-2020]  (Done)
4.Angular Folder Structure                  [26-APR-2020]  (Done)
5.Component Basics                          [26-APR-2020]  (Done)
6.Routing                                   [26-APR-2020]  (Done)
7.Angular Forms Data Binding                [26-APR-2020]  (Done)
8.Form Validation                           [27-APR-2020]  (Done)
9.Debugging Angular Application             [27-APR-2020]  ()
10.Fetch Data using HTTP                    [28-APR-2020]  (Done)
11.Angular Service                          [28-APR-2020]  (Done)
12.All Together (Two Parts)                 [29-APR-2020]  (Done)
13.Complex Angular Component                [22-APR-2020]  ()
14.Component Communication                  [22-APR-2020]  ()
15.Pipes                                    [22-APR-2020]  ()
16.Custom Pipes                             [22-APR-2020]  ()


******************************************************  1.Angular Architecture	******************************************************

There is a Clear Separation of Concern regarding to End Points that can be allowed through Application.
Clean Code and Maintainability.
Well Suited For Large Applications or Application with Complex Client Side Interactions.
Much Easier to Manage and Maintain.

We should use Angular when our Application is Complex enough to Justify It.
When we want to Test Client Side as Well.
Don't use Angular for Simple Applications that just do the HTTP POST/GET.
	
****************************************************** 2.Create an Angular Application   *********************************************

ng new romanian
ng build 
ng serve

****************************************************** 3.Add Bootstrap  **************************************************************

In order to add Bootstrap and Font Awesome Dependencies we need to use npm.
we need to register the downloaded css and Javascript Files in angular.json File.
To Install Bootstrap and font-awesome in an Angular Application

	npm install bootstrap font-awesome --save

Here the Files will be Installed in the Local Node Modules.
If we want these dependencies to be available to every body,register them in the packages.json File and is registered by default.
In order to use the bootstrap and font-awesome register it in the styles.css.

	@import url(~node_modules/bootstrap/dist/css/bootstrap.min.css);
	@import url(~node_modules/font-awesome/css/font-awesome.css);

******************************************************  4.Angular Folder Structure  **************************************************

e2e :
-----
Stands for end to end and refers to the ene to end Testing of our Application.
It Contains Scripts that can be used to Simulate User Actions and Behavior.
If we want to write end to end Integration Test for an Angular Project we need to write the Scripts Here.

node_modules :
--------------
Folder Contains the Libraries that we have downloaded using npm install Command.
when we create a new Angular Project Some Dependencies are added Here.
This Folder should not be included under source Control.
It is a Local Folder and the Packages are installed Locally.
If some one wants to import the Project just import the source code remove the node_modules Folder and then run the Command npm install.
npm install will look into the packages.json and download the required dependencies.

src :
-----
This is the root Folder where we keep our Applications Internal Code.

app :
-----
When we create a new Angular Application by Default it comes with default app Module and default app component.
If we want to create more modules and more Components we can create inside app Folder.

assets :
--------
It stores all the Images ,Fonts ,Music Files  etc.
Every Static Content can be Placed Here and will be globally available to the Application.


favicon.ico :
-------------
This is a Small icon that we can see in the browser.
This is the icon that is displayed on most of the Browsers.

index.html :
------------
It is a root view of the Application and is a Simple HTML File.
It does not contain any css and any Script.Those will be added after the Build Process.
It Contains the Title of the Application,base href.
By default all the Application runs under root.
App Componenet is included inside this HTML.
This is the Default Angular Template that we see when we create an Application.
 
main.ts :
---------
It is an Entry Point for an Angular Application.
It bootstraps the app Module which in turn bootstarps the App Component.

karma-config.js :
-----------------
It is a Configuration File for Karma.
If we wan to run the Unit Test Cases for an Angular Project,This is the Place  where we run karma Test Runner.

polyfill.ts :
-------------
This is the Place where we can make an Application Compatible with Various Browsers.
If we want to target an Older Version of IE ,Then include the polyfill  that support the desired version.

styles.css :
------------
It is a Global Style Sheet for an Application.
It can be used to import other Stylesheet here like Bootstrap ad Font-awesome.
we can define globally available css styles that an be reused across the Application.
Each Component has its own Style Sheet which applies only to that Component.

angular.json :
--------------
It as a Configuration of the Angular Workspace.
Conatins 

Package Manager
Global Styles
Global Javascripts
App Prefix i.e By Default Root Module for an Angular Application is app and we can change Here.

package.json :
--------------
It describes all the npm dependencies of an Application.
when  we install any dependency those references are included in the package.json File.


******************************************************  5.Component Basics *****************************************************************************

Component is a Logical Structure that Contains a Portion of the View in the Browser.
A Typical Web Application contains N Number of Components.
Component Encapsulates View,Logic and Styles.
Every Angular Application has  atleast one Component and By Default it is App Component.
In Angular Entire Application is a Component Tree.

******************************************************  6.Routing **************************************************************************************

Routing Enables our Application to navigate from one View to another View based on User Input i.e Button CLick,URL change etc.
To Configure the Router we need to import the Router Module and add it to the imports Array app.module.ts.

	const appRoutes: Routes = [
  {path:'notes',component:NotesComponent},
  {path:'feedback',component:FeedbackComponent},
  {path:'',component:NotesComponent,pathMatch:'full'},
  {path:'**',component:NotfoundComponent}
	];

  export const routingComponents =[NotesComponent,
  FeedbackComponent,
  NotfoundComponent
  ];
  
In app.module.ts 

	 @NgModule({
	declarations: [
    AppComponent,
    NavigationComponent,
    routingComponents
   ],

When we Configure the Routes we can pass Some additional Information i.e 

	  imports: [RouterModule.forRoot(appRoutes,{enableTracing:true})],
	  

******************************************************  7.Angular Forms Data Binding	******************************************************************************

Forms are the Heart of Many Enterprise Applications.
By Default Forms are disabled in Angular.
There are two types of Forms

1.Template Driven Forms
2.Reactive Forms (Model Driven Approach)

We need to import the FormsModules and add it to the IMports Array in app.module.ts

	import {FormsModule} from '@angular/forms';
	
Creaate the Model for the Feedback Form.
	
	export interface FeedbackViewModel
	{
	  name:string,
	  email:string,
	  feedback:string
	}
	
Then declare the model Variable 

	model:FeedbackViewModel ={
    name:'',
    email:'',
    feedback:''
	};
	
To send the Data to the Server we need to import HttpCLientModule and  add it to the imports Array.

	import {HttpClientModule} from '@angular/common/http';
	
Inject the HttpCLient in the Feedback Component Class and then Submit the Data to the Server.


****************************************************** 8.Form Validation  ******************************************************************************************

Here we enable Field Validation like required,mail,minlength etc not to send the invalid data to the server.
In case of Template Driven Forms most of the Validation logic is written inside the HTML Template.

	 [class.is-invalid]="name.touched && name.invalid"
	 
To Display the Error Messages

	<small [class.d-none]="name.valid && name.touched">Name is Required</small>
	
	
****************************************************** 9.Debugging Angular Application  *****************************************************************************

Angular uses typeScript by Default which prevents many of the bugs that javascript Applications.
It allows us to write JavaScript Code with static typing as opposed to dynamic typing.
we can define the data types and properties of the object befor we use in the code.


To debug Angular Application we use Debugger statement from JavaScript.
Debugger statement will stop the execution of JavaScript that allows us to pause the Application at any Point.

We can also inspect the data inside the HTML using JSon Pipe.

we also have Angular Built in Debugging Tools.
To enable debugging Tools we need to change the main.ts File.


****************************************************** 10.Fetch Data Using HTTP  **************************************************************************************

HttpClient executes the HTTPRequest and returns Observables.
If we don't subscribe the observables then nothing will happen.
HttpClient returns the Typed Observables and we can have control on it.
If we subscribe multiple times to these observables then Multiple HttpRequest willbe Triggered.

Here we are going to Build the NoteBookList Component.
To get the Details we need to call the Http API.
Create the Model of Notebook.

	export interface Notebook {
    id:string,
    name:string,
    nbNotes:number
	}

Inject the HttpClient into NoteComponent Class.

	constructor(private _htttp:HttpClient) { }

	public getAllNoteBooks()
	{
    let url="http://localhost:1235//api/notebooks/all";
    this._htttp.get<Notebook[]>(url).subscribe(res =>{
     this.notebooks = res;
    },error =>{
      alert("Error has Occured");
    });
	}
	

****************************************************** 11.Angular Service *********************************************************************************************

Service Contains the business Logic that can be reused across Components.
As per the Angular Component Should not fetch or save data directly.
Component should only focus on presenting Data and delegating the data access and logic to the Service.
Angular Services are Injectable Classes.
we can leverage Angular Dependency Resolution to use them in other Components.
Each Service sholud be Testable and Tested.
When we create a Service from Angular CLI then by Default it will be Singleton.

To Create the Service we use the command

	ng g s noteservice
	
Inject the HttpClient into the Service.
	
	  constructor(private _http:HttpClient) { }


	public getAllNoteBooks():Observable<Notebook[]>
    {
    return this._http.get<Notebook[]>(this.baseurl+'notebooks/all');
    }

  public postFeedback(feedback:FeedbackViewModel):Observable<any>{
    return this._http.post<any>(this.baseurl+'feedback',feedback);
  }

In the Feedback Component Class call the Service API to Submit the Feedback.

	submitFeedback():void
   {
    this._notesService.postFeedback(this.model).subscribe(
      res => {
        location.reload();
      },
      error => {
        alert("Error Occured");
      }
    );
    console.log(this.model.name);
   }
   

****************************************************** 12.All Together (Two Parts) *****************************************************************************

Edit the NoteComponenet.html.
HTML Page Consists of Note Menu and Note Content.
Note Menu Consists of two Menus and Buttons For create and Update the Notes.
Note Content consists of Notebook Menu and Notes Panel.
Notebook Menu which will display List of availaible NoteBooks and Notes Panel will have associated Notes for each Notebook.

In the NoteComponent.ts we have getAllNoteBooks() that will get all the Notes when the Component is initialized.

	  public getAllNoteBooks()
	  {
		let url="http://localhost:1235//api/notebooks/all";
		this._notesService.getAllNoteBooks().subscribe(
		  (response) =>{
			this.notebooks=response;
		},(error) =>{
    });
	
Here we Create the Service For Creating,Updating and Deleting the Notebook.

In the Part Two we Focus on Displaying the Note List.
When the Application Loads for the First Time It has to Display all the Notes along with Note Details.
Similarly when The User Clicks on Particular Notebook,It has to Display only the Particular Notes List.

Create a Fucntion in the NotesComponent to get all the Notes to call it from the Service.
Create the Note Entity and then create the API to get all the Notes.


******************************************************  13.Complex Angular Component  **************************************************************************












	







