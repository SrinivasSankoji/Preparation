1.What is Java Script                                               [21-FEB-2020]  (Done)
2.Why Java Script                                                   [21-FEB-2020]  (Done)
3.Setting up Java Script                                            [21-FEB-2020]  (Done)
4.Variable Declaration                                              [24-FEB-2020]  (Done)
5.Number Primitive Type                                            	[24-FEB-2020]  (Done)
6.String and Boolean                                               	[24-FEB-2020]  (Done)
7.Understanding Undefined                                          	[25-FEB-2020]  (Done)
8.understanding null                                               	[25-FEB-2020]  (Done)
9.Difference Undefined and null                                    	[25-FEB-2020]  (Done)
10.Types Summary                                                    [25-FEB-2020]  (Done)

11.typeof Operator                                                  [25-FEB-2020]  (Done)
12.Type Coercion and === Operator                                   [25-FEB-2020]  (Done)
13.Type Coercion Summary                                            [25-FEB-2020]  (Done)
14.Objects                                                          [26-FEB-2020]  (Done)
15.Object Literal                                                   [26-FEB-2020]  (Done)
16.Object Characteristics Summary                                   [26-FEB-2020]  (Done)
17.Dot and Bracket Notations                                        [26-FEB-2020]  (Done)
18.Difference Dot and Bracket                                       [26-FEB-2020]  (Done)
19.Nested Objects                                                   [26-FEB-2020]  (Done)
20.Revisiting == For Objects                                        [26-FEB-2020]  (Done)

21.Revisiting Undefined vs null                                     [26-FEB-2020]  (Done)
22.Deleting Properties                                              [26-FEB-2020]  (Done)
23.Introducing Arrays                                               [26-FEB-2020]  (Done)
24.Secret Behind Java Script Arrays                                 [26-FEB-2020]  (Done)
25.Wrapper Objects                                                  [07-MAY-2020]  (Done)
26.Functions                                                        [07-MAY-2020]  (Done)
27.Flexible Argument Counts                                         [07-MAY-2020]  (Done)
28.Function Returning Values                                        [07-MAY-2020]  (Done)
29.Function Expressions                                             [07-MAY-2020]  (Done)
30.Anonymous Functions                                              [07-MAY-2020]  (Done)

31.Function as Arguments                                            [07-MAY-2020]  (Done)
32.Function on Objects                                              [07-MAY-2020]  (Done)
33.this Keyword                                                     [08-MAY-2020]  (Done)
34.Code Exercise                                                    [08-MAY-2020]  (Done)
35.Exercise Solution                                                [08-MAY-2020]  (Done)
36.Default Function Arguments                                       [08-MAY-2020]  (Done)
37.Unit Summary                                                     [08-MAY-2020]  (Done)
38.Array Methods                                                    [08-MAY-2020]  (Done)
39.Array For each Method                                            [08-MAY-2020]  ()
40.Reading Assignment                                               [08-MAY-2020]  (Done)
41.Next Steps                                                       [08-MAY-2020]  (Done)


****************************************** 1.What is Java Script and Java Script as Scripting Language	***************************************************

JavaScript is a light weight,interpreted and object oriented programming language with first Class functions.
JavaScript is best known as scripting language for web pages.
JavaScript is also used in many non browser environment as well.

Light Weight :
--------------
Light weight language is nothing but easy to implement and has a small memory foot print.

Interpreted :
-------------
Interpreted means no compilation is required and instructions are executed directly.
JavaScript compilation is different from other programming languages compilation.
In case of C++ or Java intermediate code will be generated when we compile the code and run the generated code.
In C++ Object binary will get generated where as in case of Java byte code will get generated.
We execute that generated code.
In case of JavaScript there is no intermediate file and the code will be executed directly.

Java Script is Object Oriented :
--------------------------------
When we write the code we model the code around Objects.
What are the steps needed to solve the problem.
When we think about the problem we break the problem into Objects with data and functionality.

First class functions :
-----------------------
Functions can be used as values i.e. We can assign a function to a variable.
We can also pass functions as parameter to method calls.

Java Script as Scripting Language :
-----------------------------------
In Scripting language instructions are written for a runtime environment.
Best example of Scripting language is Shell Script.
We have commands that can run on runtime environment.
Here runtime environment means Operating System.
We can also bundle the commands and make them to execute as a file.
This becomes a script that the shell executes at runtime.

Here runtime environment is Browser.
Browser renders the HTML and runs the JavaScript.

When we make any request to the web Application,Browser makes the request to the Web Server.
Web Server process the request and return the response in the form of HTML text.
Browser examines the text and convert them into Objects.
Here each HTML tag becomes an Object Tree.
Object Tree refers to a DOM Tree.
Browser builds the DOM Tree and renders the view to the Browser. 

Here HTML is a static language.
However HTML comes with JavaScript and JavaScript is a scripting language.
JavaScript has the ability to manipulate the DOM Tree i.e

New nodes can be added to the DOM Tree,Removed from the DOM Tree or Update the existing DOM Tree etc.
Browser reflects the view based on DOM Tree.
JavaScript is a way to execute dynamic functionality on Browser.

****************************************** 2.Why Java Script	***************************************************************

JavaScript can be used for :

Client Side web development because JavaScript is very often used on Browser.
Native JavaScript
JQuery Library lets us modify the DOM Tree on the client side.
Advanced client side application framework like Angular,React,Ember,Backbone etc.
We can also implement server side web development by using NodeJs,Express.

We can also build Browser extensions with JavaScript for example Plug Ins.
There are some frameworks that allows to build desktop and mobile applications with JavaScript.
JavaScript is gaining popularity with IOT Applications.
JavaScript is standardized as ECMA Script.

****************************************** 3.Setting up Java Script  *****************************************

Web Browser is a runtime environment for JavaScript.
Recommended to use FireFox with ScratchPad Development Tool.

Install bebel 6 Plug In Visual Studio Code and run the Java Script as 

	node hello.js

****************************************** 4.Variable Declaration ********************************************

In any Language whenever there is a requirement to hold the variable we need to declare the variable.
In JavaScript we declare the variable by using var keyword.

	var value1=42;
	var value2="JavaScript";
	var value3=true;
	
In JavaScript we don't have information about the type of the variable.
There is no pre declaration of type required in order to create a variable.

	var value1;
	value1="JavaScript";
	
******************************************	5.Number Primitive Type ******************************************

Once we declare the variable we can assign primitive types in JavaScript.
Primitive Types in JavaScript are

	Number
	String 
	Boolean
	undefined
	null
	
Number in JavaScript are double precision 64 bit format IEEE 754 values.
We don't have Integer,Long data types in JavaScript.

	var a=10.2;
	console.log(a);

	var b="Welcome JavaScript";
	console.log(b);

	var c=true;
	console.log(c);
	
****************************************** 6.String and Boolean **********************************************

String is a sequence of Unicode 16 bit characters in JavaScript.
There is no character keyword in JavaScript.
Everything in JavaScript is a String with a sequence of character.

Boolean value can be either True or False.

	var d="Hello"+c;
	console.log(d);// Hellotrue
	
There is no Type information associated with JavaScript.

	a="Hello Java";
	
In another Language It is going to give CTE saying assigning variable to another Type.
A Variable can hold any value at any point of time.
This behavior in JavaScript is called Loose Typing.

****************************************** 7.Understanding Undefined   ***************************************

Whenever we want a new variable we declare the variable.

	var value;  --> 1
	
Definition is nothing but assigning a value to the variable.

	value="Hello";  -->2
	
	var value="Hello";  -->3
	
The value between declaration and definition is undefined.
If we don't define any value to the variable then by default it is undefined.
JavaScript has defined separate type called Undefined for variables that has not defined.
                                      	
****************************************** 8.understanding null   ********************************************

null is another primitive data type in JavaScript which contains only one value i.e null.

	var value=null;
	
Until we assign a value to the variable default value is Undefined.
If we assign a null Value to the variable the it displays the value as null.

****************************************** 9.Difference Undefined and null    ********************************  

In some cases we get the requirement of default value for property should be null or NA instead of undefined.
For example middle name should be null or NA instead of undefined .
Age can be undefined instead of null Value.
    
****************************************** 10.Types Summary ***************************************************   

No need to declare variable type.
Same variable can be assigned to value of different types.
No scoping information in the variable declaration.

	In Java we have default --> private --> protected --> public which binds with the Class.
	
	
****************************************** 11.typeof Operator  ************************************************  

variables and values can be Interrogated i.e 

In Java or any other language a Variable can Contain only one Type and we can identify by Looking into the Declaration.
But In case of JavaScript we cannot identify the Type of Variable till Runtime.
It is Important to identify the type of Variable using typeof operator.

	console.log(typeof d);
	                     
****************************************** 12.Type Coercion and == Operator  ***********************************   

Type Coercion in JavaScript is Similar to Typecasting in Java.
Consider the Variable has defined with a Value and some times interpreter has to do the Automatic Type Conversion for us
in order to make the Operation Work.

This is Usually Called Type Coercion.

	var e=123+"4"; // 1234 in the form of String

Here JavaScript performs the Type Coercion internally and Converts into String.


== Operator :
-------------

Single = performs an assignment Operation

== performs Comparison Operator.

It Performs an Operation Similar to any other Programming Language.

	var f=10;
	var g="10";

	if(f===g)
	{
		console.log(true);
	}
	else
	{
		console.log(false);  
	}

In case of == Operator If any of the Value is capable of Type Coercion then it will perform the Type Coercion and Compares the Values.
If both the Values are same after conversion then it returns the result.

=== Operator :
--------------

=== Operator will not perform the Type Coercion and compares the Values.
Then in this case it returns false.
                          
****************************************** 13.Type Coercion Summary ***************************************************

We can pass a Value to the if Condition in JavaScript i.e 

	var a=10;
	if(a)
	{
    console.log(true);
	}
	
The above code won't work in java because a has to be Boolean.
Here if a has non zero value it returns true otherwise returns false.
In case of  String if the value is not null and not empty then it returns true otherwise returns false.

JavaScript is Flexible with Typing
Values of all types has an associated boolean Value
Always use === Operator for Precise Check.


******************************************  14.Objects     ***********************************************************  

We can write Code and Model the Programming Structure using Objects.
But JavaScript is Not Class Based Object Oriented Programming Language.
In Java We Need a Class to define an Object,Class Forms the Template and all the Objects forms the Copies of the Template.
JavaScript Objects are free form and they are not bound to any Class.
we can create an Object in JavaScript in Multiple Ways :

Creating an Object InLine :
---------------------------

	var myObject={};
	console.log(myObject);
	
We can add or remove properties at any Point of Time because JavaScript does not have any Structure.
An Object typically Consists of Data and Functionality.
Data is Referred to as Properties and Functionality is referred to as Methods.
To add a new Property to the myObject i.e 

	myObject.property1="Hello";
	
To access the Property inside the Object

	console.log(myObject.property1);
	
We can also access the Object Property Using [] i.e

	console.log(myObject["property1"]);
	

****************************************** 15.Object Literal *********************************************************

Creating an Object Using Literal :
----------------------------------
Another way of Defining Objects is by Using Object Literal.
Instead of Creating Object in line We can create the Object upfront.

	var myObject2={
        "property1":"Welcome",
        "property2":36
		};

In JavaScript there are no Accessor Limitations unlike Java.
If we access the Property which does not Exist then we get undefined as Response.
                                                   
****************************************** 16.Object Characteristics Summary   ***************************************  

Objects in JavaScript are free form and they are Not Bound to a Class.
Object Literal Notation i.e {} to create an Object.
Object Properties can be Accessed Directly and there is No Concept of Scoped Variables in JavaScript.
New Properties can be added or removed to the Object Directly.
Object can have Methods.
                           
****************************************** 17.Dot and Bracket Notations      *****************************************

Dot Notation can be used to access the Property of an Object.
We can also access the property of an Object by Using Bracket Notation i.e [].
	
	console.log(myObject2["property2"]);
                                
****************************************** 18.Difference Dot and Bracket    ******************************************

Bracket Notation is used in Certain Scenarios where Dot Notation does not work.
If the Property name is a reserved word or invalid identifier(Property Name Starts with Number),Property Name is Dynamic().

	var myObject2={
        "property1":"Welcome",
        "property2":36,
        "1":"Number"
	};

	console.log(myObject2.1);// Give Compile Time Error and we use Bracket Notation.

Always Variable name should start with String and Not a Number or Special Character.
If the Property name is Dynamic i.e while writing the code We have no Idea what the Property is then in this case we use Bracket Notation.

When we have the Bracket Notation it reduces the Opportunity for the Engine to Optimize.
When we have the Dot Notation Engine knows the code upfront and it knows what the Variable is .
                                 
****************************************** 19.Nested Objects      ****************************************************

In Most Programming Languages an Object is a reference to the Memory Location of the Heap.

	var myObject3={};
	
myObject3 points to the Memory Location of the Browsers Memory of the Heap.
we can have another Variable that points to the same Object.
We can also have a property in an Object that contains an Object.

	var myObject2={
        "property1":"Java",
        "property2":36,
        "property3":"JavaScript",
        "custom":{
            "property4":"Angular",
            "property5":"SpringBoot",
            "property6":"TypeScript"
        }
	};
	
To Access the Property of an Inner Object we use Dot Notation.

	console.log(myObject2.custom.property4);
	
To create a New Property inside the Inner Object 

	myObject2.custom.property7="Design Patterns";
	
we can also Bracket Operator to get the Inner Object Property.

	console.log(myObject2.custom["property4"]);

	
****************************************** 20.Revisiting == For Objects    *******************************************

=== Operator is the more Precise way of Checking the Equality when they are Primitives.
	
	var myObj4=myObject3;  // Assigning to the Variable
	
	console.log(myObj4==myObject3); //Checks for the Equality of Objects without Type Coercion
	
Also Object Variables are equal when they point to the Same Memory.

                                   
****************************************** 21.Revisiting Undefined vs null   *****************************************

undefined is when the value is not set for a Property where as null is when an empty value set for the Property.
when we are referring to a Property that does not exist then we get the result as undefined.
                                  
****************************************** 22.Deleting Properties         ********************************************   

To remove the Property of an Object 

	myObject2.custom.property6=undefined;
	
But if we try to access the Object we get the property6 as undefined.

	{ property1: 'Java',
  property2: 36,
  property3: 'JavaScript',
  custom:
   { property4: 'Angular',
     property5: 'SpringBoot',
     property6: undefined } }
	 
To remove the Property of an Object we use the keyword delete.

	delete myObject2.custom.property6;
	 
	{ property1: 'Java',
	  property2: 36,
	  property3: 'JavaScript',
	  custom: { property4: 'Angular', property5: 'SpringBoot' } }

                                
****************************************** 23.Introducing Arrays     *************************************************

when we have Sequence of Values that we have to access in index based we use Arrays.
Arrays in JavaScript can be defined as 

	var myArray=[100,200,300];
	
Here an Array is Define InLine by using [] where Object are defined InLine Using {}.
To Access the Element of the Array are 
	
	console.log(myArray[0]);

When we access the element in an Array where the index is not present we get the Result as undefined.

	console.log(myArray[3]);
	
To add an Element to the Array 

	myArray[3]=400;
	
                                 
****************************************** 24.Secret Behind Java Script Arrays   ******************************************

If we want to find out the length of an Array we use length property 
	
	console.log(myArray.length);

An Array is actually an Object.
when we are accessing the length of an Array Actually we are Accessing the length Property of an Array Object.
Arrays in JavaScript are stored as key value pair  where Array index are Keys and Array Values are the Values.
Here Dot Notation will not work because If the key is Number the Dot Notation wont work and we have to use Bracket Notation.
We Access the Array Elements by Using Bracket Notation.

Here we are Not Passing String to a Bracket Notation and Passing Only Number.
This is Because JavaScript will Perform the Type Coercion Automatically i.e converts the Number to String.
There is No Limitation in adding the Element with any Index i.e 

	myArray[300]=400;
	
length Property counts the index of the Array i.e Max Element of the Index and returns 301.
We can also add any Value to the Array as an Index but Here length Property won't Change.
                                          
****************************************** 25.Wrapper Objects    ******************************************                                           								

Wrapper is a Concept that exists in Java and also exists in JavaScript.
For Each Primitive Data type there will be a Corresponding Object Data Type.

	var greeting ="Hello World";
	console.log(greeting.length);
	
Here if greeting is a Primitive Type then How can we Access the length on the Primitive Type.
When we are calling length on greeting variable,It creates the String Object and calls the length Method on that Object and destroys the Object
once it is executed.
Here if we check type of greeting then we get Primitive String as the Return Type.

	console.log(typeof greeting);
	
Wrapper Objects in JavaScript are 

String 
Number
Boolean 
Symbol

******************************************  26.Functions  ************************************************************************************

Function is a peice of code which will be executed in isolation.
Function can be defined by using

	function sayHello()
	{
	}
	
We can call the Function by using
	
	sayHello();
	
we can also pass the parameter to the Function without the data type as compared to other Langyages.

	function sayHello(name)
	{
    console.log(name);
	}
	
we can also send Multiple Parameters using Comma Seperated.

	function twoArguments(name,timeoftheDay)
	{
    console.log(timeoftheDay +' '+name);
	}


******************************************   27.Flexible Argument Counts     ************************************************************************************ 

	function twoArguments(name,timeoftheDay)
	{
    console.log(timeoftheDay +' '+name);
	}
	
If I call the Function with One Argument then in Other Language we get the Compile Time Error.
But Here it will be executed with second value as undefined.
If we add more Parameters then it will be ignored.
Overloaded Functions are not Possible in JavaScript.

   
******************************************   28.Function Returning Values    *************************************************************    

We can also have the Function that returns the Values.
we can return the Function Value by Using return keyword.

	function twoArguments(timeoftheDay,name)
	{
    return timeoftheDay +' '+name;
	}
	
	var wish=twoArguments("Good Evening","Bhaumik");
	console.log(wish);
	
return can be any data type and can also be  undefined if it does not return anything.

******************************************   29.Function Expressions   *******************************************************************

Most of the Times we use Function Declaration and call the Function Definition when ever we execute the Function.
There are two ways of Creating Function 
1.Normal Approach
2.Function Expressions

Functions in JavaScript are First Class Functions i.e function itself is a Value to a Variable in JavaScript.

	var demo=function funExp()
	{
    console.log("Function Expression");
	};
	
To execute the above Function 

	demo();


******************************************  30.Anonymous Functions    *********************************************************************

Function Declaration :

	function twoArguments(timeoftheDay,name)
	{
    return timeoftheDay +' '+name;
	}
	
Function Expression i.e assigning the Function to a Variable is Called Function Expression.

	var demo=function funExp()
	{
    console.log("Function Expression");
	};
	
From the Function Expression we don't need really a Name to the Function.
In case of Anonnymous Function we create a Inline Function and assign it to the Variable.
If we reassign the Value of the  Variable then we get an Error.
	
	var demo=function ()
	{
    console.log("Function Expression");
	};

******************************************  31.Function as Arguments  ***********************************************************************

We can assign Function to a Varaible and  to that Function we Pass an argument as a Fucntion and taht will execute.
	
	var f2 = function(fn)
	{
    fn();
	};
	
	var f1=function ()
	{
    console.log("Function argument");
	}

	f2(f1);
	
Here we can also pass an argument to the Function i.e f2(f,"Bhaumik");

******************************************  32.Function on Objects    *************************************************************************

Any thing we can assign to a Variable Similarly Anything we can assign to a Obejct Property.
Object with Property would be a Function.
	
	var myObject={
    "name":"Bhaumik Chary"
	};

	myObject.myMethod= function ()
	{
		console.log("Function Object");
	};
	
******************************************  33.this Keyword     ********************************************************************************      

Common Usage of Methods in an Oject of a Class is Accessor Methods i.e setters and getters.
Similarly we access the Method inside an Object in JavaScript by using this keyword.
create the Person Object i.e  

	var person ={
	  "firstName":"Bhaumik",
	  "lastName":"Chary",
	  "fullName": function()
	  {
		  return person.firstName + " "+ person.lastName + " Sankoji";
	  }  
	};

	var name=person.fullName();
	console.log(name);
	
The drawback with this approach is accessing the person inside the initialization of the Person.
return Statement will only be executed when we call the function on the person Obect.
Here the Problem is we are depending on the name of the Object and if the object is reInitialized then we won't be able to access the Object.

	var person2=person;
	person={};
	var name=person2.fullName();
	console.log(name);
	
we get the output as undefined because the person object is empty Now.
fullname function is hardcoded to the person variable and can reassign to any other obejct any time.
Here the Solution is able to access the Object which it is part of i.e current object by using this keyword.


	return this.firstName + " "+ this.lastName + " Sankoji";
 
       	
******************************************  34.Code Exercise     ********************************************************************************* 

			var person ={
			"firstName":"Bhaumik",
			"middleName":"Chary",
			"lastName":"Sankoji",
			"address":{
				"houseNo":"2-4-118/59/1",
				"street":"Venkateswara Colony",
				"city":"uppal",
				"state":"Telangana"
			},
			"isFromState": function(state)
			{
				return this.address.state === 'TG';
			}
		};


******************************************   35.Exercise Solution    ********************************************************************************  

      console.log(person.isFromState("TS"));

******************************************   36.Default Function Arguments    ***********************************************************************

The arguments that are going to execute in the Function are that we pass in the Parenthesis of the Function.
Here we also get the implicit arguments to the Function by Default.
Consider the Case where the Function accepts two Arguments and we pass Multiple arguments.
In case of JavaScript all the arguments are captured and the reamining are ignored.

	function add (a,b)
	{
		console.log(arguments);
		return a+b;
	}

	console.log(add(30,10,4,5,6,7));
	
Here the arguments are captured by using index starting with 0.
arguments is the daefault that is available to every function in JavaScript.
If we want to sum all the arguments 

	function add (a,b)
	{
    var i,sum=0;
    for(i=0;i<arguments.length;i++)
    {
        sum+=arguments[i];
    }
		return sum;
	}
	
	console.log(add(30,10,4,5,6,7));
	
One thing to Note here that arguments is not an Array but it is an Object.

******************************************  37.Unit Summary    *********************************************************************************    

Function Can be written in literal Form.
Function is a Value that can be assigned to a Variable.
Function can be called by Passing an argument.
Functions are also Objects i.e  when we are assigning a Function to a Variable Actually creating an Object which happens to be a Function and assigned to a Variable.
Function can have Flexible argument Count.
Function overloading is not Possible in JavaScript.
Function can have default argument.
Function contains arguments argument.

we can define the Function in

Function Declaration
Function Expression
Anonymonous Function Expression
Function as Object Property
          

******************************************  38.Array Methods     *****************************************************************************************    

Some of the In Built Objects with JavaScript are Arrays.
Arrays comes with some built in Functions like

push():
push() can be used to add an element to the array in the Last.

pop():
pop() can be used to take the last element from the array.

unshift() and shift() can be used to add and remove the element from the front of the Array.


******************************************  39.Array For each Method    **********************************************************************************   




 
******************************************  40.Reading Assignment   **************************************************************************************        

Follow the Mozilla site for 

Math
Date

******************************************  41.Next Steps   **********************************************************************************************  

Scopes and Closures
Obects and Prototypes
Asynchronous JavaScript - Callbacks and Promises
Client Side Frameworks - Angular JS,JQuery,React,Backbone etc
Server Side Framework  - Node JS ,Express etc




***************************************************        END     **************************************************************************************
