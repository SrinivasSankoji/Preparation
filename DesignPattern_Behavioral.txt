1.Chain of Responsibility										(Skilled Coder Medium) 			  [14-OCT-2023]  (Done)
2.Command														(Medium)						  [25-JAN-2024]  (Done)
3.Iterator                                                      ()								  [14-OCT-2023]  ()
4.Memento                                                       ()								  [14-OCT-2023]  ()
5.Observer														()								  [14-OCT-2023]  ()
6.Strategy														(GeeksForGeeks)			          [25-AUG-2023]  (Done)
7.Template Method												()								  [14-OCT-2023]  ()
8.Visitor                                                       ()								  [14-OCT-2023]  ()
9.Mediator                                                      ()								  [14-OCT-2023]  ()
10.State                                                        ()								  [14-OCT-2023]  ()
6.Null Object Design Pattern              						(Concept&Coding)				  [09-JUL-2024]  ()


################################################### 1.Chain of Responsibility (Skilled Coder Medium) ###################################################

https://medium.com/javarevisited/importance-of-chain-of-responsibility-pattern-89bf4128bd67

Chain of Responsibility is a behavioral design pattern that allows an object to be passed as a request to the chain of handlers until the request is handled or chain is reached.
This pattern is significant as it promotes loose coupling between elements.

Scenario One :
--------------
Designing a System to process purchase orders of a Company.
The approval process varies based on the amount of the Order.

	Up to $1,000: Handled by Team Lead
	Up to $10,000: Handled by the Manager
	Up to $100,000: Handled by the Director
	Above $100,000: Handled by the CEO
	
	class ApprovalSystem {
    public void approve(int amount) {
        if (amount <= 1000) {
            System.out.println("Team Lead can approve the purchase of $" + amount);
        } else if (amount <= 10000) {
            System.out.println("Manager can approve the purchase of $" + amount);
        } else if (amount <= 100000) {
            System.out.println("Director can approve the purchase of $" + amount);
        } else {
            System.out.println("CEO can approve the purchase of $" + amount);
        }
		}
	}
	
	public class MainWithoutChain {
		public static void main(String[] args) {
			ApprovalSystem system = new ApprovalSystem();
			system.approve(56000);  // Expected output: Director can approve the purchase of $56000
		}
	}
	
Drawbacks :
-----------

	
Advantages :
------------
1.The one who raised the request does not aware who will handle the request.
This decoupling will be helpful if there are any changes in the hierarchy and it does not affect the request initiation process.
2.Consider the case where manager leaves the organization.
The chain can be dynamically restructured to bypass the Manager and pass the request directly to the Director.
3.This design mirrors real world hierarchies.
If any individual can't make the decission it is passed to the chain of Handlers.
4.Here each Handler is a Modular Entity and If there are any changes in the Handler we can modify or extend in the future.

Development with Chain of Responsibility Design Pattern :
---------------------------------------------------------

ApprovalRequest.java :
----------------------

	public class ApprovalRequest {
    public static void main(String[] args) {
        ApprovalProcess ceo = new CEO();
        ApprovalProcess director = new Director(ceo);
        ApprovalProcess manager = new Manager(director);
        ApprovalProcess teamLead = new TeamLead(manager);
        teamLead.approveRequest(500000);
		}
	}

ApprovalProcess.java :
----------------------

	public interface ApprovalProcess {
    void next(ApprovalProcess approvalProcess);
    void approveRequest(int amount);
	}

TeamLead.java :
---------------

	@AllArgsConstructor
	public class TeamLead implements ApprovalProcess {
    private ApprovalProcess approvalProcess;

    @Override
    public void next(ApprovalProcess approvalProcess) {
    }

    @Override
    public void approveRequest(int amount) {
        if (amount <= 1000) {
            System.out.println("Team Lead can approve the purchase of $" + amount);
        } else if (approvalProcess != null) {
            approvalProcess.approveRequest(amount);
			}
		}
	}
	
Manager.java :
--------------
	@AllArgsConstructor
	public class Manager implements ApprovalProcess{

		private ApprovalProcess approvalProcess;

		@Override
		public void next(ApprovalProcess handler) {
		}

		@Override
		public void approveRequest(int amount) {
			if (amount <= 2000) {
				System.out.println("Manager can approve the purchase of $" + amount);
			} else if (approvalProcess != null) {
				approvalProcess.approveRequest(amount);
			}
		}
	}
	
CEO.java :
----------
	
	@AllArgsConstructor
	public class CEO implements ApprovalProcess {

		@Override
		public void next(ApprovalProcess handler) {
		}

		@Override
		public void approveRequest(int amount) {
			System.out.println("CEO can approve the purchase of $" + amount);
		}
	}

################################################### 2.Command  ######################################################################################

Bhuvnesh Maheshwari : https://medium.com/swlh/command-pattern-what-it-is-and-how-to-use-it-7ccbc810266d
Larry | Peng Yang : https://medium.com/must-know-computer-science/mastering-design-patterns-with-examples-command-pattern-2dc68803f9ce   
Anmol Sehgal : https://anmolsehgal.medium.com/command-design-pattern-java-with-live-project-usage-example-5d6c721fbd3b

Command design pattern is a behavioral design pattern that allows us to encapsulate a request or action as an Command Object,
there by promoting loose coupling and greater control over the request's lifecycle.
Command design pattern is widely used in Software development to decouple the Object that initiates the request from the Object that actually performs the action.

Advantages :
------------
1.By using Command design pattern we are encapsulating a request or method call into concrete commands along with request data.
By doing this we are not only making the code more readable but also adding or removing the commands in much cleaner way.
Here we are not required to do the changes in existing classes or methods to add new behavior.
Design principle : System should be open for extension and closed for modification.

2.By using Command design pattern as an Object opens up whole new possibilities.
For instance we can store command Objects in a List,Stack,Set and Map and manipulate them however we want.
So that we can easily maintain the history of all the commands or we can see the frequently used commands.
We can also perform the "undo" of the given command if we are maintaing the order of execution.

3.By using Command design pattern we are decoupling the logic of the execution of the command from the command invoker.
Design principle : Seperating Layers of concern.

Command design pattern has 3 components i.e. Invoker,Reciever and Command.
Here invoker recieves the request,encapsulates the request into Command Object which then passes the request to the appropriate reciever.

Command.java :
--------------

	public interface Command {

		void execute();
		void rollback();
	}

	public class Cart implements Command{
    @Override
    public void execute() {
        System.out.println("Product added to cart");
    }

    @Override
    public void rollback() {
        System.out.println("Product removed from cart");
    }

Note : Similar are the classes for Payment,Order,Logistics,Dispatch.

Invoker.java :
--------------

	public class Invoker {
		private Command command;

		public Invoker(Command command) {
			this.command = command;
		}

		public void executeCommand() {
			this.command.execute();
		}

		public void rollbackCommand() {
			this.command.rollback();
		}
	}
	
CommandDemo.java :
------------------

	public class CommandDemo {
    public static void main(String[] args) {
        List<Command> commandHistory = new ArrayList<>();
        Command cart = new Cart();
        commandHistory.add(cart);
        Invoker invoker = new Invoker(cart);
        invoker.executeCommand();
		}
	}


################################################### 5.Observer ()  ##################################################################################






################################################### 6.Strategy Design Pattern (GeeksForGeeks) ########################################################

Strategy design pattern is a behavioral design pattern that allows the behavior of an Object to be selected at runtime.
It is one of the Gang of four design pattern which are widely used in programming language.
The strategy design pattern is based on the idea of encapsulating a family of algorithms/functionalities into seperate class that implements common interface.
The pattern consists of 3 main components

Context
Strategy
Concrete Strategy

Context is the class that contains the Object whose behavior needs to be changed dynamically.
Strategy is an Interface or Abstract class that defines the common methods for all the alogorithms that can be used by the Context.
Concrete Strategy is the class that implements the Strategy Interface and provides the actual implementation of the Algorthm.

Advantages :
------------
Flexiblity :
Strategy pattern allows the behavior of an Object to be changed dynamically at runtime by selecting different algorithms.
Modularity:
Strategy Pattern encapsulates the Algorithm into seperate classes,making it easy to add or remove algorithms without affecting other parts of the code.
Testability :
Strategy Pattern makes it easy to test the Alogorithm without affecting over all behavior of the code.
Open closed Principle :
Strategy Pattern follows the Open closed principle which states that open for extension and closed for modification.

Disadvantages :
---------------
Strategy pattern has some drawbacks which includes the increase of multiple classes.
Strategy Pattern has potential performance issues if the selection of algorithm is done frequently at runtime.

################################################### 6.Null Object Design Pattern (Concept&Coding) ###################################################

Null object design pattern is a behaviorial design pattern that uses polymorphism to provide a default object to stand in for a null reference.
This approach avoids null references by providing an object that does nothing.
