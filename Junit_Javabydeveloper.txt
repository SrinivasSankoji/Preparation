1.Junit5 with Maven											 [03-SEP-2022]  ()
3.Display Name for Tests                                     [10-SEP-2022]  (Done)
4.@Test Instance                                             [10-SEP-2022]  (Done)
5.Assumptions Class Example                                  [09-SEP-2022]  (Done)
6.@Disabled Example                                          [09-SEP-2022]  (Done)
7.Conditional Test                                           [09-SEP-2022]  (Done)
8.Repeated Test                                              [10-SEP-2022]  (Done)
9.Timeout                                                    [10-SEP-2022]  (Done)
10.Order of Test                                             [10-SEP-2022]  (Done)
11.Parameterized Test                                        [08-SEP-2022]  (Done)
12.Console Launcher                                          [18-SEP-2022]  ()
13.Allure Reports                                            [18-SEP-2022]  ()
14.Dynamic Tests                                             [03-SEP-2022]  (Done)
15.Nested Tests                                              [17-SEP-2022]  ()

16.Parameter Resolver and Dependency Injection               [11-SEP-2022]  ()
17.@Tag Annotation                                           [11-SEP-2022]  (Done)
18.Paralell Execution                                        [03-SEP-2022]  ()
19.SpringBoot Junit5                                         [03-SEP-2022]  ()
20.JunitPlatform Runner                                      [03-SEP-2022]  ()


********************************************************** 3.Display Name for Tests *****************************************************************

@DisplayName Annotation can be used to set the description for Test Classes and Test Methods.

	@Test
	@DisplayName("Test case for MUltiplication")
	void addTest() {
		assertEquals(20, MathUtil.multiple(4, 5));
	}
	
Junit supports custom display name generators for the Test cases and that can be done by using @DisplayNameGeneration that accepts DisplayNameGenerator.

	@DisplayNameGeneration(DisplayNameGenerator.Standard.class)
	public class DisplayNameTest {
	@Test
	void multiplyTest() {
		assertEquals(20, MathUtil.multiple(4, 5));
	}
	}
	
We can also create the custom display names using @DisplayNameGenerator.
We can also set the default Global Display Name generator for the Test Cases.
Here not required to write the @DisplayName Annotation for every Test cases.

********************************************************** 4.@Test Instance *************************************************************************

Junit creates a new instance of each Test class before executing each Test Method.
The default behavior of Junit is Life Cycle per Method.
This can be changed  by usig @TestInstance Annotation.
JUnit supports two LifeCycle Methods

Life cycle per method.
Life cycle per class.

Lifecycle per-method :
----------------------
This is the default behavior from Junit where a new Test Instance will be created for every Test Method.

	@TestInstance(Lifecycle.PER_CLASS)
	public class TestInstanceTest {

	private int result = 5;

	@Test
	void addTest() {
		result = MathUtil.add(result, 5);
		System.out.println("addTest(5,5) => " + result);
		assertEquals(10, result);
	}

	@Test
	void multiplyTest() {
		result = MathUtil.multiple(result, 5);
		System.out.println("multiplyTest(5,5) => " + result);
		assertEquals(25, result);
	}

	@Test
	void divideTest() {
		result = MathUtil.devide(result, 5);
		System.out.println("divideTest(5,5) => " + result);
		assertEquals(1, result);
	}
	}
	
Output :
--------
divideTest(5,5) => 1
addTest(5,5) => 6
multiplyTest(5,5) => 30

Note :
------
If the Lifecycle mode is Lifecycle.PER_METHOD then @BeforeAll and @AfterAll life cycle methods must be static otherwise it must be non static.

	@BeforeAll
	static void beforeAll() {
		System.out.println("--- Before starting tests --- ");
	}

We can also change the life cycle mode globally by mentioning it in the properties file.
By default @BeforeAll and @AfterAll lifecycle methods are not allowed in Netsted Classes.
If the Life cycle mode is LifeCycle.PER_CLASS for the Netsed class then we can write the life cycle methods in the Nested Class.

********************************************************** 5.Assumptions Class Example **************************************************************

Assumptions are collection of utility methods that supports conditional test execution based on Assumptions.
Failed Assumption does not result in the Test failure but results in a Test being aborted.
Assumptions basically means don't run this Test if the condition doesnt apply.
Assumptions class provides the overloaded methods.

Assumptions.assumeTrue() : If the condition is true then run the Test else abort the Test.
Assumptions.false() : If the Condition is false then run the Test else abort the Test.
Assumptions.assumingThat() : If the condition is true then run the Test else do not abort the Test and continue rest of the code in the Test.

	@Test
	void testOnlyForDevelopment() {
		assumeTrue("Development".equals("Production"),() -> "Aborting Test Since It is Not Development");
		User user = new User(1, "Peter", "peterm@email.com");
        UserService.saveOrUpdate(user);
        assertTrue(UserService.users.get(1l) == user);
	}
	
	@Test
	void testOnlyForDevelopment() {
		assumeFalse("Development".equals("Production"));
		User user = new User(1, "Peter", "peterm@email.com");
        UserService.saveOrUpdate(user);
        assertTrue(UserService.users.get(1l) == user);
	}
	
	@Test
	void testOnlyIfNotProduction() {
		assumingThat("Development".equals("Production"), () -> {
			UserService.saveOrUpdate(new User(1, "Peter", "peterm@email.com"));
		});
		User user = new User(2, "Srinivas", "Srinivas@email.com");
		UserService.saveOrUpdate(user);
		System.out.println(UserService.users.get(2l));
		assertTrue(UserService.users.get(2l) == user);
	}
	

********************************************************** 6.@Disabled Example  *********************************************************************

During the development we may want to disable or skip some Test case from execution because of the known issue in the functionality or Module.
To ignore a Test in Junit we use @Disbaled Annotation.
It is always good to include every Test case whether it is failed or skipped or passed.
We can disable the Test case at Class Level and at Method Level.
It is best parctice to provide the description for the @Disabled Annotation. 


********************************************************** 7.Conditional Test ***********************************************************************

Junit supports several Condition based Annotations that allows the Developers to enable or disable the Test Cases based on Condition.
These Test Cases are considered as Declarative Test Cases.
One such Condition is Disabled Condition which supports @Disabled Annotation.
The Conditional Annotations in Junit are

Operating System Conditions
Java Runtime Environment Conditions
System Property Conditions
Environment Variable Conditions
Custom Conditions

Operating System Conditions :
-----------------------------
To Enable or Disable the Test cases based on Operating System we use the Annotations @EnabledOnOS and @DisabledOnOs

	@Test
	@EnabledOnOs(OS.WINDOWS)
	void windowsOSTset() {
		assertTrue(System.getProperty("os.name").equalsIgnoreCase("Windows 10"));
	}
	
	@Test
	@DisabledOnOs(OS.WINDOWS)
	void linuxOSTset() {
		assertTrue(System.getProperty("os.name").equalsIgnoreCase("Linux"));
	}
	
Java Runtime Environment Conditions :
-------------------------------------
To enable or disable Test cases based on Java Runtime Environment we use the Annotations @EnabledOnJre or @DisabledOnJre.

	@Test
	@EnabledOnJre(JRE.JAVA_11)
	void java11Test() {
		System.out.println(System.getProperty("java.version"));
		System.out.println(System.getProperty("java.runtime.version"));
		assertTrue(System.getProperty("java.runtime.version").contains("11.0.4"));
	}

System Property Conditions :
----------------------------
To enable or disable the Test cases based on the named value from the System Property.
We use the Annotations @EnabledIfSystemProperty and @DisabledIfSystemProperty.

	@Test
	@EnabledIfSystemProperty(named = "os.name", matches = "Windows 10")
	void runOnWindowsOS() {
		assertTrue(System.getProperty("os.name").equalsIgnoreCase("Windows 10"));
	}

Environment Variable Conditions :
---------------------------------
To enable or disable the Test cases based on the named value from the System Environment Variable.
We use the Annotations @EnabledIfEnvironmentVariable  and @DisabledIfEnvironmentVariable .

	@Test
	@EnabledIfEnvironmentVariable(named = "USERNAME", matches = "DELL")
	void runIfUserIsDell() {
		assertTrue(System.getenv("USERNAME").equalsIgnoreCase("DELL"));
	}

Custom Conditions :
-------------------
We can create Custom Annotations in Junit5 in two ways.
1.Combination of two built in Conditional Annotations.
2.Create our own custom Condition Annotation by implementing ExecutionCondition.

	@Test
	@RunOnlyOnWindows10
	void runOnWindows10() {
		assertTrue(System.getProperty("os.name").equalsIgnoreCase("Windows 10"));
	}


********************************************************** 8.Repeated Test **************************************************************************

RepeatedTest can be used to execute the Test case for repeated no of times.

	@RepeatedTest(value = 3, name = "{displayName} - {currentRepetition}/{totalRepetitions}")
	@DisplayName("Test case for Division")
	void divideTest() {
		System.out.println("divideTest()");
		assertEquals(5, MathUtil.devide(25, 5));
	}

Note :
------
We can also create the custom RepeatedTest Annotation.

********************************************************** 9.Timeout ********************************************************************************

Junit5 Timeout allows us to declare the Test cases should fail if its execution time exceeds the given duration and will get
java.util.concurrent.TimeoutException as a result.
Timeunit for the duration defaults to Seconds but its configurable.

Junit supports several ways for Timeouts 
1.@Timeout Annotation
2.assertTimeout() or assertTimeoutPreemptively()
3.Configuration Parameters

1.@Timeout Annotation :
-----------------------
If the @Timeout is applicable at class level,then it is applicable to all the Test methods.
But it is not applicable to lifecycle callback methods.
If @Timeout is applied to lifecycle call back methods and if the timeout fails then all the Test cases will be aborted.

	@Test
	void addTimeout() {
		assertTimeout(Duration.ofSeconds(5), () -> {
			TimeUnit.SECONDS.sleep(4);
			assertEquals(5, MathUtil.add(3, 2));
			System.out.println("addTimeout");
		});
	}

2.assertTimeout() or assertTimeoutPreemptively() :
--------------------------------------------------
assertTimeout() will fail the Test case if the Test case is not executed within the Timeout duration but it completes the execution process.
The below Test case fails but it completes the process and executes the remaining statements of the Test case.

	@Test
	void multiplyTimeout() {
		assertTimeout(Duration.ofSeconds(5), () -> {
			TimeUnit.SECONDS.sleep(6);
			assertEquals(6, MathUtil.multiple(3, 2));
			System.out.println("multiplyTimeout");
		});
	}
	
assertTimeoutPreemptively() will fail the Test case if it is not executed within the Time duration but it will not execute the remaining Test cases.
This is useful in Transaction Management tests to ensure that abort the Transaction operation if it exceeds the time.

Note :
------
Declaring @Timeout on a @TestFactory method checks that factory method returns within the specified amount of time or not but it will not check for the 
execution of each individual Dynamic Test generated by the factory.

********************************************************** 10.Order of Test *************************************************************************

Although it is trye that Junit Tests should not rely on the Order in which they are executed.
But there are some cases where it is necessary to enforce the order and the output of one Test case is an input to another Test case.
In Junit 5,by default Test method execution order is not defined.
To control the order of the execution of the Test methods we use @TestMethOrder Annotation.

@TestMethOrder Annotation supports 3 values
AlphaNumeric
OrderAnnotation
Random

Note :
------
We can also define our own custom method order to execute the Test cases.

********************************************************** 11.Parameterized Test ********************************************************************

Sometimes we may need to run the same test with different parameters or different values.
Parameterized Test makes it posssible to run the test multiple times with different arguments.
Parameterized Test can be declared by using the Annotation @ParameterizedTest instead of @Test Annotation.

	@ParameterizedTest
	@ValueSource(ints = { 2, 4, 6, 8, 10 })
	void testArrayWithParameters(int arguments) {
		System.out.println("Parameterized Test with Integer Array " + arguments);
	}
	
We can also customize the display name of the Parameterized Test.
By default display name of the Parameterized Test invocation contains the invocation index and the String representation of all the arguments for the specific invocation.
	
	@ParameterizedTest(name = "{index}.testArrayWithParameters with value - {arguments} ")
	@ValueSource(ints = { 2, 4, 6, 8, 10 })
	void testArrayWithParameters(int arguments) {
		System.out.println("Parameterized Test with Integer Array " + arguments);
	}
	
Here index starts with 1.
	
@valueSource Arguments :
------------------------
@valueSource allows us to specify the Single Array of literal values and can be used only for providing for single argument for ParameterizedTest invocation.
We can also pass Empty and Null Parameters using @EmptySource and @NullSource Annotations.

	@ParameterizedTest(name = "{index} With String argument {0}")
	@ValueSource(strings = { "Peter King", "Arthur King", "Martin King" })
	void testWithStringParameters(String input) {
		String searchKey = "King";
		System.out.println("String Arguments :" + input);
		assertTrue(input.contains(searchKey));
	}
	
@EnumSource Arguments :
-----------------------
@EnumSource provides a convinient way to use Enum Constants.
@EnumSource provides an optional names attribute that allows us to specify which constants it should consider.
By default names attribute will keep only the matched Enum Constants.
We can use the mode attribute which supports EXCLUDE,INCLUDE,MATCH_ALL,MATCH_ANY.

	@ParameterizedTest(name = "{index} Enum values are : {arguments}")
	@EnumSource(value = Role.class, names = { "ADMIN", "SUBSCRIBER" })
	void testWithEnumParameters(Role role) {
		assertNotNull(role);
	}

@MethodSource Arguments :
-------------------------
By using @ValueSource or @EnumSource it is not possible to pass complex type as an argument.
@MethodSource allows us to pass the Factory Methods of the Test class as an argument. 
Here Factory Method should be static and it does not accept any argument.
Every Factory Method should generate stream of arguments and each set of values will be provided to the Test Method.
If we do not provide the Factory Method to the @MethodSource,It will search for the Factory Method with the same name as ParameterizedTest.

	@ParameterizedTest(name = "{index} Method Source with parameters {arguments}")
	@MethodSource("getNames")
	void testWithMethodSource(String arguments) {
		assertNotNull(arguments);
	}

	static Stream<String> getNames() {
		return Stream.of("ADMIN", "SUBSCRIBER", "OBSERVER", "AUTHOR", "PUBLISHER", "ANONYMOUS");
	}
	
	@ParameterizedTest(name = "{index} Method with Multiple Paraeters {arguments}")
	@MethodSource
	void stringIntAndListProvider(String str, int num, List<String> list) {
		System.out.println("str => " + str + "; num =>" + num + "; list => " + list);
		assertTrue(str.length() > 0);
		assertTrue(num >= 1 && num <= 3);
		assertTrue(!list.isEmpty());
	}
	
	static Stream<Arguments> stringIntAndListProvider() {
		return Stream.of(Arguments.arguments("Peter", 1, Arrays.asList("admin", "author")));
	}

@CSVSource Arguments :
----------------------
@ValueSource and @EnumSource does not allow us to provide Multiple Parameters for Parameterized Test.
@CSVSource allow us to provide argument list as comma seperated values.
@CSVSource accepts an Array of comma seperated values and each entry corresponds to a line in a CSV File.

	@ParameterizedTest
	@CsvSource({"Bhaumik,Chary,23", "Aadvik,Chary,15"})
	void testWithCSVSource(String firstName, String lastName, Integer dateOfBirth) {
		assertTrue(firstName != null);
		assertTrue(lastName != null);
		assertTrue(dateOfBirth > 0);
	}

@CSVFileSource Arguments :
--------------------------

@ArgumentSource :
-----------------
To support advanced approach,Junit5 supports custome reusable ArgumentProvider to provide Test arguments.

	@ParameterizedTest(name = "{index}. Custom Argument Provider values {arguments}")
	@ArgumentsSource(CustomArgumentProvider.class)
	void testWithArgumentSource(String name, Integer date, List<?> details) {
		assertTrue(name != null);
		assertTrue(date > 0);
		assertTrue(!details.isEmpty());
	}
	
	public class CustomArgumentProvider implements ArgumentsProvider {

	@Override
	public Stream<? extends Arguments> provideArguments(ExtensionContext extensionContext) throws Exception {
		return Stream.of(Arguments.arguments("Bhaumik", 23, Arrays.asList("Aadvik", 15)));
	}
	}

@Argument Conversion :
----------------------
Impicit Conversion :
--------------------
Junit5 supports built-in implicit type conversion.
The conversion process depends on the declared type of each method parameter.
For example If we are provide Parameterized Test annotated with @ValueSource(ints={2,4,5}),then method argument can be int,long,float,double.
This is called implicit conversion.

	@ParameterizedTest(name = "{index}. Implicit Conversion for Parameter {arguments}")
	@ValueSource(strings = { "2017-11-23", "2022-04-15" })
	void testWithImplicitConversion(LocalDate localDate) {
		System.out.println("Local Date " + localDate.toString());
		assertTrue(localDate != null);
	}


Explicit Conversion :
---------------------
Instead of relying on implicit conversion,we can create explicit conversion by using ArgumentConverter and @ConvertWith Annotations.

	@ParameterizedTest(name = "{index}.Explicit Conversion for parameters {arguments}")
	@ValueSource(strings = {"23-11-2107","15-04-2021"})
	void testWithExplicitConversion(@ConvertWith(DateConverter.class) LocalDate localDate) {
		System.out.println("Local Date " + localDate.toString());
		assertTrue(localDate != null);
	}
	
	public class DateConverter implements ArgumentConverter {

	@Override
	public Object convert(Object source, ParameterContext context) throws ArgumentConversionException {
		DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy");
		return LocalDate.parse(source.toString(), format);
	}
	}

@Argument Accessor :
--------------------

Custom Argument Aggregators :
-----------------------------




	






********************************************************** 14.Dynamic Tests **************************************************************************

All the Tests that are annotated with @Test are static Test cases.
A Dynamic Test is a Test that is generated at runtime by factory method using @TestFactory Annotation.
The method marked with @TestFactory is not a Test case,rather it is a factory of Test Cases.

Rules to create Dynamic Tests :
-------------------------------
@TestFactory method must not be private and static.
@TestFactory method must return Stream,Collection,Iterable,Iterator or Array of Dynamic Node instances.
@TestFactory method can also return sub class of Dynamic Node i.e. they are DynamicContainer and DynamicTest.

	@TestFactory
	DynamicTest dynamicTest() {
		return DynamicTest.dynamicTest("Single Dynamic Test",
				() -> Assertions.assertEquals(25, MathUtils.addAndCheck(5, 20)));

	}
	
	@TestFactory
	List<DynamicTest> dynamicTestFromCollection() {
		List<DynamicTest> list = new ArrayList<>();
		list.add(dynamicTest("1st List<DynamicTest>", () -> Assertions.assertEquals(25, 23)));
		list.add(dynamicTest("2nd List<DynamicTest>", () -> Assertions.assertEquals(5, 5)));
		return list;
	}

	@TestFactory method must return Subclass of Dynamic Node i.e.they are DynamicContainer and DynamicTest.

	@TestFactory
	DynamicContainer dynamicTestFromContainer() {
		return DynamicContainer.dynamicContainer("Dynamic Container",
				Stream.of(DynamicTest.dynamicTest("1st Dynamic Container", () -> Assertions.assertEquals(25, 25))));
	}
	
Lifecycle methods for Dynamic tests :
-------------------------------------
In the Dynamic Test @BeforeEach and @AfterEach lifecycle methods are executed for each @TestFactory method but not for each Dynamic Tests.

	public class DynamicTestLifecycleTest {

	@BeforeEach
	public void setUp() {
		System.out.println("Before Class Execution");
	}

	@TestFactory
	List<DynamicTest> dynamicTestFromList() {
		return Arrays.asList(DynamicTest.dynamicTest("First Dynamic Test", () -> assertTrue(true)),
				DynamicTest.dynamicTest("Second Dynamic Test", () -> assertTrue(true)));
	}

	@AfterEach
	public void tearDown() {
		System.out.println("After Class Execution");
	}
	}
	
Hierarchy or nesting dynamic tests  :
-------------------------------------


Timeout in Dynamic tests :
--------------------------
Declaring @TimeOut on a @TestFactory method checks that the factory method returns within the specified duration or not 
but it does not verify the execution time of each individual DynamicTest generated by the factory.
For that purpose we use assertTimeout() or assertTimeoutPrremptively().

	@TestFactory
	Collection<DynamicTest> timeoutInDynamicTest() {
		return Arrays.asList(DynamicTest.dynamicTest("First Timeout", () -> {
			assertTimeout(Duration.ofSeconds(5), () -> TimeUnit.SECONDS.sleep(5));
		}));
	}

Execution order in dynamic tests :
----------------------------------
The execution order for the Dynamic Test does not depends on @TestMethodOrder declared on Top level Test Class.
To control the Order of Dynamic Tests we have to implement Custom Sort.

	@TestFactory
	Collection<DynamicTest> executionOrderInDynamicTest() {
		List<DynamicTest> dynamicTests = Arrays.asList(
				DynamicTest.dynamicTest("First Dynamic Test", () -> assertEquals(6, MathUtils.addAndCheck(2, 4))),
				DynamicTest.dynamicTest("Second Dynamic Test", () -> assertEquals(6, MathUtils.addAndCheck(2, 4))),
				DynamicTest.dynamicTest("Third Dynamic Test", () -> assertEquals(6, MathUtils.addAndCheck(2, 4))));
		sortDynamicTests(dynamicTests);
		return dynamicTests;
	}

	static void sortDynamicTests(List<DynamicTest> dynamicTests) {
		dynamicTests.sort((DynamicTest d1, DynamicTest d2) -> d2.getDisplayName().compareTo(d1.getDisplayName()));
	}

Parallel Test execution in Dynamic tests :
------------------------------------------


Parameterized dynamic tests :
-----------------------------
To create a Parameterized Dynamic Tests,we simply loop over the data and calls the Test Method with It.


********************************************************** 15.Nested Tests **********************************************************



********************************************************** 16.Parameter Resolver and Dependency Injection ***************************





	
	

	
	
	
	


 

