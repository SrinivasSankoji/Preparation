1.Design Pattern Introduction							()								[20-JAN-2021]  (Done)						
2.Composite Design Pattern                              ()      						[02-JAN-2021]  ()
3.Startegy Design Pattern                               ()      						[02-JAN-2021]  ()
4.Command Pattern                                       ()      						[02-JAN-2021]  ()
5.MultpPlatform                                         ()      						[02-JAN-2021]  ()

6.Creation Design Pattern                               ()     							[02-JAN-2021]  ()
7.Singleton Design Pattern                              ()     							[02-JAN-2021]  ()
8.Builder Pattern                                       ()     							[02-JAN-2021]  ()
9.Factory Method Pattern								(geeksforgeeks)                 [10-DEC-2021]  (Done)
10.Abstract Factory Pattern                             ()      						[02-JAN-2021]  ()
11.Prototype Pattern                                            						[02-JAN-2021]  ()

12.Structural Design Pattern                            ()       						[02-JAN-2021]  ()
13.Facade Design Pattern                                ()     							[02-JAN-2021]  ()
14.Adapter Pattern                                      ()     							[02-JAN-2021]  ()
15.Decorator Pattern                                    ()     							[02-JAN-2021]  ()
16.Bridge Pattern                                       ()    							[02-JAN-2021]  ()
17.Composite Pattern                                    ()     							[02-JAN-2021]  ()
18.Proxy pattern                                        ()     							[02-JAN-2021]  ()
19.Flyweight Pattern                                    ()     							[02-JAN-2021]  ()

20.Behavioral Design Pattern                            ()      						[02-JAN-2021]  ()
21.command Pattern                                      ()     							[02-JAN-2021]  ()
22.Strategy Pattern                                     ()     							[02-JAN-2021]  ()
23.Visitor Pattern                                      ()     							[02-JAN-2021]  ()
24.Observer Pattern                                     ()     							[02-JAN-2021]  ()
25.Memento Pattern                                      ()     							[02-JAN-2021]  ()
26.Mediator Pattern                                     ()     							[02-JAN-2021]  ()
27.Chain of responsibility Pattern                      ()     							[02-JAN-2021]  ()
28.State Pattern                                        ()     							[02-JAN-2021]  ()
29.Templatte Method Pattern                             ()     							[02-JAN-2021]  ()
30.Inversion Of Control Pattern   						(geeksforgeeks)                 [10-DEC-2021]  (Done)
31.Data Transfer Object Pattern                         ()       						[02-JAN-2021]  ()
32.Delegation Design Pattern							()								[02-JAN-2021]  ()

******************************************************** 1.Introduction ************************************************************************************

Business Analyst will create the System Design.
Before creating the System Design he will review the requirement,identify the problems in each of the requirement and for each problem he will design the solution.
Here for every requirement the common thing is to identify the problem and design the solution.
Each Pattern describes a problem which occurs over and over again and then describes the core solution to that problem.

Main 4 elements of a Design Pattern are :
1.Name
2.Problem
3.Solution
4.Consequences

Design Pattern Name  :
----------------------
1.Improved Design
2.Team Communication because every one talks about the same concepts
3.Name to describe the design problem
4.Increase Abstraction in Design

Design Pattern Problem :
------------------------
When the Pattern can be Applied
What is the Context i.e Problem with Current Design


Design Pattern Solution :
-------------------------
Define Elements that Compose the Design.
How Elements are Related to Each Other
Element Responsibility
Element Functionality
Element Collaboration
Here template will be Fully Reusable and Language Agnostic.

Design Pattern Consequences :
-----------------------------
Is the Pattern Right Choice
Can Include Language and Implementation Issues.
Choose the Correct Pattern by Understanding the Consequences.

By using Design Pattern certain level of Abstraction is required and its not about HashMap,List and Arrays.
Design Pattern is not for Entire Application and it is for specific problem.
Patterns are not Primitive Building Blocks.Don't fit every thing in one Pattern.

Design Patterns are Categorized into 3 Parts :
1.Creation Design Pattern
2.Structural Design Pattern 
3.Behavioral Design Pattern

Design Patterns can be created by using either Class definition or Object creation.

1.Creation  Pattern :
Factory Method					(Class)
Abstract Factory Method			(Object)
Builder							(Object)
Prototype						(Object)
Singleton						(Object)

2.Behavioral Pattern
Interpreter 					(Class)
Template						(Class)
Chain of Responsibility			(Object)
Command							(Object)
Iterator						(Object)
Mediator						(Object)
Memento							(Object)
Observer						(Object)
State							(Object)
Strategy						(Object)
Visitor							(Object)

Structural :
Adapter							(Class)
Adapter							(Object)
Bridge							(Object)
Composite						(Object)
Decorator						(Object)
Facade							(Object)
FlyWeight						(Object)
Proxy							(Object)


******************************************************** 9.Factory Method Pattern (geeksforgeeks)  ********************************************************************

It is a Creational Design Pattern which talks about the creation of an Object.
Factory design pattern says that define an Interface or Abstract Class and let the subclasss decide which Object it has to instantiate.
It is one of the best way to create an Object where the Object creation logic is hidden to the Client.

Implementation :
----------------
Define a Factory method inside an interface.
Let the Subclass implements the abstract factory method and decide which object it has to create.
In java Constructor's are not polymorphic.But by allowing subclass to create an Object we are adding polymorphic behavior to the Instantiation.

		public interface Notification {
			void notifyUser();
		}

		public class SMSNotification implements Notification {
			@Override
			public void notifyUser() {
			System.out.println("Sending an SMS notification");
		}
		}

		public class SMSNotification implements Notification {
			@Override
			public void notifyUser() {
				System.out.println("Sending an SMS notification");
			}
		}

		public class SMSNotification implements Notification {
			@Override
			public void notifyUser() {
				System.out.println("Sending an SMS notification");
			}
		}

		public class NotificationFactory {
			public Notification createNotification(String channel) {
				if (channel == null || channel == "")
					return null;
				if (channel == "SMS")
					return new SMSNotification();
				if (channel == "Email")
					return new EmailNotification();
				if (channel == "Push")
					return new PushNotification();
				return null;
			}
		}

		public class FactoryDemo {
			public static void main(String[] args) {
				NotificationFactory factory=new NotificationFactory();
				Notification notification=factory.createNotification("SMS");
				notification.notifyUser();
			}
		}
                               
******************************************************** 18.Facade Pattern  ***************************************************************************

It can be used as an Interface for Complex Sub Systems.
Facade Provides a Unified interface to a Set of Interfaces in a Sub System.
Facade Defines a High Level Interface that makes the Subsystem Easier to Use.
Whenever we want to Decouple Client from Other Sub Systems.
Provide Simple Interface to Client.
Sub System Layering
Facade Acts as Access Point to the System and it knows the Entire Sub System and Delegates to Sub System.
Here the Functionality is Implemented Only in Sub System.
Client Calls the Facade and Facade Delegates to the Sub System.
Facade Needs to Translate the Request into Sub System Specific Objects.
Client don't have to access the Sub System there by Providing Loose Coupling.

Advantages :
Sub System is easier to use.
Client does not require specific knowledge.
Loose Coupling.
Sub System can also be used directly.
Abstract complex System from Client.

Drawback :
An Extra Programming Layer.

******************************************************** 32.Delegation Design Pattern   ******************************************************************************

Here One Object delegates the functionality to another Element.
Here the benefit is it promotes reusability.

Delegator -----------------  Delegate

Delegate Object can be reused later.
We can also limit the Number of Class definitions by bundle all the delegates in One Class.
We can also reduce Inheritance.

******************************************************** 51.Inversion of Control(geeksforgeeks) **********************************************************************

Dependecny Injection is a design pattern using which we remove the hard coded dependencies and make our Application loosely coupled,extendable and maintainable.
Dependency Injection can be implemented by using
1.Runtime Polymorphism
2.Has a Relationship

In Spring Dependency Injection can be done in two ways
Setter Injection
Constructor Injection

Inversion of Control is a general concept stating that we don't create Objects manually but instead we describe that how they should be created.
IOC Container will instantiate the required classes.

******************************************************** 54.Data Transfer Object **********************************************************************

DTO Design pattern can be used to Transfer the Object Across the Network.
Domain Objects are Tightly Coupled with Database and it May contain Sensitive Information.
We can also avoid sensitive Data or can Create new Property based on the Existing Columns.


