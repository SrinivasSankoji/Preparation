Modifying Variable Inside Lambda :
----------------------------------
When we try to modify the variable inside lambda expression we get Compile time error saying a variable inside Lambda must be final or effective Final.
A final keyword before a variable makes it final and No final keyword before a variable makes it effectively final provided we never change the value.

1.Introduction 													[27-FEB-2019]  (Done)
2.Why Lambdas													[27-FEB-2019]  (Done)
3.Functional vs Object Oriented Programming						[27-FEB-2019]  (Done)
4.Passing Behavior in OOP										[27-FEB-2019]  (Done)
5.Introducing Lambda Expressions								[27-FEB-2019]  (Done)
6.Lambda Expressions Examples									[27-FEB-2019]  (Done)
7.Interface Type												[27-FEB-2019]  (Done)
8.Interface Implementation										[27-FEB-2019]  (Done)
9.Type Inference												[27-FEB-2019]  (Done)
10.Runnable using Lambdas										[27-FEB-2019]  (Done)
11.Functional Interface											[08-MAR-2019]  (Done)
12.Lambda Exercise												[08-MAR-2019]  (Done)
13.Lambda Solution												[08-MAR-2019]  (Done)
14.Using Function Interfaces									[09-MAR-2019]  (Done)
15.More Function Interfaces										[09-MAR-2019]  (Done)
16.Exception Handling in Lambda									[27-FEB-2019]  ()
17.Exception Handling Approach									[27-FEB-2019]  ()
18.Closures														[09-FEB-2019]  (Done)
19.this															[09-FEB-2019]  ()

20.Method References											[11-FEB-2019]  (Done)
21.For Each Iteration											[11-FEB-2019]  (Done)
22.Introduction to Streams 										[11-FEB-2019]  (Done)
23.More About Streams											[09-FEB-2019]  ()
24.Lambda Basics												[09-FEB-2019]  ()


*************************************************    1.Introduction ******************************************************************

Understanding Lambdas
Using Lambdas
Functional Interfaces
Method References
Collections Improvement

************************************************* 2.Why Lambdas  *********************************************************************

Lambdas enables us to write Functional Programming.
We get Readable and Coincise Code.
Easier to use API's and Libraries.
Enables support for parallel processing.

************************************************* 3.Functional vs Object Oriented Programming *****************************************

Functional Programming enables us to write the Same Code as we do in Object Oriented Programming.
Functional Programming makes the Code more Readable and Maintainable.
Functional Programming can be used in certain Scenarios where we make the code more Readable.


************************************************* 4.Passing Behavior in OOP	 **********************************************************

Some of the Problems in Object Oriented Programming are 

Everything in Java is an Object and we cannot have piece of code or logic that exists in isolation.
It has to be a part of object associated with it.
While developing the code we need to think about problems and each problem is associated with an Object.
Consider the Scenario where we need a function that returns a user name.
To achieve this we need a Class and Create an Object of that Class and then add the function to it.

Before Java 8 :
	
	@override
	public void greet()
	{
		System.out.println("Welcome Lambda");
	}
	
To be More Generic Create an Interface 
	
	public interface Greeting 
	{
		public void perform();
	}
	
	@Override
	public void perform() 
	{
		System.out.println("From Greeting Implementation");
	}

Now to call the greet() we are passing the behavior to the greet().
Here we can also call the greet() by creating an Object GreetingImpl.
If we do the same every time it calls the Same GreetingImpl Implementation.
	
	public static void main(String[] args) 
	{
		GreetingDemo greetingDemo=new GreetingDemo();
		GreetingImpl greetingImpl=new GreetingImpl();
		greetingDemo.greet(greetingImpl);
	}

************************************************* 5.Introducing Lambda Expressions *************************************************

From the above Scenario we are passing the behavior to call the Method.
Here we are doing the extra work i.e we are passing the thing that has as a behavior.
Possible solution is we can directly pass an action rather than Class that implements an Action.

	public void greet(action)
	{
		action();
	}
	
Lambdas allows us to create Functions which does not belong to any Class.
Functions exists in isolation and these functions can be treated as values i.e
Using Lambda we can pass function as a value to a variable and use that variable wherever it is required.

Functions as Values :
---------------------

We can define a String in line i.e 

	String name ="Srinivas";
	
when the above line got executed name variable contains the value "Srinivas".
Question is can we assign a block of code to a variable and the value is block of code and not the actual Value.
Wherever the variable has to be executed the piece of code has to be executed.
We write the block of code in java using methods usually.
Using Lambda we can pass function as a value to a variable and use that variable wherever it is required.

	String name = public void perform() 
				  { 
					System.out.println("From Greeting Implementation");
				  }

Here the above code does some extra things when a function is a part of class.
whether the function is globally accessible or not.
But If the function exists in isolation it does not make sense to declare it as public.
public is not required because the function is accessible whoever has the variable.


	String name = void perform() 
				  { 
					System.out.println("From Greeting Implementation");
				  }

when we assign a function to a variable we can access that function using name of that variable.
Method name is not required.

	String name = void() 
				  { 
					System.out.println("From Greeting Implementation");
				  }
				  
Java Compiler is smart enough that it identifies the return type by looking into the code.
Here Return Type is Not Required.
 
	String name = () -> 
					  { 
						System.out.println("From Greeting Implementation");
					  }

The above code is required in order to define the Lambda Expression but with an extra symbol.
Now the Lambda Expression can be assigned to a Variable.
If the Body of the Expression is just one line we can remove the curly braces.

	String name = () -> System.out.println("From Greeting Implementation");
					  
	
*************************************************  6.Lambda Expressions Examples	************************************************* 

	name = () -> System.out.println("Welcome Lambda Expression");

Above Lambda Expression can be passed to a Method i.e 

	greeting(name); 

Here Lambda Expression can also be in line i.e 

	greeting(() -> System.out.println("Welcome Lambda Expression"));
	
Functions are always not an Empty Parameters and it might contain Parameters.
Consider the Example 

	multipleby2 = public int multipleFunction(int a)
				  {
					return a*a;
				  }
	
	//Remove Access Modifier
	multipleby2 = int multipleFunction(int a)
				  {
					return a*a;
				  }
	//Remove Method Name			  
	multipleby2 = int (int a)
				  {
					return a*a;
				  }
	//Remove Return Type			  
	multipleby2 = (int a)
				  {
					return a*a;
				  }
	//Place the arrow Symbol
	multipleby2 = (int a) -> return a*a;
	
If the body of the expression is just one line it removes the return statement.
	
	multipleby2 = (int a) -> a*a;
	
Lambda Expression to add two Numbers is  :
	
	addFunction =(int a,int b) -> (a+b);
	
Lambda Expression for divide Numbers is  :

	safeDivideFunction=(int a,int b) -> a /b;
	
Here if the number is divided by zero then return zero.
For this we need to add an if block and functions grown to more than one line.
we can add curly braces.
	
	safeDivideFunction=(int a,int b) -> {
	if(b==0) return 0;
	a /b;
	}
	
Lambda Expression for String length count is :

	stringCountFunction = (String name) -> name.length();
	
Befor converting into Lambda Function would be

	public int count(String name)
	{
		return name.lenghth();
	}
	
//After Remove the Access Modifier

	int count(String name)
	{
		return name.lenghth();
	}
	
// After removing the Method Name

	int  (String name)
	{
		return name.lenghth();
	}
	
// After removing the return Type
	
	(String name)
	{
		return name.lenghth();
	}
	
Finally add the Lambda 

	stringCountFunction=(String name) -> return name.lenghth();
	
//If the body of the expression is one line then return statement is not required

	stringCountFunction=(String name) -> name.lenghth();
	
*************************************************  7.Interface Type	  *************************************************************** 

public static void main(String[] args) 
	{
		GreetingDemo greetingDemo=new GreetingDemo();
		GreetingImpl greetingImpl=new GreetingImpl();
		greetingDemo.greet(greetingImpl);
	}

	greetingDemo.greet(greetingImpl); 
	
Change the above call to Functional Interface i.e 

	myLambda = () -> System.out.println("From Greeting Implementation");
	
myLambda is a Variable that contains Lambda Expression and what is the return type of that.
If the Function Type is executed then we need to provide the input type and return type for that function type.
Here the solution is to create an interface for the Lambda Expression and create the same signature that the Lambda Expression Has.
Lambda that accepts no argument and return type is void and we can give any name to the function.

	interface MyLambda
	{
		public void test();
	}
	
	MyLambda myLambdaFunction = () -> System.out.println("From Greeting Implementation");
	
Here the Above Code Works and we wont get any compile time error.
If we pass any parameter to the Lambda Expression or an Interface has Changed then it will give Compile Time Error.
Here Name of the Interface and Method Name of the Interface does not Matter.
What Matters here is If we define the Interface with some Name then we have to use that Name for the Variable Type for Lambda Expression.
Method Signature of an Interface Method Should Match with Lambda Expression.
We have Seen that an Interface that contains only One Method with No Parameters and return type is void.
If we add one more method then Compiler gives an Error.
Here Interface should contain only Method.

											
*************************************************  8.Lambdas vs Interface Implementation	***************************************************** 

	Greeting greetingImpl=new GreetingImpl();  -> 1
	
	Greeting myLambdaFunction = () -> System.out.println("From Greeting Implementation");  --> 2
	
What is the difference between the above two Implementation.

Step 1 Creates an Implementation of Greeting Interface and calls the Method.
In Step 2 Lambda Expression behaves like an implementation of Interface but actually we are having Function in line and not required 
to have an Implementation Class to define the Function.

In Step 1 it is not required to Create an Implementation Class for the Greeting and we can create an Anonymous Inner Class.

	Greeting anonymousGreeting=new Greeting()
									{
										@Override
										public void perform() {
										System.out.println("From Greeting Implementation");
										}
									};
	anonymousGreeting.perform();
	
Now Lambda Expression is Most of Like Creating Anonymous Inner Class in a Short cut way.
But there are things which Inner class does which is different from Lambda Expressions.

									
*************************************************   9.Type Inference	************************************************************* 

With Lambdas Java Compiler is doing some Type Inference which is very important in order to figure out what kind of data that Lambda deals with.

	StringLengthLambda stringLengthLambda = (String parameter) -> parameter.length(); 
	System.out.println(stringLengthLambda.getLength("Bhaumik Sankoji"));
	
	interface StringLengthLambda
	{
		int getLength(String parameter);
	}

Here in the above case Compiler Matches the Lambda Expression with the Method parameter of the Interface.
This Scenario is called Type Inference.

Here Compiler also has more Information of the Interface.
If we are Using Interface as the return type for the Lambda Expression then it is not required to pass the Type in the Lambda Expression.

	StringLengthLambda stringLengthLambda = (parameter) -> parameter.length(); 

If we have only one parameter and using interface as return type then it is not required to use Parenthesis.

	StringLengthLambda stringLengthLambda = parameter -> parameter.length(); 

											
*************************************************  10.Runnable using Lambdas   ************************************************* ****

There are no New Function Type for the Lambda Expression to refer and we use the Interface as the return type for the Lambda.
If there is a new Function Type then we have to rewrite all the Places wherever the Inner Class is used.
We can replace Anonymous Inner Class with Lambda Expression.
In order to create a New Thread we have to create a new instance of Runnable and override the run().

	Runnable runnable =() ->System.out.println("Anonymous Runnable");
	runnable.run();
	
*************************************************  11.Functional Interface	*********************************************************

An Interface has to be declared as a Type for Lambda Expression and it should have one Abstract Method.
But in Java 8 we can have Method Implementation in the Interface Itself.
An Interface that has only one abstract Method is called Functional Interface.
If some one adds an Abstract Method in an Interface then it will be No Longer a Functional Interface.
To avoid this we can mark the interface as Functional Interface by using @FunctionalInterface


************************************************* 12.Lambda Exercise	************************************************************
Create a Person Model
Create List of Person

Now the Requirement is to 

1.Sort the List by Last Name
2.Print all the Elements of the List
3.Display People Name that begins with C

Here the Methods have to accept the behavior instead of hard coding them.
Pass in Behavior to Find a Person Name begins with C.
											
************************************************* 13.Lambda Solution	************************************************************	

//Sort by Last Name 
Collections.sort(people,(p1,p2) -> p1.getLastName().compareTo(p2.getLastName()));

//Print all the Elements of the List Using pass by behavior
printConditionally(people,p -> true);

//Display Last Name that Begins with C Using Pass by Behavior
printConditionally(people, p -> p.getLastName().startsWith("C"));

	private static void printConditionally(List<Person> people,Condition condition) 
	{
		for (Person person : people) {
			if(condition.test(person)) {
			System.out.println(person);
			}
		}
	}
										
************************************************* 14.Using Function Interfaces	****************************************************	

Form the above Code we have created an extra Interface to test.
Here the Interface accepts the parameter and returns boolean.
Here it seems Like extra work .
Here Interface Name and Method Name inside the Interface does not Matters.

Java 8 does not have a Function Type and they hace Created out of Box Interfaces to address some of these Common Scenarios.
Here the Scenario is accept an Object and return boolean.

	private static void printConditionally(List<Person> people,Predicate<Person> predicate) 
	{
		for (Person person : people) {
			if(predicate.test(person)) {
			System.out.println(person);
			}
		}
	}

Lambda Expression only checks the Signature of the Interface.
Supplier Interface does not accept any argument and returns an Object.  Abstract Method is get().
Function Interface accepts an argument and returns an Object.			Abstract Method is apply(). 
Predicate Interface accepts an argument and returns boolean.			Abstract Method is test().
Consumer Interface accepts an argument and returns void.				Abstract Method is accept().


Steps to Create a Lambda Expresssion :

1.Define an Interface
2.Define a Method inside an Interface which has the Same Signature that Lambda Expression has.


The Above Steps can be Overridden by predefined Methods inside Function Package.

							
************************************************* 15.More Function Interfaces	****************************************************		

From the Above Code we are displaying the Person details in the Console.
We can make it as Pass in Behavior.

Lambda Expression for System.out.println will be p -> System.out.println(p)
Interface that Accepts an Argument and returns void.

	private static void performConditionally(List<Person> people,Predicate<Person> predicate,Consumer<Person> consumer) 
	{
		for (Person person : people) {
			if(predicate.test(person)) {
				consumer.accept(person);
			}
		}
	}

Here we can change the Behavior while Calling.

	performConditionally(people, p -> p.getLastName().startsWith("C"),p -> System.out.println(p.getLastName()));

************************************************* 18.Closures	************************************************************************	

	int a=10;
	int b=20;
	
	doProcess(a,new Process()
		{
		@Override
		public void process(int i) {
		System.out.println(a+b);	
		}
	});
	}
	
	private static void doProcess(int i,Process process) 
	{
		process.process(i);
	}
	
	interface Process
	{
		void process(int i);
	}
	
Here Compiler Assumes that Variable b has the Value.
doProcess() is not executed inside the Main Method and is executed inside the doProcess().
doProcess() executes the Implementation of process Method.

doProcess() keeps track of the Varable b.
If we change the Value of the Variable b we get Compile Time Error Saying

	Local variable b defined in an enclosing scope must be final or effectively final
	
Befor Java 8 we have to declare the Variable as Final.

	final int b=20;
	
In Java 8 Variable is defined as effectively Final.
Whenever we are using Lambda Expression and Using Some Variable defined in the Scope then 
Java Compiler Freeze the Value of the Variable alon wih Lambda Expression.

										
************************************************* 19.this	************************************************************************	

												
************************************************* 20.Method References	************************************************************************	

Method Reference is an alternative way of writing Lambda Expression and is very readable.

	public static void main(String[] args) 
	{
		Thread thread= new Thread(()  -> printMessage());
		thread.start();
	}
	
Here the Above Lambda Expression does not have any argument and executing a Method.
i.e Here it is doing Method Execution with No Parameters.
We may also get Method Execution with Certain Parameters.
The above case can be replaced by Method References.

Rules for defining Method References are 
Case 1 :
--------
If the Lambda Expression does not accept any argument and executing a Method then pass the Class Name with Method Name followed by :: ie Method Reference.

	public static void main(String[] args) 
	{
		Thread thread= new Thread(MethodReferneceDemo::printMessage);
		thread.start();
	}

Case 2 :
--------
	
	performConditionally(people,p -> true ,p -> System.out.println(p));
	
If the Lambda Expression is accepting an input parameter and executing a Method with that Input Parameter.
then we have to take the Instance with Method Name followed by ::

	performConditionally(people,p -> true ,System.out::println);
		
************************************************* 21.For Each Iteration		************************************************************************	

There are Multiple ways to iterate over Collection Prior to Java 8.

Standard For Loop
	
	for (int i = 0; i < people.size(); i++)
	{
		System.out.println(people.get(i));
	}

Java 7 For Each Loop

	for (Person person : people) {
		System.out.println(person);
	}
From the Above Code we are Performing the Iteration Manually and is Called External Iteration.
We are Instructing the Compiler to Perfrom the Iteration Manually.

The Advantage of Using Java 8 For Each Loop is that we can For Each Combine with Lambda.
Java8 For Each is an Internal Iteration and the Iteration depends on Runtime.We don't have any Control on It.

	people.forEach(System.out::println);
	
Java 8 forEach Accepts a Consumer that accepts an argument and returns void.
Java 8 For Each Makes the Code execution in Parallel when we have Multi Core Processor.

								
************************************************* 22.Streams Introduction	*******************************************************************

Lambdas work with Streams in order to make the API More Elegeant.
Stream is a Sequence of Elements Supporting Sequential and Parallel Aggregate Operations.

Let us Consider the Collection of Elements.
If we want to access the elements of the Collection we need to Iterate over the Collection every Time.
Here we have to go through all the elements of the Collection.
Consider the case where we need to access only Particular element of the Collection Instead of Complete Iteration  then
that is not Possible in case of Collection.
Possible Solution is to convert the Collection into Stream of Elements so that we can perform Paralell Operations.

								
************************************************* 23.More About Streams	 **********************************************************************	

								
************************************************* 24.Lambda Basics	************************************************************************										














