1.Drawbacks of Monolith Application [20-JUL-2019]  (Done)
2.Micro Services Architecture       [20-JUL-2019]  (Done)
3.Designing Micro Services: Size, Scope, and Capabilities  [20-JUL-2019]  (Done)
4.Guidelines for Designing Micro Services  [20-JUL-2019]  (Done)
5.Messaging in Micro Services [20-JUL-2019]  (Done)
6.Synchronous Messaging - REST, Thrift [20-JUL-2019]  (Done)
7.Asynchronous Messaging - AMQP, STOMP, MQTT [20-JUL-2019]  (Done)
8.Message Formats - JSON, XML, Thrift, ProtoBuf, Avro  [20-JUL-2019]  (Done)
9.Service Contracts - Defining the Service Interfaces - Swagger, RAML, Thrift IDL [20-JUL-2019]  (Done)
10.Integrating Micro Services (Inter-service/process Communication) [20-JUL-2019]  (Done)
11.Point-to-point Style - Invoking Services Directly  [20-JUL-2019]  (Done)
12.API-Gateway Style [20-JUL-2019]  (Done) 
13.Message Broker style [20-JUL-2019]  (Done)
14.Decentralized Data Management  [20-JUL-2019]  (Done)
15.Decentralized Governance
16.Service Registry and Service Discovery  [20-JUL-2019]  (Done)
17.Deployment
18.Security
19.Transactions 
20.Design for Failures
21.Micro Services, Enterprise Integration, API Management, and Beyond.



1.Drawbacks of Monolith Application:
************************************
Monolith Applications are Designed,Developed and Deployed as a Single Unit.
Monolith Applications are Overwhelmingly Complex which leads to Night Mares in Maintaining Upgrading and Adding New Features.
Hard to Practice Agile Development and Delivery Methodologies with Monolith Architecture.
Required To Redeploy Entire Application in order to Update a Part of It.

2.Micro Services Architecture :
*****************************
Micro Services is the Part of Segregating the Services Available in the Monolith Application into independent Services.
The Key Idea is by Looking at Functionalities offered from Monolith Application,we can Identify the Required Business Application.
The Those Business Can be Implemented as Fully Independent Fine Grained and Self Contained Micro Services.
With Micro Service Architecture,Application can be Implemented as Suite of Micro Services.

3.Designing Micro Services: Size, Scope, and Capabilities :
***********************************************************
While Implementing Micro Services we have to properly decide the Size,scope and Capabilities of the Micro Service.
We can Have any Number of Lines of Code  Depends on The Functionality and there is no Restriction.
In SOA Context Services are Often Implemented as Monolithic Glob with Support for Several Dozens of Operations as Functions.
So Having SOA Like Service and ReBranding them as Micro Service Architecture does not get any Benefit.

4.Guidelines for Designing Micro Services :
*******************************************
Single Responsibility Principle  : Having a Limited and a Focused Business Scope for a Micro Service helps us to meet the 
agility in development and Deployment of the Service.
During Design Phase of the Micro Service We should Found their Boundaries and align them with the
Business Capabilities.
Make sure the Micro Service design ensures the independent development and deployment of the Service.
Our Focus Should be on the Scope of the Micro Service and not Making the Micro Service Smaller.
Size of the Micro Service should be the required size to facilitate the Given Business Capability.
Micro Service should have very few Operations/Functionalities and Simple Message Format.
It is Good Practice to start with Broader Service Boundaries refactoring to smaller ones.

5.Messaging in Micro Services :
*******************************
In Monolith Applications Business Functionalities of Different Components are invoked using Function Calls or Language Level
Method Calls.
In SOA This Was Shifted towards much More loosely coupled Language which is Primarily SOAP on top of different Protocols.
For Micro Service it is Required to have Simple and light weight Messaging Mechanism.

6.Synchronous Messaging - REST ,Thrift:
***************************************
For Synchronous Messaging (Client Expects a timely response and waits for it till it gets) REST is unanimous as
it provides a Simple messaging Style implemented with HTTP.
Here Every Functionality is represented as a Resource.

7.Asynchronous Messaging - AMQP, STOMP, MQTT :
**********************************************
For Some Micro Services,it is required to use  Asynchronous Messaging Techniques .
Client does not expect a Response immediately and does not accept a response at all.
In such Cases,Asynchronous Messaging calls such as AMQP,STOMP,MQTT are widely Used.

8.Message Formats - JSON, XML, Thrift, ProtoBuf, Avro :
*******************************************************

9.Service Contracts - Defining the Service Interfaces - Swagger, RAML, Thrift IDL
**********************************************************************************
When we Implement the Business Capability as Service, we need to define and publish the Service Contract.
In Case of Monolith Applications we don't find such Feature.
In case of SOA,WSDL is used to define the Service Contract and WSDL is not the Solution for Micro Services because of 
its Complexity and is tightly coupled with SOAP.
We use the REST API techniques to define the contract of the Micro Service.Swagger,RAML to define the Service Contracts.

10.Integrating Micro Services (Inter-service/process Communication) :
*********************************************************************
In Micro Services Architecture, The Applications are built as a suite of Services.
In order to Realize a Business Use case,it is required to have a Communication between the Micro Services.

11.Point-to-point Style - Invoking Services Directly  :
*******************************************************
In Point-to-Point Style, Messaging Routing Logic resides on each End Point and the Services can Communicate Directly.
Each Micro Service exposes a Rest End Point and One Micro Service can Communicate with another Micro Service through REST.
As the Number of Services Increases Point-to-Point becomes more overwhelming and Complex.

Drawbacks of Point-to-Point Style Micro service are :
-----------------------------------------------------
Non Functional Requirements Such as User Authentication,Monitoring has to be Implemented at Each Micro Service Level.
Duplication of Code in all the Micro Services.
There is no Control at all of the Communication between Service and Clients.
Direct Communication Style is Considered as Micro Service Anti Pattern For Large Scale Applications.

There Should be a Layer of an Abstraction for the Micro Services to Implement non Functional Capabilities.
This Style is called API Gateway Style.

12.API-Gateway Style :
**********************
In API-Gateway Style ,API-Gateway acts as a EndPoint for all the Clients/Consumers and Can be used to Implement 
Non Functional Requirements at Gate Way Level.
This is a Combination of Both API Gateway and Micro Services.
Here Micro Services become More Lighter.
Central Place for all the Non Functional Capabilities.

13:.Message Broker style :
************************** 
Web Socket Based Communication or Asynchronous Communication

14.Decentralized Data Management :
**********************************
In Case of Monolith Applications,Application Data Stores in a Single Centralized Database.
Where as in case of MicroService Architecture,Functionalities are Distributed as individual Micro Service
and if we use the Centralized Database and if the Schema gets Changed then all the Micro Services will be no Longer Available.
Each Micro Service has its own Private Database to Persist the Database and it should not be dependent on 
Centralized Database.
In Some Particular Scenarios,We might have to Update at Different Databases and it has to be done at API level only.

15.Decentralized Governance :
*****************************

16.Service Registry and Service Discovery :
*******************************************
In Micro Services Architecture,The Number of Micro Service we need to deal is High and 
If we Deploy Micro Service in Cloud,the URL of Micro Service will Change Dynamically.
We need to Register all the Micro Services So that it Can be Discovered by The Discovery Server.

There are Two Types of Service Discovery Mechanisms.
Client Side Service Discovery
Server Side Service Discovery

Spring Cloud Follows Client Side Service Discovery
Kubernetes Follow Server Side Service Discovery

17.Deployment :
***************
Deployment Plays a Crucial Role in Micro Services Development.
Ability to Deploy/UnDeploy  independent of Other Micro Services
Must be able to Scale at Each Micro Service Level
Building and Deploying Micro Services Quickly
Failure in One Micro Service would not effect another Micro Service
We Deploy Micro Services in Docker,Kubernetes and in Multiple Virtual Machines.

18.Security :
*************


19.Transactions :
*****************

20.Design for Failures :
************************


21.Micro Services, Enterprise Integration, API Management, and Beyond :
***********************************************************************



 



 




