1.interval 
2.ServerSentEvent Element
3.SseEmitter
4.Filter
5.Map 
6.FlatMap
7.window
8.subscribeOn
9.Merge
10.Concat
11.Zip
12.onErrorResume
13.onErrorMap



1.interval  :
-------------
This Method can be used to sent the Flux of Streams at a Particular Interval of Time.
i.e Stream Data is Sent continuously at Particular Interval.
When we Close the Browser,Connection between Client and Server is Closed and Stream Flow will be Stopped.

	@GetMapping(value = "/flux",produces = MediaType.TEXT_EVENT_STREAM_VALUE)
	public Flux<String> streamFlux()
	{
		return Flux.interval(Duration.ofSeconds(5)).log()
				.map(sequence -> "Flux -" + LocalTime.now().toString());
	}
			
2.ServerSentEvent Element :
---------------------------
The Same Flux i.e Streaming of Elements at Particular Interval can be Achieved by Using
ServerSentEvent.
There are couple of Benefits Using Server Sent Event entity.
We can Handle the Events MetaData i.e which we Require in Real world Application.
Here We Can Ignore "text/Event Stream" Media Type Declaration.

	@GetMapping("/eventStream")
	public Flux<ServerSentEvent<String>> eventStream()
	{
		return Flux.interval(Duration.ofSeconds(2)).log()
		.map(sequence -> ServerSentEvent.<String>builder()
				.id(String.valueOf(sequence))
				.event("Periodic-Event")
				.data("SSE -" + LocalTime.now().toString())
				.build());
	}

3.SseEmitter :
--------------
We Can also Implement the Server Sent Events Using SSEEmitter Class along with ExecutorService.
Here We need to Define an ExecutorService,a Thread Where SSEEmitter will do its work of Pushing the Data
and return the Emitter Instance and keep the Connection Open.

	@GetMapping("/manualStream")
	public SseEmitter sseEmitterStream()
	{
		SseEmitter emitter=new SseEmitter();
		ExecutorService executorService=Executors.newSingleThreadExecutor();
		executorService.execute(() -> {
			try {
			for(int i=0;true;i++)
			{
				SseEventBuilder event=SseEmitter.event()
						.id(String.valueOf(i))
						.name("Manual_Event")
						.data("Manual-"+LocalTime.now().toString());
				emitter.send(event);
				} 
			}
			catch (IOException e) {
				emitter.completeWithError(e);
			}
		});
		return emitter;
	}

Crete the SseEmitter Class.
Create the ExecutorService by Using SingleThreadExecutor.
Create the Event Using  SseEventBuilder Interface.
Send the Event Using emitter with the Delay.


4.Filter :
**********
fromIterable() accepts a List and Returns a Flux.

List<String> cities=Arrays.asList("Mumbai","Hyderabad","Pune","Andhra Pradesh");
		Flux<String> fluxCities=Flux.fromIterable(cities).log().filter(city -> city.length()>6);
		StepVerifier.create(fluxCities)
		.expectNextCount(2)
		.verifyComplete();

5.Map :
*******
Map Operator can be USed to Transform the Stream into Another Kind of Stream.
In case of WebFlux,Map Transforms the Data Sequentially.
Map can return the Same Stream or Different Stream.
To Display all the Elements of the Flux we need to Subscribe and Print.

		Flux.range(1, 5)
		.map(mapper -> mapper*mapper)
		.subscribe(System.out::println);
		
6.FlatMap :
***********
FlatMap flats the Elements Asynchronously into Publishers and Flattens the Inner Publisher into a Single Flux
through Merging.
We use FlatMap for Asynchronous Operations.

		Flux.range(0, 3)
		.flatMap(mapper -> getEmployee(mapper))
		.subscribe(System.out::println);
		
		private Mono<Employee> getEmployee(int id)
		{
		List<Employee> employeeList=Arrays.asList(new Employee(1,"Srinivas",22000),
				new Employee(2,"Nandini",27000),
				new Employee(3,"Bhaumik",23000));
		return Mono.just(employeeList.get(id));
		}
		
Here it is Executing Sequentially.To get the Better Performance we use the window() Function.
In case of FlatMap order is Not Maintained.
If we want to Maintain the Order we need to use concatMap.
concatMap takes time to Execute.
To Improve the Performance we need to use flatMapSequential that will improve the Performance and maintains the Order.


7.window :
**********
In case of Window we need to Specify the Size so that it can wait for the Stream to reach the Size and 
it passes to the Next Event.

8.subscribeOn()
***************
It is a Scheduler that accepts the Scheduler Type and it runs on Multiple Threads. 

9.Merge :
*********
























