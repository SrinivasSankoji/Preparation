1.JDBC Disadvantages and Advantages									(Book Two)	[03-AUG-2021]  (Done)
2.Session Interface Methods                                         (Book Two)	[03-AUG-2021]  ()
3.SessionUtil File Creation using Singleton Pattern                 (Book Two)	[03-AUG-2021]  ()
4.First Level Cache                                                 (Book Two)	[03-AUG-2021]  ()
5.Second Level Cache                                                (Book Two)	[03-AUG-2021]  ()
6.Cascade                                                           (Book Two)	[03-AUG-2021]  ()
7.Fetching Strategies                                               (Book Two)	[03-AUG-2021]  ()
8.Table Per Class                                                   (Book Two)	[03-AUG-2021]  ()
9.Table Per Concrete Class                                          (Book Two)	[03-AUG-2021]  ()
10.Table Per SubClass                                               (Book Two)	[03-AUG-2021]  ()
11.Joins in Hibernate                                               (Book Two)	[03-AUG-2021]  ()
12.Derived Properties in Hibernate                                  (Book Two)	[03-AUG-2021]  ()
13.Performance Tuning in Hibernate                                  (Book Two)	[03-AUG-2021]  ()
14.Hibernate Mutable                                                 (Book Two)	[03-AUG-2021]  ()
15.Relationship in Hibernate                                        (Book Two)	[03-AUG-2021]  ()

***************************************************** 1.JDBC Disadvantages and Advantages	*****************************************************

1.Large Projects are not suitable.
2.JDBC does not support Polymorphism,Abstraction and Polymorphism.
3.JDBC Exceptions are Checked Exceptions ie we need to handle Checked Exceptions.
Should be written in try catch block.
Exceptions in ORM are unchecked Exceptions.
4.SQLExceptionTranslator converts propriatory Database Vendor Exceptions into user defined Exceptions supported by ORM
where as it is not supported by JDBC.
5.In SIngleto Design Pattern we write the JDBC Code.

1.JDBC is suitable for small scale projects.
2.JDBC is limited for small no of functionalities
3.To access large data from database performance is good and simple syntax.

***************************************************** 2.Session Interface Methods *************************************************************

1.public Serialized Object save(Object obj) throws HibernateException 
Stores the data and returns the object with the identifier which is generated by the Generator Class.

2.public void persist(Object obj) throws HibernateException
Stores the data and returns void.
We cannot identify whether the record is inserted or not.

3.public void update(Object obj) throws HibernateException
If the record is present then update() updates the record and it does not return any value.
It internally uses jdbc update().
If the record is not present then it will not throw any Exception.

4.public Object merge(Object obj) throws HibernateException
If the record exists in the database the merge() performs the update operation.
Returns Persistent object which contains the Identifier value and updated values.
If the Record does not exists then merge() performs the insert operation.
merge() returns 






 
