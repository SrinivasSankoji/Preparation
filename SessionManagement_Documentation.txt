
1.Next-Generation-Session-Management-with-Spring-Session  (infoq)				[10-SEP-2020]  (Done)
2.EHCache (Simple Learning)                                                     [10-SEP-2020]  (Done)
3.cookie-based-spring-security-session (innoq)                                  [10-SEP-2020]  ()
4.Authentication on the Web (Code Realm) (Youtube)								[10-SEP-2020]  ()
5.Authentication and Cookie Basics (itsTechMode) (Youtube)						[10-SEP-2020]  ()
6.




References :
------------
http://www.mkjava.com/tutorial/spring-session/
https://www.javadevjournal.com/spring/spring-session/
https://www.journaldev.com/21748/spring-session-management-spring-session-jdbc
https://sivalabs.in/2018/02/session-management-using-spring-session-jdbc-datastore/
https://www.javainuse.com/spring/springboot_session
http://websystique.com/spring/spring-4-cacheable-cacheput-cacheevict-caching-cacheconfig-enablecaching-tutorial/
https://howtodoinjava.com/spring-boot2/spring-boot-cache-example/
https://javabeat.net/caching-in-spring/

********************************************************** 1.Next-Generation-Session-Management-with-Spring-Session *****************************************************

Sprig Session brings innovation back to the Enterprise Java Session Management and making it easy to implement

--> We can write Horizontally Scalable Cloud Native Applications
--> Offload the Storage of the Session state into specialized external Session stores such as Redis or Apache Geode,that provides the high quality clustering in an 
	Application Server independent way.
--> We can make the HttpSession alive when users are making request over WebSocket.
--> Access Session data from non web request processing code such as JMS Message processing code.
--> Support Multiple Sessions per browser and making it easy to build a rich end user experience.
--> Control how session Id's are exchanged between the client and server and making it easy to write restful API's that can extract session Id from an HTTP header rather than 
	relying on Cookies.

1.Building a Horizontally Scalable Cloud Native Application :
-------------------------------------------------------------
Cloud Native Application Architecture assumes that application will be scaled by running more no of instances of an Application in the Linux Containers on a Large Pool of VM's.
For Example it is easy to deploy a War File(Tomcat) on Cloud Environment and then Scale up to 100 Application instances with 1 GB Ram per instance in a few Seconds.
We can also increase or decrease the number of applications based on our demand.

Many Application Servers Store HTTP Session State in the Same JVM that is running the Application since it is easy and fast to implement.
When an New App Server joins or leaves the Cluster Then HTTP Sessions are rebalanced over the remaining App Server Instances.
In a Cloud Environment,we have hundreds of App Server instances running and there may be chance adding or deleting the new App Server instances and there would be a problem.

Re balancing HTTP Session Can become a performance bottleNeck.
Large HeapSize is needed for Storing Large Number of Sessions and can cause to Garbage Collector.
TCP Multi cast is Usually Prohibited by Cloud Infrastructure.
Difficult to identify which new Application Server instances are joined or left from the Cluster.

Therefore It is more efficient to store the HTTP Session state in a data Store Outside the JVM running the Application Code.
For Example 100 instances of Tomcat are Configured to Redis for storing the Session data and
If the Number of Instances in the Tomcat increased or decreased the Session in Redis are Unaffected.

For Open Source Servers like Tomcat it is easy to find an alternative implementation of Session Manager that uses data store like Redis and MemCached.
However the Configuration process is Complex and is specific to Application Server.
For Commercial Servers such as WebLogic and WebSphere finding an Alternative for Session Managers is not only difficult but also impossible.

Spring Session provides an Application independent way to configure pluggable data Store within the bounds of the Servlet Specification and without relyig on Application Server API's.
This Means that Spring Session works with all Application Servers that implement the Servlet Specification and is very easy to Configure on the Application Servers.
We can also choose whatever External Data Store we want to Choose.

2.Multiple Accounts per user :
------------------------------
If I Want to switch from one Application to another Application we need to Log out and then Log In.
With Spring Session it is trivial to configure Multiple HTTP Sessions per user ,enabling the user to Switch between Multiple Accounts without need of Logout and Log In.

3.Multi-level Security Preview :
--------------------------------
Normal Web Application stores the identity of the current User and their roles in the HTTP Session.
Since Web Application can have only one Session per logged in user We won't be able to switch from one Account to Another Account.
With Spring Session We Can easily create Multiple Sessions per Logged In User and each of those Session is completely independent of the other Session.
So preview functionality for multiple users can be easily achieved.

4.Staying Logged In While Using Web Sockets :
---------------------------------------------
According to Servlet Specification,requests arriving over Web Socket can't make HTTP Session Alive.
When the user Starts Chatting,Session Countdown Timer Starts and When the HTTP Session expires then the Web Socket Connection is also Closed.
With Spring Session we can eventually make sure that both Web Socket request and regular Http Requests keep HTTP Session alive for our users.

5.Accessing Session Data for non web requests :
-----------------------------------------------
We can access the Spring Session from any non Web Application as long as we know the Session Id.
Spring Session has more rich API than regular servlet HttpSession API.

6.Spring Session Architecture :
-------------------------------
While implementing Session Manager two key problems must be solved.

How to Create a Cluster with high availability session that can store data reliably and efficiently.
How to determine which Session instance is associated with which request i.e whether the request is HTTP,WebSocket,AMQP or some other Protocol.
i.e How the Session ID is transmitted over the protocol that is used for making the request.

For the first problem i.e Storing data in a high availability Scalable Cluster is already well solved by various data Stores Like Redis,GemFire,APache Geode etc.
Spring Session has defined standard Set of interfaces that has to be implemented by various data stores to mediate access to the Data Store.

Various Interfaces Are :
Session  Interface that defines the basic capabilities of Session such as setting and removing attributes.
ExpiringSession Interface extends the Session interface to provide attributes that can be used to determine whether the session is expired or not.
RedisSession is an implementation of ExpiringSession interface.
SessionRepository Interface defines methods to create,save,delete and retrieve a session.Logic to create an instance of a Session into the data store would be 
coded in the implementation of this interface.

Spring Session assumes that the problem of associating a request to specific instance is protocol Specific
because the client and the server need to agree on a way to transmit the session id over the request and response Cycle.

If the requests are arriving over HTTP then Session can be associated with a request by using HTTP Headers or HTTP Cookies.
If the requests are arriving Over HTTPS then the Session can be associated with a request by using SSL SessionId.
If JMS is used the JMS Header can be used to store the Session Id between the Request and Response.

For HTTP Protocol,Spring Session defines HttpSessionStrategy interface with two default Implementations :
CookieHttpSessionStrategy which uses HttpCookie to associate a request with Session Id.
HeaderHttpSessionStrategy which use HttpHeaders to associate a request with Session Id.

Spring Session Over HTTP :
--------------------------




Configuring Spring Session :
----------------------------
Spring Session Ships with built in Support For Redis.
Tc Configure Spring Session in Spring Boot We need to add two Dependencies :
spring-session and
spring-boot-starter-redis.

Configuring Connectivity from Spring Session to Redis can be done by adding Properties in th application.properties file.
By Default Spring Session Uses HttpCookie to Store the Session Id and we can also Configure Spring Session 
to use a Custom HTTP Header Such As x-auth-token.

Multiple Sessions Per Browser :
Spring Session Keeps Track of Multiple Users By Using  Session Alias Parameter i.e _s Parameter.
If The Request has no _s Parameter then Spring Session treats that as the Default Session.
In order to create a new Session Per Browser 
call the request.getSession()

  
**************************************************** Simple Learning (EhCache) ****************************************************

Introduction :
--------------
There are Different Cache Mechanisms Available in the Market Like EHCache,Redis,HazleCast,CouchBase,GemFire etc.
Spring Also Have In Built Cache Manager.
We Can Configure Multiple Caches By Using Cache Manager and We Can Also Set Expiry For Them.
Here We Are Using EhCahe For Java Configuration.

Cookie is Used to Store User Details Where Cache is USed to Store The Information and will Be Helpful to Render The Page Faster.
Cookies Often Tracks The Information Like How Frequently The User Visits and What is the Time Of The Visit,Button Clicked By The User,
Product Clicked By The User,What are The Items in the Shopping Cart etc.
For Example In YouTube or Face Book They Show The Adds Based  on the Information Available in the Browser Cookie.
If You Shop For Shoes in Amazon.com and Open up the Face Book Page,We Would Immediately Notice That Face Book Will Show the 
Adds Related to Shoes in their Page With The Help OF Cookies.

When We Open a Page With Large Pictures,Videos or Audios or a Page With Huge Data like Some Historical Data
and We Are Rendering the Data to the End User and This May Take Time to Render In Front of The User.
Here We Use Cache to Store the Site Contents Like The Images,Videos,Audios or These Huge Data etc on the User Computer.
So that When We Load the Data For The Next Time It Will be Loaded Much Faster.
Here Both Cookie and Cache Has Expiry Limits But it Depends on Business Needs.

Create The Spring Boot Project With Sprig In Built Cache.
In The Service,Wait For 5 Seconds Using Thread.sleep(5000);

Make the Method Annotated With @Cacheable Means We Are Setting the Cache.
@CacheEvict Means Removing the Cache
@CachePut Means Updating the Cache.


@Cacheable(value = "student-cache",key = "'student-cache'+#studentId")
Here Key is Important Because Here We Are Storing the Student Cache Based on Student Id.
Here We are Using Spring Expression Language to Define the Key.
The Entire Data Returned For The Student Id Is Stored in the Particular Key.
Key Variable Should Match The Method Signature i.e Method Variable.

We Can also Set The Condition for the Cache Like,
Only When the Parameter is True i.e Using @Request Parameter
If The Result is Not Null Then Cache It i.e Use unless Option in @Cacheable 
Remove the Data From the Cache When the Method invocation bu Using beforeInvocation.

We Must USe Conditional Caching So That We Have an Idea of When to Put The Data in the Cache,When to Update the Data in the Cache
and When to Remove The Data in the Cache.


EHCache Configuration Example :
*******************************
Create The Configuration and Extends CachingConfigurerSupport Class
Override The Cache Manager Because it is Provided By Spring Framework and Implement Our Own Cache Manager.
In the CacheManger Create the Configuration which Serves as the Configuration For Our Cache.
We Can Set The Name of The Cache Using Configuration.
We Can also Set The Memory Store EvictionPolicy i.e How Cache is Replaced in our Memory.
When The Cache is Full We Need To Decide the Element to be Evict.
There are Different Algorithms Like LRU,FIFO,LFU and so on.
By Default Eviction Policy is LRU.

We Can also set the MAx Entries by Using in Local Heap.
i.e Maximum Number of Cache Entries in the Local Heap Memory.
When We Set The Cache Manager Local Pool  will be Available to the Cache under the Cache Manger.
We Can also Set the Timeout For The Cache.
We Can also Set The Request Parameter For Cacheable like isCacheable.
We Can Remove The Cache By Suing @CachEvict

















 




  
  
  
  

  
  
	
  
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 