1.Java 8 Stream											(winterbe)     			[08-SEP-2021]  	(Done)
2.colelct                                               (winterbe)     			[03-DEC-2021]  	(Done)
3.FlatMap                                               (winterbe)     			[03-DEC-2021]  	(Done)
4.Reduce                                                (concretepage)     		[03-DEC-2021]  	(Done)
5.collectingAndThen										(stackabuse)     		[23-SEP-2023]  	()
6.Collectors.toMap                                   	(stackabuse)     		[23-SEP-2023]  	(Done)
7.Collectors.groupingBy                               	(stackabuse)     		[23-SEP-2023]  	(Done)
8.Collectors.partitioningBy								(stackabuse)			[23-SEP-2023]  	(Done)
9.Duplicate in Streams 									(stackabuse)			[23-SEP-2023]  	(Done)
10.Convert Map to List                                  (stackabuse)			[23-SEP-2023]  	()
11.Map and FlatMap                                      (stackabuse)			[23-SEP-2023]  	()
12.Convert List to String with Join                     (stackabuse)			[23-SEP-2023]  	()
13.Collectors.reducing                                  (stackabuse)			[23-SEP-2023]  	()
14.Convert Array to ArrayLit                            (stackabuse)			[23-SEP-2023]  	()
15.Collect Stream into Unmodifiable List,Set or Map     (stackabuse)			[23-SEP-2023]  	()

************************************************************ 1.Java 8 Stream  ************************************************************

Streams are monads thus playing a big part in bringing Functional Programming to Java.
Stream represents a sequence of elements and supports different kind of operations to perform computation on those elements.
Stream operations are either Intermediate or Terminal.

Intermediate operation returns a stream so that we can chain multiple Intermediate operations without using Semi Colon.
Important characteristic of Intermediate operation is Laziness.
An Intermediate operation will only be executed when the Terminal operation is present.

Terminal operation either return void or non stream result.
Filter,Map and Sorted are Intermediate operations where as forEach is Terminal Operation.

Most Stream operations accept some kind of Lambda Expression as a parameter i.e. Functional Interface specifying the exact behavior of the operation.
These operations must be non interfering and stateless.
Non interfering means it does not modify the underlying datasource of the stream.
Stateless means it does not depend on any mutable variables.

		List<String> myList=Arrays.asList("a1", "a2", "b1", "c2", "c1");
		
		// Creating a Stream from an Array
		 myList.stream().filter(s -> s.startsWith("a"))
		 .map(String::toUpperCase)
		.sorted()
		.forEach(System.out::println);
		
In the above example filter,map and sorted are Intermediate operations where as forEach is a Terminal operation.

Ways of creating a Stream :
---------------------------
Streams can be created fromm various sources like Collections,Arrays,Stream.of(),Stream.generate() and Stream.iterate().
List and Set supports new methods like stream() and paralellStream() to create sequential stream and parallel stream.
Parallel Streams are capable of operating on Multiple Threads.

1.Stream.of() :
---------------
Stream.of() can be used to create the stream of Objects.
Stream.of("a1","a2","a3").findFirst().ifPresent(System.out::println);

2.Arrays :
----------
String[] stringArray={"program","creek","java"};
Stream<String> arrayStream=Arrays.stream(stringArray);

3.Stream.generate :
-------------------
Stream<Double> generate=Stream.generate(Math::random).limit(10);
Double[] strArray=generate.toArray(Double[]::new);
System.out.println(Arrays.toString(strArray));

4.Stream.iterate :
------------------
Stream<Integer> intStream=Stream.iterate(0, n -> n+1).limit(10);
Integer[] intArray=intStream.toArray(Integer[]::new);
System.out.println(Arrays.toString(intArray));
		
Java8 comes with the special kind of streams to work with primitive data types.
IntStream,LongStream,DoubleStream etc.

	IntStream.range(1, 4).forEach(System.out::println);

To convert IntStream to the List of Integer we used boxed().

	List<Integer> intList=IntStream.range(1, 4).boxed().collect(Collectors.toList());
	
Primitive Streams support additional aggregation operations like average() and sum().

	Arrays.stream(new int[] { 1, 2, 3 }).map(n -> 2 * n + 1).average().ifPresent(System.out::println);
	
SomeTimes it is useful to transform a regular Object Stream to Primitive Stream or vice Versa.
Here we use mapToInt,mapToLong,mapToDouble.

	Stream.of("a1", "a2", "a3").map(value -> value.substring(1)).mapToInt(Integer::parseInt).max()
				.ifPresent(System.out::println);
		
Why Order Matters :
-------------------
Use Filter first and then Map.
Filter will always be executed If it doesn't match the condition also.
If we are using any Stateless operation like sorted then the Order would be Filter,Sorted,Map and Terminal Operation.

Reusing Streams :
-----------------
Java 8 Streams cannot be reused once we call the Terminal Operation.
		
		Stream<String> stream = Stream.of("a1", "b2", "c3", "d4").filter(s -> s.startsWith("a"));
		stream.anyMatch(s -> true);
		//stream.noneMatch(s -> true);//Streams cannot be reused and throws IllegalStateException stream has already been operated upon or closed

To overcome this we have to create a new stream chain for every Terminal Operation.
We have to create a Stream Supplier to construct a new Stream with all intermediate operations already set up.

		private static void exampleThirteen() {
		System.out.println("Example Thirteen --> Stream Supplier With get --> Start ");
		Supplier<Stream<String>> streamSupplier = () -> Stream.of("a1", "b2", "c3", "d4");
		// .filter(s->s.startsWith("b"));
		streamSupplier.get().filter(s -> {
			System.out.println("Filter " + s);
			return true;
		}).map(s -> {
			System.out.println("Map " + s);
			return s.toUpperCase();
		}).anyMatch(s -> {
			return s.startsWith("B");
		});
		streamSupplier.get().anyMatch(s -> {
			System.out.println("AnyMatch " + s);
			return s.startsWith("a1");
		});
		System.out.println("Example Thirteen --> Stream Supplier With get --> End ");
	}
		
************************************************************ 2.Collect ************************************************************

collect() is an extremely useful Terminal operation that can be used to get the stuff out from the stream once done with the processing.
collect() accepts Collectors which consists of four different arguments i.e. Supplier,Accumulator,Combiner and Finisher.
collect() can be used to perform many operations like Summation,Grouping,Joining etc.
Java8 supports various built in Collectors via the Collectors Class.
For the most common operations we don't need to implement Collectors ourself.

1.To Transform the Stream of elements into another kind of stream and get the data out from the Stream i.e. basic collect

	List<Person> persons = Arrays.asList(new Person("Max", 18), new Person("Peter", 23), new Person("Pamela", 23),
				new Person("David", 12));
	List<Integer> result = persons.stream().map(Person::getAge).collect(Collectors.toList());
	
2.To group the elements of the Stream based on condition we use groupingBy.

	Student s1 = new Student("Ram", 20, "A");
	Student s2 = new Student("Shyam", 22, "B");
	Student s3 = new Student("Mohan", 22, "A");
	Student s4 = new Student("Mahesh", 20, "C");
	Student s5 = new Student("Krishna", 21, "B");
	List<Student> list = Arrays.asList(s1, s2, s3, s4, s5);
	Map<String, List<Student>> result = list.stream().collect(Collectors.groupingBy(Student::getClassName));
	List<Student> results = result.entrySet().stream().map(Map.Entry::getValue).flatMap(List::stream).collect(Collectors.toList());
	results.forEach(s -> System.out.println(s));

3.Collectors are extremely versatile .We can also perform aggregations on the stream of elements.

	List<Integer> list = Arrays.asList(1,2,3,4);
		Double average=list.stream().collect(Collectors.averagingInt(number->number*2));
		
	List<Integer> integerArray=Arrays.asList(25,36,81);
		IntSummaryStatistics statistics=integerArray.stream().collect(Collectors.summarizingInt(number->number+number));

4.We can convert the List into String format that can be passed as argument to IN parameter of SQL Statement.
This can be done by using joining()  of Collectors Class.
To the joining() we can pass the delimiter,prefix and suffix too in concatenation.

	List<String> names=Arrays.asList("Ram","Shyam","Shiv","Mahesh");
	String result=names.stream().collect(Collectors.joining("','", "['", "']"));
	System.out.println(result);

5.In order to transfrom the stream of elements into Map,we have to specify both keys and values.
Here keys must be unique otherwise we get IllegalStateException.

	List<Person> list = new ArrayList<>();
	list.add(new Person("Mohan", 100));
	list.add(new Person("Sohan", 200));
	list.add(new Person("Mahesh", 300));
	Map<Integer, String> result=list.stream().collect(Collectors.toMap(Person::getAge, Person::getName));


************************************************************ 3.FlatMap ************************************************************

Map can be used to transform the stream of elements into another Type of Objects.
Map is limited because Object can only be mapped to exactly another Object.

FlatMap can be used to convert the Stream of Collections into a Stream of Objects.
The Objects are combined from all the Collections into the Original Stream.

1.Consider the scenario of conevrting List of List to List.

	List<Integer> list1 = Arrays.asList(1, 2, 3);
	List<Integer> list2 = Arrays.asList(4, 5, 6);
	List<Integer> list3 = Arrays.asList(7, 8, 9);
	List<List<Integer>> listOfLists = Arrays.asList(list1, list2, list3);
	List<Integer> result = listOfLists.stream().flatMap(List::stream).collect(Collectors.toList());
	
2.Consider the scenario of word count of the given string.

	String str = "This this is is done by Saket Saket";
	List<String> resList = Stream.of(str).map(x -> x.split("\\s")).flatMap(Arrays::stream).collect(Collectors.toList());
	
3.FlatMap can also be used for Asynchronous Operations.

	.flatMap(employeeId -> getEmployeeDetails(employeeId))
	.collect(Collectors.toList());

************************************************************ 4.Reduce **************************************************************

reduce() combines all the elements of the Stream with the given function.The result is an Optional holding the reduced value.
reduce() can be used to get the sum of numbers stored in the Collection,Concatenate the String with the separator etc.

Java 8 supports 3 different kind of reduce() methods.

reduce(BinaryOperator accumulator) :
------------------------------------
reduce() accepts a Binary Operator i.e BiFunction where both operands share the same type.
BiFunctions are like functions but accept two arguments.

	Arrays.stream(intArray).reduce((x,y) -> x+y).ifPresent(System.out::println);

reduce(T Identity, BinaryOperator<T> accumulator) :
---------------------------------------------------
Second reduce() accepts both an Identity Value and a Binary Operator.
This way can be used to construct a new Object from the other objects of the Stream.

	int sum=0;
	int[] intArray= {23,43,56,97,32};
	sum=Arrays.stream(intArray).reduce(100,Integer::sum);
	System.out.println(sum);

reduce(U identity, BiFunction<U,? super T,U> accumulator, BinaryOperator<U> combiner) :
---------------------------------------------------------------------------------------
reduce() accepts three parameters i.e Identity Operator,Binary Operator and Combiner Type Binary Operator,.
Here Identity Value type is not restricted to particular Object.


************************************************************ 5.collectingAndThen(stackabuse) *************************************************************





************************************************************ 6.Collectors.toMap(stackabuse) ************************************************************

Collectors represent the implementations of the Collector interface.
Collectors class offers a series of methods to perform reduction operations.
The toMap() is a static method from Collectors class that returns a Collector that produces a new Map instance.
The newly created Map contains all the Keys and values which are calculated by applying the provided mapping function to the input Element.

Here all the provided keys must be unique and repeating a key would result in Illegal state Exception whenever a Collection operation is performed.
toMap() is commonly used to transform the data structure like an Array or List into a Map by transferring the elements into newly created Map.
The basic form of toMap() accepts two parameters.

	toMap(Function keyMapper, Function valueMapper)
	
keyMapper is a mapping function whose output is the key of the final Map.
valueMapper is a mapping function whose output is the value of the final Map.
The return value of the method is a Collector which collects elements into a Map whose pair is previously applied among mapping functions.

	Map<String, Double> result1 = students.stream().collect(Collectors.toMap(Student::getName, Student::getAvgGrade));

Function.identity() is a function that always returns its input argument.

Consider the scenario where we have a duplicate keys in the given Student Object.
In that case toMap() throws IllegalStateException.

Along with two Mapper function there is one more function parameter in the toMap() i.e. mergeFunction.
mergeFunction is a function that will be called only if there are duplicate key elements present in the final Map and their values needs to merged and assigned to one Unique Key.

	 Map<String, Double> result2 = students.stream()
                .collect(Collectors.toMap(Student::getName, Student::getAvgGrade,(a, b) -> (a+b)/2));

The final overloaded version of toMap() accepts a Supplier function which can be used to supply a new implementation of the Map inteface to pack the result in.
The mapSupplier function specifies the particular implementation of Map we want to use as our final Map.
Java by default uses HashMap as an implementation to store them.

	Map<String, Double> result3 = students.stream()
                .collect(Collectors.toMap(Student::getName, Student::getAvgGrade,(a, b) -> (a+b)/2, LinkedHashMap::new));
        System.out.println(result3); // {John=8.155, Mike=8.4, Michael=7.5, James=9.1, Kyle=9.83}

************************************************************ 7.Collectors.groupingBy(stackabuse) ************************************************************

Collectors.groupingBy() gives us a similar functionality to the Group By in SQL.
We use Collectors.groupingBy() to group Objects by a given specific property and store the end result in Map.
Collectors.groupingBy() has 3 overloaded methods.

1.Collectors.groupingBy() with a Classification Function : 
----------------------------------------------------------
The first variant of Collectors.groupingBy() method takes only one parameter i.e. a Classification function.
This method returns a Collector that groups the input elements of Type T according to the Classification function and returns the result in a Map.

	Map<String, List<Student>> result1=students.stream().collect(Collectors.groupingBy(Student::getName));
    System.out.println(result1);
	
2.Collectors.groupingBy() with Classification function and Downstream Collector :
---------------------------------------------------------------------------------
When grouping is not just enough, we can also supply downstream Collector to the groupingBy() method.

This method returns the Collector that groups the input elements of type T according to the classification function,
After applying a reduction operation on the values associated with the given Key using specified Downstream Collector.

	 Map<String, List<String>> result2=students.stream()
                .collect(Collectors.groupingBy(Student::getCity,Collectors.mapping(Student::getName,Collectors.toList())));
     System.out.println(result2);
	 
Agian reduction operations are more powerful and can be used to find the maximum,minimum and average etc.
From the above example,instead of reducing to their names, we can reduce to their counts.

	Map<String, Long> result3=students.stream()
				.collect(Collectors.groupingBy(Student::getCity,Collectors.counting()));
	System.out.println(result3);


3.Collectors.groupingBy() with a Classification Function, Downstream Collector and Supplier :
---------------------------------------------------------------------------------------------
This is the final overloaded method of groupingBy().
This method provides the specific Map implementation we want us to contain as an end result.

	 Map<String, List<String>> result4=students.stream()
                .collect(Collectors.groupingBy(Student::getCity, TreeMap::new,Collectors.mapping(Student::getName,Collectors.toList())));
     System.out.println(result4);

************************************************************ 8.Collectors.partitioningBy ************************************************************

Collectors.partitioningBy() can be used to partition the streams based on the certain Predicate.
There are two overload versions of the method but both return a Collector which partitions the input elements according to Predicate and organizes them into Map<Boolean,List<T>>.

1.Collectors.partitioningBy() using a Predicate :
-------------------------------------------------
Here each element of the stream are tested against Predicate.
Based on the resulting Boolean Value, Collector groups the elements into two Sets and returns the result as Map<Boolean,List<T>>.

	  Map<Boolean, List<Student>> result=students.stream().collect(Collectors.partitioningBy(student -> student.getName().length()>4));
      System.out.println(result.keySet());


2.Collectors.partitioningBy() using a Predicate and a Downstream Collector :
----------------------------------------------------------------------------
Instead of passing the Predicate we can also supply the Downstream Collector as well.
The result is same as PartitioningBy where the values are the result of the DownStream Collector.

	Map<Boolean, List<String>> result2= students.stream().collect(Collectors.partitioningBy(student -> student.getAge()>20,Collectors.mapping(Student::getName,Collectors.toList())));
        System.out.println(result2);
		
************************************************************ 9.Duplicate in Streams (stackabuse) ************************************************************




	 
	 







	



