1.Java 8 Stream											(winterbe)     	[08-SEP-2021]  	(Done)
2.colelct                                               ()     			[08-DEC-2021]  	()
3.FlatMap                                               ()     			[08-DEC-2021]  	()
4.Reduce                                                ()     			[08-DEC-2021]  	()


************************************************************ 1.Java 8 Stream  ************************************************************

Streams are Monads thus playing a big part in bringing Functional Programming to Java.
Stream represents a sequence of elements and supports different kind of operations to perform computation on those elements.
Stream Operations are either Intermediate or Terminal.
Intermediate Operations returns a Stream so that we can chain Multiple Intermediate Operations Without Using Semi Colon.
Where as Terminal Operations Either Return Void or Non Stream Result.
Filter,Map and Sorted are Intermediate Operation Where as ForEach is Terminal Operations.
Most Stream Operations accept some kind of Lambda Expression Parameter,A Functional Interface Specifying the Exact Behavior of the Operation.
Most of these Operations must be Non Interfering ans stateless.

		List<String> myList=Arrays.asList("a1", "a2", "b1", "c2", "c1");
		 myList.stream().filter(s -> s.startsWith("a"))
		 .map(String::toUpperCase)
		.sorted()
		.forEach(System.out::println);
		
In the above example filter,map and sorted are intermediate operations where as forEach is a terminal operation.

Most of the straem operations accept some kind of Lambda Expression parameter or Functional Interface specifying the exact behavior of the operation.
These operations must ne non interfering and stateless.
non interfering means it does not modify the underlying datasource of the stream.
stateless means it does not depend on any mutable variables.

Ways of creating a Stream :
---------------------------
Streams Can be Created Form Various Sources Like Collection.
Stream.Of() to create the Stream of Objects.
List and Set supports new Methods Like stream() and paralellStream() to Create Sequential Stream and Parallel Stream.
Parallel Streams are Capable of Operating on Multiple Threads.

	Stream.of("a1","a2","a3").findFirst().ifPresent(System.out::println);
	
Java8 comes with the special kind of streams for working with primitive data types.
IntStream,LongStream,DoubleStream etc.
Primitive Streams support the Additional Aggregation Operations like average() and sum().
SomeTimes it is useful to transform a Regular Object Stream to Primitive Stream or vice Versa.
Here we use mapToInt,mapToLong,mapToDouble.

	IntStream.range(1, 4)
		.forEach(System.out::println);
		
Processing Order In Streams :
-----------------------------
An Important Characteristic of Intermediate Operation is Laziness.
An Intermediate Operation will only be Executed When a Terminal Operation is Present.
In Native Approach Elements would be Executed One After Other.

Why Order Matters :
-------------------
User Filter First and Then Map.
Filter will always be Executed if Doesn't Match the Condition also.
If We are Using any Stateless Operation like sorted Then The Order would be  Filter,Sorted,Map and then The Terminal Operation.

Reusing Streams :
-----------------
Java 8 Streams Cannot Be Reused and Closed Once We Call the Terminal Operation.
To Overcome This we have to Create a New Stream Chain For Every Terminal Operation.
We Have to Create a Stream Supplier to Construct a New Stream with all Intermediate Operations already Set Up.
		
************************************************************ 2.Collect ************************************************************

Collect is an extremely useful Terminal Operation to transform the elements of the Stream into different kind of ResultSet.
collect accepts Collector which consists of four different arguments ie supplier,accumulator and combiner and finisher.
collect is used to perform many operations like Summation,Grouping,Joining etc.
Java8 supports various built in Collectors via the Collectors Class.
For the most common operations we don't need to implement Collectors ourself.

1.To Transform stream of elements into another kind of Result ie basic collect

	List<Person> persons = Arrays.asList(new Person("Max", 18), new Person("Peter", 23), new Person("Pamela", 23),
				new Person("David", 12));
	List<Integer> result = persons.stream().map(Person::getAge).collect(Collectors.toList());
	
2.To group the elements of the Stream based on condition we use groupingBy.

	Student s1 = new Student("Ram", 20, "A");
	Student s2 = new Student("Shyam", 22, "B");
	Student s3 = new Student("Mohan", 22, "A");
	Student s4 = new Student("Mahesh", 20, "C");
	Student s5 = new Student("Krishna", 21, "B");
	List<Student> list = Arrays.asList(s1, s2, s3, s4, s5);
	Map<String, List<Student>> result = list.stream().collect(Collectors.groupingBy(Student::getClassName));
	List<Student> results = result.entrySet().stream().map(Map.Entry::getValue).flatMap(List::stream).collect(Collectors.toList());
	results.forEach(s -> System.out.println(s));

3.Collectors are extremely versatile .We can also create aggregations on the stream ofelements.

	List<Integer> list = Arrays.asList(1,2,3,4);
		Double average=list.stream().collect(Collectors.averagingInt(number->number*2));
		
	List<Integer> integerArray=Arrays.asList(25,36,81);
		IntSummaryStatistics statistics=integerArray.stream().collect(Collectors.summarizingInt(number->number+number));

joining :
---------
We can convert the List into String format that can be passed as argument to IN parameter of SQL Statement.
This can be done by using joining method of Collectors Class.
To the joining() we can pass the delimiter,prefix and suffix too in concatenation.

	List<String> names=Arrays.asList("Ram","Shyam","Shiv","Mahesh");
	String result=names.stream().collect(Collectors.joining("','", "['", "']"));
	System.out.println(result);

Collect to Map :
----------------
In order to transfrom the stream of elements into Map,we have to specify both keys and values.
Here keys must be unique otherwise we get IllegalStateException.

	List<Person> list = new ArrayList<>();
	list.add(new Person("Mohan", 100));
	list.add(new Person("Sohan", 200));
	list.add(new Person("Mahesh", 300));
	Map<Integer, String> result=list.stream().collect(Collectors.toMap(Person::getAge, Person::getName));


************************************************************ 3.FlatMap ************************************************************

Map Can Be Used to Transform the Objects of a Stream into another Type Of Objects.
Map is Limited Because Because Object Can Only Be Mapped to exactly Another Object.
We USe FlatMap to Transform One Object into Multiple Others or None at All.
FaltMap Transforms Each Element of The Stream into a Stream of Other Objects.

************************************************************ Reduce **************************************************************

Reduce Operation Combines all the Elements of The Stream into a Single Result i.e 
Reducing all the ELements of The Stream to Exactly One.
Reduce Method Performs Reduction on the Elements of The Stream.
Reduce can be Used to get the Sum of Numbers Stored in the Collection,Concatenate the String with the Separator.

Java 8 Supports 3 Different Kind of reduce() Methods.

First :
First Reduce Method accepts a Binary Operator Accumulator Function i.e BiFunction where Both Operands Share The Same Type.
BiFunctions are Like Functions But Accept Two Arguments.

Second :
Second Reduce Method accepts Both an Identity Value and a Binary Operator Accumulator.
This Way Can be Used to Construct a New Object from the Other Objects of the Stream.

Third:
Third Reduce Method Accepts Three Parameters i.e Combiner Type Binary Operator,Identity Operator
and Binary Operator Accumulator Function.
Here Identity Value Type is Not Restricted to Particular Object.
