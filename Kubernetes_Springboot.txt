1.Run & Deploy Spring Boot Application in K8s cluster       				(Java Techie)     		[24-AUG-2024]  (Done)
2.Run & Deploy Spring Boot Application in K8s Cluster using yaml			(Java Techie)     		[06-SEP-2024]  (Done)


################################################### 1.Run & Deploy Spring Boot Application in K8s cluster (Java Techie)  ################################

https://medium.com/@javatechie/kubernetes-tutorial-run-deploy-spring-boot-application-in-k8s-cluster-using-yaml-configuration-3b079154d232


Install Minikube which is a single node kubernetes cluster.
Create the Spring boot application with Dockerfile.
Dokcerize the Spring boot application and create an image for Spring boot application.

Now we need to run the particular image inside pod.
For that we need to create Deployment object.
Deployment are Kubernetes objects that are used for managing the pods.
We can describe Deployment object using yml file or we can directly use the command prompt.

	kubectl create deployment springboot-k8s --image=srinivassankoji/springboot-docker:1.0
	
Then it will create the Deployment object.
To verify it we need to run the command

	kubetcl get deployment
	
To verify the spring boot application is running inside the pod, run the command

	kubectl logs springboot-k8s-774477f994-z4shk(pod name)
	
Now the application is running inside the pod.
To access the application from outside we need to expose it through service object.
To create a service object we need to expose the deployment with the specific service type.

	kubectl expose deployment springboot-k8s --type=NodePort --port=8080
	
This will map port 8080 of the container to a NodePort i.e. dynamically assigned port between 30000 and 32767.
To verify the service has created or not run the command

	kubectl get service
	
To get the endpoint as we have only single pod

	minikube service springboot-k8s --url
	http://127.0.0.1:50215/docker
	
Note :
------
To see the spring boot application in kubernetes dashboard we run the command

	minikube dashboard


################################### 2.Run & Deploy Spring Boot Application in K8s Cluster using yaml (Java Techie) ##################################

To copy the local image to minikube, run the below command in windows powershell.

	& minikube -p minikube docker-env | Invoke-Expression
	docker build -t spring-boot-docker-yaml:1.0 .
	
create the Deployment

	kubectl apply -f deployment.yml

verify the Deployment and pods are created or not using the commands

	kubectl get deployments
	kubectl get pods
	
To watch the Container creation in the Pods, use the command

	kubectl get pods -w
	
To watch the application logs inside the container

	kubectl logs spring-boot-docker-yaml-76b765866-jd7xm(pod name)
	
To expose the application outside the Pod we create the Service.
Kubernetes service plays the role of service discovery using selectors and labels,load balance between the pods.

Deployment.yml :
----------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-docker-yaml
  labels:
    app: spring-boot-docker-yaml
spec:
  replicas: 3
  selector:
    matchLabels:
      app: spring-boot-docker-yaml
  template:
    metadata:
      labels:
        app: spring-boot-docker-yaml
    spec:
      containers:
        - name: spring-boot-docker-yaml
          image: spring-boot-docker-yaml:1.0
          ports:
            - containerPort: 8080
			
Service.yml :
-------------
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-docker-yaml-service
spec:
  selector:
    app.kubernetes.io/name: spring-boot-docker-yaml
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 9376
  type: NodePort
  
Using the Kubectl command to expose the service

	kubectl expose deployment spring-boot-docker-yaml --type=NodePort --port=8080
  
To run the Application in the Browser, run the command

	http://192.168.49.2:31646/yaml/kubectl

To check the application is accessible from the pod we use the command

	kubectl exec -it spring-boot-docker-yaml-7b7c5b9f78-2q45p -- curl http://localhost:8080/yaml/kubectl
	
To verify that the service is correctly routing traffic to the pods by checking the service's endpoints.
Here we should see IPs of the pods and the corresponding port (8080). 

	kubectl get endpoints spring-boot-docker-yaml
	




	


	




	




