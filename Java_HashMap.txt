1.HashMap - Internal  						(DZone Shubham Bansal)   			[22-JAN-2021]  (Done)
2.HashMap - Internal 						(howtodoinjava)   					[22-JAN-2021]  (Done)
3.HashMap – Custom Key Design               (howtodoinjava)   					[21-JAN-2021]  ()
4.HashMap – Synchronize HashMap             (howtodoinjava)   					[21-JAN-2021]  ()
5.HashMap – Merge HashMaps                  (howtodoinjava)   					[26-AUG-2021]  (Done)
6.HashMap – Compare HashMaps                (howtodoinjava)   					[26-AUG-2021]  (Done)

7.HashMap – Iterations                      (howtodoinjava)   					[21-JAN-2021]  ()
8.HashMap – Cloning                         (howtodoinjava)   					[21-JAN-2021]  ()
9.HashMap - Internal  						(javaconceptoftheday)   			[21-JAN-2021]  ()
10.HashMap vs ConcurrentHashMap				(javaconceptoftheday)   			[21-AUG-2021]  ()
11.Initial capacity vs Load Factor			(javaconceptoftheday)   			[25-AUG-2021]  (Done)
12.HashSet Internal							(javaconceptoftheday)   			[23-AUG-2021]  (Done)
13.HashMap vs HashTable						(javaconceptoftheday)   			[26-AUG-2021]  (Done)
14.HashMap Programs & Examples	(15)		(javaconceptoftheday)   			[26-AUG-2021]  (Done)
15.ConcurrentHashMap Internal				(DZone Arun Pandey)   				[26-AUG-2021]  (Done)
16.ConcurrentHashMap Internal				(javahungry)   						[23-AUG-2021]  (Done)
17.HashMap vs ConcurrentHashMap			    (Medium Chinmay Venkata Sabbam)   	[21-AUG-2021]  (Done)
18.Collission in HashMap					()
19.HashMap Changes in Java 8				(nagarro)

**************************************************************** 1.HashMap Internal  (DZone Shubham Bansal) ***************************************

HashMap is used to store key value pairs.
HashMap works on the principle of hashing.
Hashing is a way of assigning a unique code for an object afetr applying any formula/algorithm on its properties.

How Hashmap Calculates the Index of a Bucket :
----------------------------------------------
HashMap maintains an Array to store key value pairs.
Each entry stored inside an Array is called Bucket Location.
Whenever we store or retrieve any key value pair,HashMap calculates the index of the bucket for each and every operation.
Key object is used to calculate the index of the Bucket.
Hash value is calculated using hash(key) i.e private method of HashMap.

	final int hash(Object key)
	
This method returns the hash value of the key.
Also If the hash value is too large then it converts into a smaller hash value.

Note :
------
If the hash value of key object returns an Integer that is greater than the size of an Array then it throws ArrayIndexOutOfBoundsException.
To handle this situation HashMap reduces the hash value between 0 and n-1 using an expression.

	index=hash(key) & (n-1)
	
Now the index value generated is used by the HashMap to identify the Bucket Location and can never generate exception as the index value is always between 0 to n-1.

What put()does :
----------------
First It checks for the key object.
If the key is null then then value is stored in table[0] because hashCode for null is always 0.
When we try to insert other element,hashValue is calculated by calling hashCode() on the key object.
Now the generated hashValue is used to identify the Bucket Location and store the Entry object into an Array.
JDK designers assumed that there might be some poorly written hashCode() function that can return very high or very low hashCode value.
To resolve this issue they introduced another hash() function and passed the key object hashCode to this hash() function to bring the hashValue in the range of Array Index Size.

How Collisions are resolved :
-----------------------------
As we know that two unequal objects can have the same hashCode ie Two different objects will be stored in the same Bucket Location and the answer is LinkedList.
Entry class has an attribute "next".
This attribute always points to the next object in the chain.
This is the exactly the behavior of LinkedList.

Entry objects are stored in the form of LinkedList.
When an Entry object needs to be stored in a particuar Index,HashMap checks whether there is already Entry present in the index.
If no Entry is present in the index then Entry object is stored in that index.

If there is an Entry object sitting on that calculated index then its next attribute is checked.
If it is null then the current Entry object becomes the next node in the LinkedList.
If the "next" variable is not null,the procedure is followed untill the next is evaluated as null.

If we add an Entry object with the same key that is already present in the index,
HashMap calls the equals() on the key object for each Entry.

All the Entry objects in the LinkedList will have the same hashCode but equals() will test for true equality.
If both key objects are equal then the value object will be replaced.

************************************************ 2.HashMap - Internal  (howtodoinjava)  *********************************************

1.What is Hashing :
-------------------
HashMap works on the principle of hashing.
Hashing is a way of assigning a unique code for any object after applying any formula/algorithm on its properties.
Hash function should return the same hashCode each and every time when the function is applied on the same or equal objects.
Two equal objects must produce the same hashCode consistently.

Note :
------
All objects in Java inherit default implementation of hashCode() defined in Object class.
This hashCode() produces hashCode by typically converting the internal address of the object into an Integer.
Thus producing differrent hashCode for different objects.

2. Entry class in HashMap :
---------------------------
Map by definition is an Object that maps keys to values.
There must be some mechanism in HashMap to store this key value pair.
HashMap has a nested class Entry to insert key value pair.

	static class Entry<K,V> implements Map.Entry<K,V>
	{
		final K key;
		V value;
		Entry<K,V> next;
		final int hash;
	}

3.How HashMap.put() methods works :
-----------------------------------
Instances of an Entry class are stored inside Array.
HashMap defines this variable as 

	transient Entry[] table;
	
	public V put(K key,V value)
	{
		if(key==null)
		return putForNullKey(value);
		int hash=hash(key.hashCode());
		int i=indexFor(hash,table.length);
		for(Entry<K,V> e=table[i];e!=null;e=e.next)
		{
			Object k;
			if(e.hash==hash && (key.equals(k) || key == (e.key))
			{
				V oldvalue=e.value;
				e.value=value;
				e.recordAccess(this);
				return oldvalue;
			}
		}
		modCount++;
		addEntry(hash,key,value,i);
		return null;
	}

4.What put() method does  :
---------------------------
First key object is checked for null condition.
If the key is null then entry object will be stored in table[0] position because hashCode for null is always 0.

	if(key==null)
	return putForNullKey(value);
			
When we try to insert another Entry object,first it calculates the hashcode() on the key object.
JDK designers assumed that there might be poorly written hashCode() function that may return higher value or lower hashCode value.

	key.hashCode()
	
To resolve this issue they have implemented hash() that return the hashValue in the range of Array index size.
	
	int hash=hash(key.hashCode());
	
Now indexFor(hash,table.length) is used to calculate the index position for storing the Entry object.

	int i=indexFor(hash,table.length);
	
How collisions are resolved  :
-------------------------------
As we know that two unequal objects have the same hashcode.
Two different objects can have the same hashcode and the answer is LinkedList.

Entry class has an attribute "next".
This always points to the next object in the chain.

whenever an Entry object needs to be stored in a particular index,First it checks If the object is already present or not.
If the object is not present then the Entry object will be stored in that index.
If the object is present in that calculated index,its next attribute is checked.
if the next attribute is null then the Entry object will become the next node in the LinkedList.
If the next variable is not null,procedure is followed until the next variable is null.

If we try to insert the Entry object with the same key value,after determinig the index position for that Entry object,
while iterating over LinkedList HashMap will call the equals() on the key object.
If both the key objects are same then value object will be replaced with the new value.
 
5.How HashMap.get() methods works  :
------------------------------------
Whenever we call get(key) i.e calling get() by passing key object as an argument
First it calls the hashCode() on the key object and the result is passed as an argument to the hash().
Now the generated hashvalue is passed as an argument for indexFor() i.e 

	int index =indexFor(hash,table.length);
	
Now HashMap will identify the exact Entry object using the index and it simply returns the value object stored inside the Entry object.
If no match is found get() returns null.

6.Key notes on internal working of HashMap :
--------------------------------------------
HashMap is DataStructure that can be used to store key value pair as an Entry object in a an Array.
Particular index location in an Array is called Bucket.
Key object hashCode() is used to calculate the index location of an Entry object.
Key object equals() is used to identify the uniqueness of the keys in the Map.
hashCode for null is always 0 and such Entry object will be stored inside 0 index in an Array.

7.HashMap improvements in Java 8 :
----------------------------------
As part of the performance improovement of HashMap in Java 8,LinkedList is replaced by BalancedTree to store the Entry objects in the Array.

**************************************** 5.HashMap – Merge HashMaps (howtodoinjava) **********************************************************

/* Map One*/
		HashMap<Integer, String> map1 = new HashMap<>();
		 
		map1.put(1, "A");
		map1.put(2, "B");
		map1.put(3, "C");
		map1.put(5, "E");
		 
		/* Map Two */
		HashMap<Integer, String> map2 = new HashMap<>();
		 
		map2.put(1, "G"); 
		map2.put(2, "B");
		map2.put(3, "C");
		map2.put(4, "D");  
		
We can merge HashMap's by using putAll().
As we know that HashMap does not allow duplicate keys.
When we merge the maps in this way Duplicate Key's in map1 the value is overwritten by value for the same key in map2.

		map1.putAll(map2); // {1=G, 2=B, 3=C, 4=D, 5=E}

If we don't want to loose the data and and merge the Values when the duplicate Keys are present we use merge() in Java 8.

		map2.forEach((key,value) -> map1.merge(key,value, (v1,v2) -> v1.equalsIgnoreCase(v2)?v1:v1+","+v2)); // {1=A,G, 2=B, 3=C, 4=D, 5=E}

**************************************** 6.HashMap – Compare HashMaps (howtodoinjava) ********************************************************

We can compare two HashMap's in Java by Keys,Values,and Key-Value Pairs.

			HashMap<Integer, String> map1 = new HashMap<>();
		  
	        map1.put(1, "A");
	        map1.put(2, "B");
	        map1.put(3, "C");
	         
	        //Same as map1
	        HashMap<Integer, String> map2 = new HashMap<>();
	 
	        map2.put(3, "C");
	        map2.put(1, "A");
	        map2.put(2, "B");
	         
	        //Different from map1
	        HashMap<Integer, String> map3 = new HashMap<>();
	 
	        map3.put(1, "A");
	        map3.put(2, "B");
	        map3.put(3, "C");
	        map3.put(4, "D");

2.Compare HashMap for same Key-Value Pairs :
--------------------------------------------
By default HashMap.equals() compares two HashMap's by Key-Value pairs.
If both the HashMap instances must have exactly same Key Value pairs and both must be of same size.

			System.out.println(map1.equals(map2));  //true
	        System.out.println(map1.equals(map3));  //false

Note :
------
Order of Key value pairs can be different and it does not play any role in comparison.

2.Compare HashMap for same Keys :
---------------------------------
Two HashMap's will be equal If they have same set of Keys.

			System.out.println(map1.keySet().equals(map2.keySet())); //true
	        System.out.println(map1.keySet().equals(map3.keySet())); //false

3.Compare HashMap for same Values :
-----------------------------------
Two HashMap's will be equal If they have same set of Values.
HashMap allows duplicate Values.
We can compare two HashMap's with Duplicates or without Duplicates.

			//Compare HashMap with Values - Duplicates are allowed
	        System.out.println(new ArrayList<>(map1.values()).equals(new ArrayList<>(map2.values()))); // false
	        System.out.println(new ArrayList<>(map1.values()).equals(new ArrayList<>(map3.values()))); //false
			
			//Compare HashMap with Values - Duplicates are Not allowed
	        System.out.println(new HashSet<>(map1.values()).equals(new HashSet<>(map2.values()))); //true
	        System.out.println(new HashSet<>(map1.values()).equals(new HashSet<>(map3.values()))); //false

**************************************** 11.Initial capacity vs Load Factor (javaconceptoftheday) ********************************************

HashMap is DataStructure that can be used to store key value pair as an Entry object in a an Array.
Particular index location in an Array is called Bucket.
The capacity of a HashMap is the number of Buckets in the Table.
Initial Capacity is the capacity of the HashMap at the time of creation ie 16.
Default initial capacity is 16 and default Load Factor is 0.75f.
Capacity is doubled each time when it reaches the Threshold.
Threshold of a Hashmap is 

	Threshold = (CurrentCapacity)*(Load Factor)
	
ie  Threshold = 16*0.75 =12
Capacity of HashMap is doubled after the 12th Entry is added to the HashMap.

How Initial Capacity And Load Factor Affect Performance Of HashMap :
--------------------------------------------------------------------
When HashMap reaches its Threshold rehashing takes place.
Rehashing is the process where new HashMap Object with new capacity is created and copies all the Old elements into the new HashMap by recalculating hashCode.
Process of Rehashing is both space and time consuming.
Always choose the initial Capacity and Load Factor such that they minimize the number of rehashing Operations.

*******************************************************************  12.HashSet Internal (javaconceptoftheday)  *********************************************************

HashSet internally uses HashMap to store its objects.
Whenever we create a HashSet object,one HashMap object associated with it is also created.
HashMap object is used to store the elements we enter in the HashSet.
The elements we stored inside the HashSet are stored as Keys and the value associated with those keys will be a Constant.
Every constructor of HashSet class internally creates one HashMap object.

	private transient HashMap<E,Object> map;
	
	public HashSet()
	{
		map=new HashMap<>();
	}
	
	public HashSet(int initialCapacity)
	{
		map=new HashMap<>(initialCapacity);
	}
	
	public HashSet(int initialCapacity,float loadFactor)
	{
		map=new HashMap<>(initialCapacity,loadFactor);
	}
	
	
How HashSet Works Internally  :
-------------------------------
Whenever we insert an element in the HashSet using add() method It actually creates an entry in the backing HashMap object 
with the element we specified as it's key and constant called PRESENT as it's value.
"PRESENT" in HashSet is defined as 

	private static final Object PRESENT=new Object();

	public add(E e)
	{
		map.put(e,PRESENT)=null;
	}
	
add() of HashSet internally calls put() of backing HashMap object by passing the element as key and constant "PRESENT" as its value.
remove() works in the same manner.

	public remove(E e)
	{
		map.remove(e)=PRESENT;
	}
	
***************************************** 13.HashMap vs HashTable(javaconceptoftheday) ****************************************************************

1.HashMap is not ThreadSafe where as HashTable is Threadsafe.We can make the HashMap as ThreadSafe by using Collections.synchronizedMap().
2.HashMap and HashTable both implements Map Interface but HashMap extends AbstractMap Class where as HashTable extends Dictionary Class.
3.HashMap allows null value as key only once where as HashTable does not allow null key.
4.HashMap returns Iterator which can be used to traverse over the elements of the HashMap where as
HashTable returns Iterator as well as Enumeration which can be used to traverse over the elements of the HashTable.
5.Iterator returned by HashMap is fail-fast and throws ConcurrentModificationException where as Iterator returned by HashTable is
fail-safe and does not throw any Exception.
6.As HashTable is Synchronized this makes HashTbale slower than HashMap.
7.HashTable is legacy Class and ConcurrentHashMap is better option than HashTable.
8.HashMap is always recomended to use If we don't want ThreadSafety.
If we want Thread Safety we can use either ConcurrentHashMap or make the HashMap Thread Safe by using Collections.synchronizedMap().

***************************************** 14.HashMap Programs & Examples(15) (javaconceptoftheday)*****************************************************

Done

***************************************** 15.ConcurrentHashMap Internal(DZone Arun Pandey)	***********************************************************

ConcurrentHashMap is similar to HashMap except that ConcurrentHashMap offers internally maintained concurrency.
We do not need to have synchronized block when accessing ConcurrentHashMap in MultiThreaded Application.
ConcurrentHashMap allows concurrent access of the Map ie each part of the Map is called Segment and Segment is only getting locked while adding or updating the Map.
ConcurrentHashMap allows concurrent Threads to read the value without locking at all.
ConcurrentHashMap has a default capacity of 16 ie 16 Threads are allowed to work on the ConcurrentHashMap at at time.
	
***************************************** 16.ConcurrentHashMap Internal	(javahungry)*******************************************************************

ConcurrentHashMap does not allow null value and null key because If map.get(key) returns null we can't detect whether the key explicitly maps to null or key is not mapped.
In a non Concurrent Map we can check this via map.contains(Key) but in a ConcurrentMap Map might have changed between the Calls.

***************************************** 17.HashMap vs ConcurrentHashMap (Medium Chinmay Venkata Sabbam) *********************************************

Eventhough both HashTable and ConcurrentHashMap are ThreadSafe,HashTable has the poor performance in Multi Threaded Environment.
In case of HashTable If one Thread allows to perform any kind of Operation,the Other Thread has to wait until the completion of the Thread.
HashTable is synchronized ie It acquires the lock on complete HashTable Object.
To overcome the inefficiency of the HashTable Java introduces ConcurrentHashMap.


 

