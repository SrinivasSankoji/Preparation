1.Dependency Injection Design Pattern           							(DZone)  			[16-AUG-2021]  (Done)
2.Spring IOC Container Overview												(JavaGuides)		[16-AUG-2021]  (Done)
3.Spring Bean Life Cycle													(mrbool)			[25-AUG-2021]  (Done)
4.Spring IOC Container Java Config Example									(JavaGuides)		[16-AUG-2021]  (Done)
5.Spring IOC Container XML Config Example                                   (JavaGuides)        [16-AUG-2021]  (Done)
6.Spring BeanFactory Interface Example                                      (JavaGuides)        [16-AUG-2021]  (Done)

7.Guide to Dependency Injection in Spring                                   (JavaGuides)        [17-AUG-2021]  (Done)
8.Spring Setter Injection  Example                                          (JavaGuides)        [17-AUG-2021]  (Done)
9.Spring Constructor Injection  Example                                     (JavaGuides)        [17-AUG-2021]  (Done)
10.@DependsOn Annptation Example                                            (JavaGuides)        [17-AUG-2021]  (Done)

11.Guide to Spring Bean Scopes                                              (JavaGuides)        [17-AUG-2021]  (Done)
12.Singleton and Prototype Scopes                                           (JavaGuides)        [17-AUG-2021]  (Done)
13.InitializingBean and DisposableBean Example                              (JavaGuides)        [17-AUG-2021]  (Done)
14.initMethod and destroyMethod Attributes Example                 			(JavaGuides)        [17-AUG-2021]  (Done)
15.@Scope annotation with Prototype Scope Example                           (JavaGuides)        [17-AUG-2021]  (Done)
16.@Scope annotation with Singleton Scope Example                           (JavaGuides)        [17-AUG-2021]  (Done)

17.Spring Annotation Based Container Configuration                          (JavaGuides)        [18-AUG-2021]  (Done)
18.Spring @Autowired Annotation with Example                                (JavaGuides)        [18-AUG-2021]  (Done)
19.@Primary Annotation Example                                              (JavaGuides)        [18-AUG-2021]  (Done)
20.@PostConstruct and @PreDestroy Example                                   (JavaGuides)        [18-AUG-2021]  (Done)
21.@Qualifier Annotation Example                                            (JavaGuides)        [18-AUG-2021]  (Done)

22.Spring Java Based Configuration Basics                                   (JavaGuides)        [19-AUG-2021]  (Done)
23.Spring Java Based Configuration Example                                  (JavaGuides)        [19-AUG-2021]  (Done)
24.@Bean Annotation with Example                                     		(JavaGuides)        [19-AUG-2021]  (Done)
25.@Configuration Annotation with Example                            		(JavaGuides)        [19-AUG-2021]  (Done)
26.@PropertySource Annotation with Example                           		(JavaGuides)        [19-AUG-2021]  (Done)
27.@Import Annotation with Example                                          (JavaGuides)        [19-AUG-2021]  (Done)
28.@ImportResource Annotation Example                                       (JavaGuides)        [19-AUG-2021]  (Done)
29.@Lazy Annotation Example                                                 (JavaGuides)        [19-AUG-2021]  (Done)
30.15 Spring Core Annotations                                               (JavaGuides)        [19-AUG-2021]  (Done)
31.5 Types of Autowiring in Spring											(DZone)

************************************************** 1.Dependency Injection Design Pattern (DZone) ***********************************************

IOC is a principle which states that we don't create the Objects manually instead we describe that how they should be created.
Spring Container will instantiate the required classes.
IOC is a principle which is implemented using Dependency Injection Design Pattern.

Dependecny Injection is a design pattern using which we remove the hard coded dependencies and make our Application loosely coupled,extendable and maintainable.
Dependency Injection can be implemented by using
1.Runtime Polymorphism
2.Has a Relationship

In Spring Dependency Injection can be done in two ways
Setter Injection
Constructor Injection

public interface QuizMaster {

	public String popquestion();
}

public class StrutsQuizMaster implements QuizMaster {

	@Override
	public String popquestion() {
		return "Are you new to Struts ?";
	}
}

public class SpringQuizMaster implements QuizMaster {

	@Override
	public String popquestion() {
		return "Are you new to Spring ?";
	}
}

public class QuizMasterService {

	/**
	 * Traditional Way of Injecting the Dependencies
	 */
	private QuizMaster quizMaster = new SpringQuizMaster();

	public void askquestion() {
		System.out.println(quizMaster.popquestion());
	}
}

public class QuizMasterController {

	public static void main(String[] args) {
		QuizMasterService quizmasterservice = new QuizMasterService();
        quizmasterservice.askquestion();
    }
}

Here the Architecture is tightly coupled.
We created the instance of QuizMaster in the QuizMasterService related to Spring.
If we want to create the instance of QuizMaster in the QuizMasterService related to Struts we need to do the changes in QuizMasterService.
We can avoid this by using dependency injection design pattern.
In the above example we are directly creating an Object of the QuizMaster in the QuizMaster Service.
Spring Container will do the Job for us.
Instead of hardcoding we allow the Spring Container to inject the required dependencies.
We can inject the dependencies using Setter Injection and Constructor Injection.

public class QuizMasterService {

	QuizMaster quizMaster;	
	/**
	 * Injecting the Dependencies using Setter Injection
	 */
	public void setQuizMaster(QuizMaster quizMaster) {
		this.quizMaster = quizMaster;
	}
	
	public void askquestion() {
		System.out.println(quizMaster.popquestion());
	}
}

Now the value for the quizMaster will be set using setQuizMaster().
QuizMaster object will never instantiated in the QuizMasterService but we will access it.

Define the beans.xml

		<bean id="springquizmaster" class="com.ioc.dzone.service.SpringQuizMaster"></bean>
		<bean id="strutsquizmaster" class="com.ioc.dzone.service.StrutsQuizMaster"></bean>
		<bean id="quizmasterservice" class="com.ioc.dzone.service.QuizMasterService">
			<property name="quizMaster">
				<ref local="springquizmaster"/>
			</property>
		</bean>

************************************************** 2.Spring IOC Container Overview **************************************************

Spring Framework provides powerful Container to manage the Components.
Container is based on Inversion of Control Principle and is implemented using Dependency Injection Design Pattern.
Component only needs to choose a way to accept the resources and Container will deliver the resource to the Components.

Spring Container is responsible for instantiating the Spring beans.
The Container gets its instructions on what Objects to instantiate by reading Configuration Metadata.
Configuration metadata is represented in XML,Java Annotations or Java Code.
Responsibilities of IOC Container are 

Instantiating the Bean.
Wiring the Beans together.
Assembling the Beans together.
Manging the Beans Lifecycle.

Spring Framework provides two types of Containers.
BeanFactory Container
ApplicationContext Container

BeanFactory is the root Interface of Spring IOC Container.
ApplicationContext is the Child Interface of BeanFactory that provides the feature of Spring AOP,I18N etc.
The Main difference between BeanFactory and ApplicationContext is that BeanFactory Container instantiates the bean whenever we call the getBean() whereas
ApplicationContext Conatiner instantiates the bean whenever the Conatiner is started and it doesn't wait for the getBean() to be called.

Configuration Metadata :
------------------------
Configuration Metadata tells the Spring Container to instantiate,configure and assemble the Spring beans in our Application.
There are three ways we can supply Configuration Metadata to Spring IOC Container.
1.XML based Configuration
2.Annotation based Configuration
3.Java based Configuration

Spring provides many ApplicationContext Interface implementations.

FileSystemXmlApplicationContext
ClasspathXmlApplicationContext
AnnotationConfigApplicationContext

If we are using Spring in Stand alone Java Application and using XML or Annotations then
we can use this implementation Class to initialize the Container and get the bean Objects.

Note :
AnnotationConfigWebApplicationContext and XmlWebApplicationContext are use for Web Applications.

Spring Container Creation :
---------------------------
To create a Spring Container using BeanFactory

	BeanFactory factory=new XMLBeanFactory(new ClassPathResource("applicationContext.xml"));
	
To create a Spring Container using XML 

	ApplicationContext context=new ClasspathXmlApplicationContext("applicationContext.xml");
	
To create a Spring Container using Configuration File

	AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(AppConfig.class);
	
Retrieve Bean from Spring Container :
-------------------------------------
Both BeanFactory and ApplicationContext interface provides getBean() to retreive bean from Spring Container.

	ApplicationContext context=new ClasspathXmlApplicationContext("applicationContext.xml");
	HelloWorld object=(HelloWorld)conext.getBean("helloWorld");
	
	XMLBeanFactory factory=new XMLBeanFactory(new ClassPathResource("applicationContext.xml"));
	HelloWorld object=(HelloWorld)factory.getBean("helloWorld");
	

BeanFactory vs ApplicationContext in Spring :
---------------------------------------------	
Difference between BeanFactory and ApplicationContext interface is that
BeanFactory based Container instantiates the Bean whenever we call the getBean() ie Lazy Loading whereas
ApplicationContext based Container instantiates the Bean whenever the Container is started ie Eager Loading.

************************************************** 3.Spring Bean Life Cycle (mrbool) ***********************************************************

Most important feature of Spring is Bean based Approach.
Spring Bean is defined by using Sterotype Annotation or XML based Configuration.
When we run the Application Spring Container gets created.
Spring Container creates an instance of the beans as per the Configuration and inject the dependencies.
As soon as the Bean is created it will be loaded into ApplicationContextt and JVM Memory.
When the Bean is instantiated it might require to perform some initialization to get into usable state.
Similarly when the Bean is no longer required and is removed from the Container.
There are some other activities between initialization and destruction phase.
Following are the stages of the Bean's lifecycle.

1.Instantiate 
Spring Container instantiats the Bean
2.Populate properties 
Spring Container inject's the Bean properties
3.Set Bean Name
Spring Container sets the Bean Name If the Bean implements BeanNameAware interface.
Spring Container passes the BeanId to the Bean Name.
4.Set Bean Factory
Spring Container sets the BeanFactory If the Bean implements BeanFactoryAware interface.
Spring Conatiner passes the BeanFactory to the setBeanFactory().
5.Pre Initialization :
This stage is also called Pre Initizlization.
If there are any BeanPostProcessors then Spring Container calls the postProcessBeforeInitialization()
6.Initialization
If the Bean implements initializingBean then it calls afterProeprtiesSet().
If the Bean has init() declaration then sepcified initialization method is called.
7.Post Initialization :
If there are any BeanPostProcessors then Spring Container calls the postProcessAfterInitialization()
8.Ready to Use :
Now the Bean is ready to use by the Application.
9.Destroy :
Bean is destoroyed during this Stage.
If the Bean implements DisposableBean the Spring Container calls the destroy().
If the custom destroy method is defined then Container calls the specifc method.

************************************************** 4.Spring IOC Container Java Config Example **************************************************

Done

************************************************** 5.Spring IOC Container XML Config Example ***************************************************

Done

************************************************** 6.Spring BeanFactory Interface Example  *****************************************************
 
Done 
 
************************************************** 7.Guide to Dependency Injection in Spring ****************************************************

Dependency Injection is a design pattern using which we remove the hard coded dependencies and make our Application loosely coupled,maintainable and extendable.
Using Dependency Injection we define the dependencies through Constructor arguments,arguments to a factory method or properties that are set on the Object Instance.
The Container then inject those dependencies when it creates the Bean.
The process is fundementally inverse hence the name Inversion of Control.
The Bean itself is controlling the instantiation or location of its dependencies on its own by using direct Construction of Classes or Service Locator Pattern.

Advantages of Dependency Injection :
------------------------------------
1.Code is Cleaner with DI Principle and decoupling is more effective when Objects are provided with their Dependencies.
2.Class becomes easier to test when dependencies are on interfaces or abstract base classes.

DI exists in two Major variants
Setter based Dependency Injection
Constructor based Dependency Injection

************************************************** 8.Spring Setter Injection Example  ********************************************************

Setter based Injection is accomplished by the Container calling setter methods on our beans to instantiate your bean.

	@Service("SMSService")
	public class SMSService implements MessageService{

		@Override
		public void sendMessage(String message) {
			System.out.println("SMS "+message);
		}
	}
	
	@Service("EmailService")
	public class EmailService implements MessageService{

		@Override
		public void sendMessage(String message) {
			System.out.println("Email "+message);
		}
	}
	
	@Service("TwitterService")
	public class TwitterService implements MessageService{

		@Override
		public void sendMessage(String message) {
			System.out.println("Twitter "+message);
		}
	}
	
To call the MessageService via Setter Injection make any one of the MessageService Implemented class as @Primary or use @Qualifier Annotation along with @Autowired Annotation

		@Service("TwitterService")
		@Primary
		public class TwitterService implements MessageService{

			@Override
			public void sendMessage(String message) {
				System.out.println("Twitter "+message);
			}
		}
		
					(or)
		
		@Component
		public class SetterBasedInjection {

			private MessageService messageService;

			@Autowired
			@Qualifier("TwitterService")
			public void setMessageService(MessageService messageService) {
				this.messageService = messageService;
			}
			
			public void processMessage(String message) {
				messageService.sendMessage(message);
			}
		}

		public class SetterInjectionController {
		public static void main(String[] args) {
			AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
					DependencyInjectionConfiguration.class);
			SetterBasedInjection bean=context.getBean(SetterBasedInjection.class);
			bean.processMessage("Setter Based Injection Example");
			context.close();
		}
	}
	
************************************************** 9.Spring Constructor Injection Example  *************************************************** 

Constructor based DI is accomplished by the Container invoking a Constructor with the number of arguments each representing a Dependency.
Create a Spring Configuration file ie ApplicationConfiguration which is annotated with @Configuration Annotation.
This is equivalent to XML Configuration without beans Definition.
Create the MessageService interface and provide more than two implementations for it.
If there are multiple implementations for MessageService interface and to avoid ambiguity we use @Qualifier Annotation.
To avoid decoupling always use interfaces or Abstract Classes as an instance variable and Constructor arguments.

	@Component
	public class ConstructorBasedInjection {
		private MessageService messageService;
		@Autowired
		public ConstructorBasedInjection(@Qualifier("TwitterService") MessageService messageService) {
			super();
			this.messageService = messageService;
		}
		public void processMessage(String message) {
			messageService.sendMessage(message);
		}
	}
	
	public class ConstructorInjectionController {
	public static void main(String[] args) {
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
				DependencyInjectionConfiguration.class);
		ConstructorBasedInjection constructorBasedInjection=context.getBean(ConstructorBasedInjection.class);
		constructorBasedInjection.processMessage("Constructor Injection ");
		context.close();
	}
	}
  
************************************************** 10.@DependsOn Annptation Example ************************************************************

@DependsOn annotation forces the Spring Container to initialize one or more beans before the bean which is annotated by @DependsOn annotation.
@DependsOn annotation may be used on any class directly or indirectly with annotated with @Component or methods annotated with @Bean.

	@Configuration
	public class DependsOnConfiguration {

		@Bean
		@DependsOn(value = { "secondBean","thirdBean"})
		public FirstBean firstBean() {
			return new FirstBean();
		}

		@Bean
		public SecondBean secondBean() {
			return new SecondBean();
		}

		@Bean
		public ThirdBean thirdBean() {
			return new ThirdBean();
		}
	}

************************************************** 11.Guide to Spring Bean Scopes   ***********************************************************

Spring Framework supports following Bean Scopes.

1.Singleton
Scopes a Single bean definition to Single Object instance per Spring Container.

2.prototype
Scopes a Single bean definition to any number of Object instances.

3.request
Scopes a Single bean definition to the lifecycle of a single HttpRequest.
Each HttpRequest has its own instance of a bean craeted.
Only applicable in the context of Web Aware Spring Application Context.

4.session
Scopes a Single bean definition to the life cycle of a HttpSession.
Only applicable in the context of Web Aware Spring Application Context.

5.application
Scopes a Single bean definition to the lifecycle of ServletContext.
Only applicable in the context of Web Aware Spring Application Context.

6.websocket
Scopes a Single bean definition to the lifecycle of a WebSocket.
Only applicable in the context of Web Aware Spring Application Context.

Singleton Scope :
-----------------
When we define a bean with Singleton Scope,Spring Container creates exactly one instance of the Object.
Here the Instance is stored in the Cache and all the subsequent requests for that bean will be returned from the Cache.
Spring Singleton beans are not ThreadSafe.
Default scope of Spring Bean is Singleton.

To define the bean as Singleton in the XML

	<bean id="" name="" scope="singleton"></bean>
	
To define the bean as Singleton at Bean Level :

	@Configuration
	public class AccountService
	{
		@Bean
		@Scope(value = ConfigurableBeanFactory.SCOPE_SINGLETON)
		public UserService userService()
		{
			return new UserService();
		}
	}
	
To define the bean as Singleton at Class Level :

When we define a bean with prototype scope,Spring Container creates a new instance every time when the request is made for that bean.
Use the Prototype scope for stateful beans and Singleton scope for stateless beans.

	@Service
	@Scope("prototype")
	public class UserService {

		private String name;
	}

Singleton beans with prototype-bean dependencies :
--------------------------------------------------

                          
************************************************** 12.Singleton and Prototype Scopes  *********************************************************

Done
                                     
************************************************** 13.InitializingBean and DisposableBean Example  ********************************************

In Spring,Spring Bean Lifecycle is managed by the Spring Container.
To interact with Container Management of the Bean Lifecycle we can implement InitializingBean and DisposableBean interfaces.
After the Container has performed the initialization of an instance ie all the properties have been set we need to call the afterProperties().
Before the Container is going to delete the bean we need to call the destroy().

Note:
@PostConstruct and @PreDestroy annotations are considered as a best practice for receiving lifecycle callbacks.
Using the above annotations means we are not coupled to spring specific interfaces.
             
************************************************** 14.@Bean’s initMethod and destroyMethod Attributes Example  *******************************

initMethod and destroyMethod can be used to perform certain actions after bean initialization or before bean destruction by the Container.
As we use init-method and destroy-method in XML Bean Configuration,same way we can use initMethod and destroyMethod in the Java Configuration.

	<bean id="" class="" init-method="init" destroy-method="destroy"></bean>

	@Bean(initMethod="init",destroyMethod="destroy")
	public DatabaseInitialization databaseInitialization()
	{
		return new DatabaseInitialization();
	}

************************************************** 15.@Scope annotation with Prototype Scope Example ******************************************

We use @Scope annotation to define the scope of a @Component Class or @Bean definition.
When a Spring bean is scoped as Prototype,Spring Container creates a new instance every time when a request is made for that bean.
we define the scope of a bean as Prototype using @Scope("prototype") or @Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE)

@Service
@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class UserService {

	private String name;
}

@Configuration
@ComponentScan("com.ioc.javaguides.singleton.model")
public class SingletonConfiguration {

	@Bean
	@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
	public UserService userService()
	{
		return new UserService();	
	}
}
           
************************************************** 16.@Scope annotation with Singleton Scope Example ******************************************

When a Spring bean is scoped as Singleton,Spring Container exactly creates one instance for that bean definition.
By Default Spring Container instantiates and initializes all the beans as Singleton.
we define the scope of a bean as Singleton by using @Scope("singleton") or @Scope(value=ConfigurableBeanFactory.SCOPE_SINGLETON)

@Service
@Scope(value=ConfigurableBeanFactory.SCOPE_SINGLETON)
public class UserService {

	private String name;
}

@Configuration
@ComponentScan("com.ioc.javaguides.singleton.model")
public class SingletonConfiguration {

	@Bean
	@Scope(value = ConfigurableBeanFactory.SCOPE_SINGLETON)
	public UserService userService()
	{
		return new UserService();	
	}
}

************************************************** 17.Spring Annotation Based Container Configuration  ****************************************** 

From Spring 2.5 it is possible to configure the dependency injection using Annotations.
Instead of XML to perform the bean wiring we can move the bean Configuration to the Component class itself using Annotations at Class Level,Method Level and Field Level.
Note :
Annotation Injection is performed before XML Injection.
Annotation wiring is not turned on Spring Container and we need to enable it in Spring COnfiguration File.

	<context:annotation-config>
	
Different Annotations provided by Spring are

@Required
@Autowired
@Qualifier
@Primary
@Resource
@PostConstruct and @PreDestroy

************************************************** 18.Spring @Autowired Annotation with Example ************************************************* 

We use @Autowired to mark dependency Injection which Spring is going to resolve and Inject.
We can use this Annotation at Constructor Level,Setter Level and Field Level.

Constructor Injection :
-----------------------

@RestController
public class CustomerController
{
	private CustomerService;
	
	@Autowired
	public CustomerController(CustomerService customerService)
	{
		this.customerService=customerService;
	}
}

Setter Injection :
------------------
@RestController
public class CustomerController
{
	private CustomerService customerService;
	
	@Autowired
	public void setCustomerService(CustomerService customerService)
	{
		this.customerService=customerService;
	}
}

Filed Injection :
-----------------
@RestController
public class CustomerController
{
	@Autowired
	private CustomerService customerService;
}

Arbitary Methods :
------------------
We can also apply @Autowired annotation to the method with arbitary names.
@RestController
public class CustomerController
{
	private CustomerService customerService;
	
	@Autowired
	public void prepare(CustomerService customerService)
	{
		this.customerService=customerService;
	}
}

Array Type :
------------
We can also apply @Autowired annotation to the method or annotation that expects an Array type.
	
	@Autowired
	private Movie[] customerService;
	
Typed Collections :
-------------------
We can also apply @Autowired annotation to the method or annotation that has a return type of Collection.
	
	@Autowired
	private List<Movie> movieService;
	
Note:
When we use @Autowired annotation by default dependency injection is mandatory.
We can make this as non mandatory by using required attribute.

@RestController
publci class CustmerController
{
	private CustomerService customerService;
	
	@Autowired(required=false)
	public void setCustomerService(CustomerService customerService)
	{
	this.customerService=customerService;
	}
}	
             
************************************************** 19.@Primary Annotation Example  ************************************************************** 

@Primary Annotation can be used to give a higher preference to a bean when there are multiple beans of the same type.
When we have multile beans of the same type we use @Qualifier("beanName") along with @Autowired Annotation.
Here @Qualifier won't applicable at the Configuration time.
To resolve this issue we use @Primary Annotation.
@Primary Annotation can be applied on any Class diretly or indirectly anootated with @Component or methods annotated with @Bean.

public interface MessageService {

	public void sendMessage(String message);
}

@Service("EmailService")
public class EmailService implements MessageService{

	@Override
	public void sendMessage(String message) {
		System.out.println("Email "+message);
	}
}

@Service("SMSService")
@Primary
public class SMSService implements MessageService{

	@Override
	public void sendMessage(String message) {
		System.out.println("SMS "+message);
	}
}
@Service("TwitterService")
public class TwitterService implements MessageService{

	@Override
	public void sendMessage(String message) {
		System.out.println("Twitter "+message);
	}
} 

public static void main(String[] args) {
		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
				ApplicationConfiguration.class);
		//ConstructorBasedInjection bean=context.getBean(ConstructorBasedInjection.class);
		//SetterBasedInjection bean=context.getBean(SetterBasedInjection.class);
		MessageService bean=context.getBean(MessageService.class); // @Primary Annotation Example
		bean.sendMessage("Setter Based Injection Example");
		context.close();
}
	
************************************************** 20.@PostConstruct and @PreDestroy Example  ***************************************************

@PostConstruct Annotation is used on a method that needs to be executed after the Spring Container has perfromed instantiation of an Object.
@PreDestroy Annotation is used on a method that needs to be executed before the instance is being removed by the Container.

	@PostConstruct
	public void init()
	{
	}
	
	@PostDestroy
	publci void destroy()
	{
	}
      
************************************************** 21.@Qualifier Annotation Example ************************************************************* 

@Qualifier can be used to resolve ambigious problems.
There may be scenarios where we can have more than one bean of the same type and want to wire only one of them.
This can be done by using @Qualifier along with @Autowired annotation.

************************************************** 22.Spring Java Based Configuration Basics *************************************************** 

@Bean Annotation is used to indicate that a method instantiates,configures and initializes a new object that has to be managed by the Spring Container.
We can use @Bean Annotated methods with any @Component Classes.
Most of the the times we use @Bean with @Configuration Classes.

Annotating a Class with @Configuration indicates that its primary purpose is a source of bean definitions.

We can create Spring Container by instantiating AnnotationConfigApplicationContext by passing Configuration Class.
This allows the complete XML free usage of the Spring Container.

We can also create Spring Container by instantiating AnnotationConfigApplicationContext with no argument Constructor.
Configure the Configuration classes by using register().
This is particulary useful when programatically building an AnnotationConfigApplicationContext.

@ComponentScan annotation enables auto component scanning in Java based Configuration. 

************************************************** 23.Spring Java Based Configuration Example **************************************************

We have used @Configuration and @Bean Annotations to develop Spring based Applications.
@Import annotation can be used to load the bean definitions from another Configuration class.

@Configuration
@ComponentScan("com.journaldev.ioc.qualifier.service")
@Import(ImportConfiguration.class)
public class QualifierConfiguration {

	@Bean(name = "emailService")
	public MessageService emailService() {
		return new EmailService();
	}

	@Bean(name = "smsService")
	public MessageService smsService() {
		return new SMSService();
	}
}

@Configuration
@ComponentScan("com.journaldev.ioc.qualifier.service")
public class ImportConfiguration {

	@Bean(name = "twitterService")
	public MessageService twitterService() {
		return new TwitterService();
	}
}
               
************************************************** 24.@Bean Annotation with Example  *********************************************************** 

@Bean is a method level Annotation and is a direct analog of XML element </bean>
@Bean Annotation supports some of the attributes such as init-method,destroy-method,autowiring and name.
We can use @Bean in the class annotated with @Configuration and @Component.

To declare a bean simply annotate a method with @Bean and It will be registered in the ApplicationContext of the type specified in the method return value.
By default bean name will be same as the Method name and we can change the Bean name by using name attribute.
We can also have the scope for the Bean definition and default scope is Singleton.

Note :
Single Bean can have multiple names ie also called as Bean Aliasing.
We use the name attribute of the Bean foe Bean aliasing.

************************************************** 25.@Configuration Annotation with Example ***************************************************

@Configuration Annotation indicates that a class has a @Bean definition methods.
So that Spring Container process the Classes and generate Spring beans to be used in the Application.

@ComponentScan can be used to automatically pick up all the Spring Components and all the Configuration Classes.
@Import Annotation can be used to load the Configuration Class into another Configuration Class.
If we have XML based Configuration then we can use @ImportResource Annotation to load XML Configuration Files.

************************************************** 26.@PropertySource Annotation with Example **************************************************

We can externalize the Configuration to a properties file using @PropertySource Annotation along with @Configuration Annotated Class.
We can read the Properties file and display the values using Environment and @Value Annotation.

spring.datasource.name=Oracle
spring.datasource.username=System
spring.datasource.password=Root
spring.datasource.driver-class-name=OracleDriver

@Configuration
@PropertySource("classpath:application.properties")
public class PropertySourceConfiguration {

	@Autowired
	private Environment environment;

	@Bean
	public DataSource datasource() {
		System.out.println(environment.getProperty("spring.datasource.name"));
		return null;

	}
}

Note :
We can also include multiple properties file using @PropertySources Annotation.
If the Properties is not found then it will throw FileNotFoundException.
To ignore the not found properties file we use ignoreResourceNotFound-true ie

	@PropertySource(value="classpath:application.properties",ignoreResourceNotFound=true)

************************************************** 27.@Import Annotation with Example  *********************************************************

@Import Annotation indicates one or more Configuration classes to import.
@Import Annotation can be declared at Class level or at metadata level.
    
************************************************** 28.@ImportResource Annotation Example ******************************************************* 

If XML or other non @Configuration Bean resources needs to be imported we use the @ImportResource Annotation.
If we want to load config.properties file then we can use @Propertysource Annotation to load respective properties file.

Note :
In Spring XML based Configuration we use <import> tag to load multiple Spring Configuration Files.

   
************************************************** 29.@Lazy Annotation Example  **************************************************************** 

Spring Container creates and initializes all the Singleton beans at the time of Application start up.
We can prevent this pre initialization of Singleton by using @Lazy Annotation.
@Lazy Annotation can be used on any Class annotated with @Component directly or indirectly or methods annotated with @Bean.

	@Bean
	@Lazy(value = true)
	public FirstBean firstBean() {
		return new FirstBean();
	}
	
	@Bean
	public SecondBean secondBean() {
		return new SecondBean();
	}   
	
	public static void main(String[] args) {
		AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(LazyConfiguration.class);
		FirstBean firstBean=context.getBean(FirstBean.class);
		firstBean.test();
		context.close();
	}
	
At the time of Application Startup Only SecondBean is loaded and when we call the getBean() on FirstBean then FirstBean is loaded into ApplicationContext.

************************************************** 30.15 Spring Core Annotations   *************************************************************

@Required :
-----------
@Required Annotation is a method level annotation and is applied to the setter method of a Bean.
@Required annotation indicates that setter method must be configured to be dependency inejected with a value at Configuration time.

Note :
If we are using @Autowired Annotation on our setter Method we need not use @Required Annotation because by default @Autowired Annotation has true value for required Attribute.

@Value :
--------
@Value Annotation can be used to assign default values to variables and method arguments.
@Value can also be used to read Spring Environment variables as well as System variables.

@Profile :
----------
If we want particular @Component Class or @Bean Method to be used only when a specific profile is active then we mark it with @Profile Annotation.

	 @Component
	 @Profile("development")
	 Class Bile implements Vehicle
	 



           