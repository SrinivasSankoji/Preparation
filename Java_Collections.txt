1.Limitation of Arrays											[13-JAN-2021]  (Done)
2.Comparison between Collections and Arrays                     [13-JAN-2021]  (Done)
3.Collections Framework                                         [13-JAN-2021]  (Done)
4.Collection Interface                                          [13-JAN-2021]  (Done)
5.List Interface Classes                                        [17-JAN-2021]  (Done)
6.Cursors in Collection Framework                               [17-JAN-2021]  (Done)
7.Set Interface Classes                                         [17-JAN-2021]  (Done)
8.Comparable and Comparator Interface                           [17-JAN-2021]  (Done)
9.Map Interface Classes                                         [18-JAN-2021]  (Done)


***************************************************************   1.Limitation of Arrays	*****************************************************

An Array is an indexed collection of fixed number of Homogenous data elements.
Main Limitation of Arrays are 
1.Arrays are fixed in size.once we create an Array there is no chance of increasing or decreasing its size based on our requirement.
2.Arrays can hold only Homogenous elements.

		Student[] student=new Student[10];
		student[0]=new Student();
		//student[1]=new Integer(10);  //CTE
		//student[2]="Bhaumik";   //CTE		
		
We can resolve the above problem by using Object Array but at the time of retrieval we need to perform Type casting.
		Object[] object=new Object[10];
		object[0]=new Student();
		object[1]=new Integer(10);
		object[2]="Bhaumik";
		
By using Object Array we can add Hetergogenous Elements.
3.For Arrays there is no underlying Data Structure i.e For every requirement we have to write the code explicitly. 
There is no default readymade support like sorting,searching etc.
4.We cannot represent Array elements in sorting order by default.
5.we cannot prevent duplicate elements in Arrays.

To resolve all the issues sun people introduced Collections.
For every requirement readymade method support is available.
By using Collection we can represent all the elements in sorting order and we can also prevent duplicate object insertion by default.

*************************************************************  2.Comparison between Collections and Arrays  *********************************************

Arrays :
--------
Arrays are fixed in size.
Arrays can hold only Homogenous data elements.
With respect to Memory Arrays are not recomended to use.
With respect to performance Arrays are recomended to use.
Arrays can hold both Objects and primitive types.
There is no underlying data structure.

Collections :
-------------
Collections are not fixed and are growable in nature.
Collections can hold Hetergogenous Elements.
Collections can hold only objects but not primitives.
With respect to memory Collections are recomended to use.
With respect to Performance Collections are not recomended to use.
Every Collection object has built by using some underlying data structure.

************************************************************* 3.Collections Framework   *******************************************************************

Collections Framework defines a group of Classes and Interfaces that can be used for representing a group of Objects as a Single entity.
Key Interfaces in Collection Framework are 

1.Collection
2.List
3.Set
4.SortedSet
5.Queue
6.Map
7.SortedMap

1.Collection :
--------------
Collection interface is the root interface for entire collection framework.
Collection interface can be used for representing a group of individual objects as a single entity.
Collection interface defines the most common methods that can be applicable for any collection object.
There is no concrete class which implements Collection interface directly.

Difference between Collection and Collections :
Collection is an interface which is present in java.util package that can be used to represent a group of individual objects as a single entity.
Collections is a class which is present in java.lang package which defines several utility methods for collection implemented class objects.

2.List :
--------
List interface can be used for representing a group of individual objects as a single entity where insertion order is preserved and duplicate objects are allowed.
List interface is the Child interfaace of Collection.
List implementation classes are 

ArrayList
LinkedList
Vector
Stack

Vector and Stack classes are reengineered in 1.2 version to fit into collection framework.
By means of Index we can preserve insertion order and we can differentiate duplicate objects.

3.Set :
-------
Set interface can be used for representing group of individual objects as a single entity where insertion order is not preserved and duplicate objects are not allowed.
Insertion order is based on hashCode of the object.
This is the child interface of collection.
Set interface implementation classes are

HashSet
LinkedHashSet

4.SortedSet :
-------------
SortedSet interface can be used for representing group of individual objects as a single entity 
where all the objects are inserted in some sorting order and duplicate objects are not allowed.
SortedSet is the child interface of Set interface.
Implementation class of SortedSet is  

TreeSet

5.Queue :
---------
Queue interface introduced in 1.5 version.
Queue interface can be used for representing group of individual objects prior to processing.
Implementation Class of Queue interface is PriorityQueue.
Child interface of Queue interface is BlockingQueue.

All the above interafecs are used for representing group of individual obects.
If we want to represent a group of individual objects as a key value pairs we go for Map.

Map :
-----
Map Interface can be used to represent group of individual obejcts as key value pairs.
Here both key and value are objects.
Map interface is not the child interface of collection.
Implementation class of Map are

HashMap
LinkedHashMap

SortedMap :
-----------
SortedMap can be used for representing a group of individual objects as key value pairs where Objects are inserted based on sorting order of keys.
Implementation class of SortedMap is
TreeMap

*************************************************************  5.List Interface Classes  *******************************************************************

ArrayList :
-----------
Underlying Datastructure for ArrayList is resizable or Growable Array.
Duplicate objects are allowed.
Hetergogenous Objects are allowed.
Insertion order is preserved.
null insertion is possible.

Constructor of ArrayList :

	ArrayList arrayList=new ArrayList();
	
creates an Empty ArrayList object with default initial capacity 10.
Whenever ArrayList reaches its maximum capacity a new ArrayList object will be created with new capacity.

	capacity=(currentcapacity*3/2)+1;
	
ArrayList and Vector class both implements RandomAccess interface so that we can access any element with same speed.
ArrayList is best suitable If the frequent operation is retreival.

Note :
Usually Collection object can be used for data transportation operation.
For this purpose every Collection object already implements Serializable and cloneable interface.
ArrayList is the worst choice If we perform insertion and deletion because of lot of shift operations.

LinkedList :
------------
Underlying Datastructure for LinkedList is doubly LinkedList.
Duplicate objects are allowed.
Insertion order is preserved.
null insertion is possible.
Heterogenous objects are allowed.
Implements List,Queue,Serializable and Cloneable interface but not RandomAccess interface.

LinkedList is the best choice If the frequent operation is insertion or deletion.
LinkedList is the worst choice If the frequent operation is retreival.
LinkedList does not have initial capacity concept.

Vector :
--------
Underlying Datastructure is resizable or growable Array.
Duplicate objects are allowed.
Insertion order is presrved.
null insertion is possibele.
Hetergogenous objects are allowed.
Implents Serializable,cloneable and Random Access interface.
Vector is the best choice If the frequent operation is retreival operation.
Vector is the worst choice If the frequnet operation is insertion or deletion.

Difference between ArrayList and Vector :
Every method present inside ArrayList is non synchronized where as every method present inside Vector is Synchronized.
Vector is Thread Safe where as ArrayList is not Thread Safe.
Performance of Vector is low where as Performance of ArrayList is high.

we can get the synchronized version of ArrayList as
	
	ArrayList l1=new ArrayList();
	List l2=Collections.synchronizedList(l);
	
Similarly we can get the synchronized version of Set and Map.

Constructor of Vector : 

	Vector v=new Vector();
	
Creates an empty Vector object with default initial capacity 10.
When ever Vector reaches its maximum capacity,new Vector object will be created by double the capacity.

	capacity=currentcapacity*2;
	
Stack :
-------
Stack is the child class of Vector and contains only one Constructor.

	Stack stack=new Stack();
	
*************************************************************  6.Cursors in Collection Framework   ******************************************************

From the Collection object to retreive the elements one by one we use the following 3 cursors.

1.Enumeration
2.Iterator
3.ListIterator

1.Enumeration :
---------------
It Contains the following two methods.

boolean hasMoreElements();
Object nextElement();

Limitations of Enumeration :
It is applicable only for legacy classes but not for all classes.
By using Enumeration we can perform only read operations and we cannot perform modify/removal operations.
To overcome this we go for Iterator interface.

2.Iterator :
------------
Itrator is a universal cursor which is applicable for all the Classes.
By using iterator we can perform removal operations along with read operations.

Limitations of Iterator :
Enumeration and Iterator are Single direction cursors.They always move in the forward direction.
By using Iterator we can perform read and remove operations and we cannot perform replace or addition of new elements.
To overcome this we go for ListIterator.

3.ListIterator :
----------------
ListIterator is the child interface of Iterator.
It is a bidirectional cursor.
Based on requirement we can move either to the forward diretion or backward direction.
While iterating elements, we can perform replace and add operations in addition to read and remove operation.
Most powerful cursor is ListIterator but it is applicable only to List interface Implemented classes.

*************************************************************  7.Set Interface Classes  ************************************************************

Set interface can be used to represent a group of individual objects where insertion order is not preserved and duplicate objects are not allowed.
Set interface is the child interface of Collection.
Set interface does not contain any methods and we have to use Collection interface methods.

HashSet :
---------
Underlying Datastructure for HashSet is HashTable.
Insertion order is not preserved and is based on hashCode of the Object.
Duplicate objects are not allowed.If we try to insert duplicate objects then we won't get any CTE or RTE and simply returns false.
null insertion is possible.
Hetergogenous objects are allowed.
HashSet is the best choice if the frequent operation is search operation.

	HashSet h=new HashSet();
	
creates an empty HashSet object with default initial value 16 and fill ratio 0.75.

LinkedHashSet :
---------------
Underlying Datastructure for LinkedHashSet is HashTable and LinkedList.
Insertion order is preserved.
For Implementing Caching Applications best suitable DataStructure is LinkedHashSet and LinkedHashMap where insertion order is preserved and duplicate objects are not allowed.

SortedSet :
-----------
SortedSet can be used for representing a group of individual objects where duplicate objects are not allowed,
insertion order is not preserved and objects are inserted according to some sorting order.
Here sorting order may be default natural sorting order or customized sorting order.

TreeSet :
---------
Underlying DataStructure for TreeSet is Balanced Tree.
Duplicate objects are not allowed.If we are trying to insert duplicate objects we won't get any CTE or RTE and simply returns false.
Insertion order is not preserved and objects are inserted according to some sorting order.
Heterogenous objects are not allowed and voilation leads to RTE saying ClassCastException.
creates an empty TreeSet object where the sorting order is default natural sorting order.

	TreeSet t=new TreeSet();
	
creates an empty TreeSet object where the sorting order is specified by the Comparator object.

    TreeSet t=new TreeSet(Comparator c);
	
null acceptance :
For the Empty TreeSet null insertion is possible.
But after inserting null If we are tryig to insert any other element we get NPE.
If the TreeSet already contains some elements and If we are trying to insert null we get NPE.

If we are depending on natural sorting order compulsory objects should be homogenous and comparable otherwise we get RTE.
An object is said to be comparable if the corresponding class implements Comparable interface.
All wrapper classes and String classes implements Comparable interface.
StringBuffer does not implement Comparable interface.

*************************************************************  8.Comparable and Comparator Interface   **********************************************

Comparable :
------------
Comparable interface is present in java.lang package.
This interface contains only one method 
		
		public int compareTo(Object object)
		
obj1.compareTo(obj2)
returns -ve if the obj1 comes before obj2.
returns +ve if the obj1 comes after  obj2.
returns  0 if both obj1 and obj2 are equal.

Note:
While inserting objects into the TreeSet JVM internally uses compareTo() If we are depending on natural sorting order.
To define our own customized sorting order we go for Comparator Interface.

Comparator :
------------
By using Comparator we can define our own sorting order.
Comparator interface is present in java.util package.
Comparator interface defines two methods i.e 

	public int compare(object obj1,object obj2)
	public boolean equals(object obj)
	
whenever we are implementing Comparator interface we should provide implementation for compare(object obj1,object obj2).

*************************************************************  9.Map Interface Classes  ******************************************************************

If we want to represent a group of individual objects where objects are stored as key value pairs we go for Map interface.
Map interface provides 3 collection views which allows map content to be viewed as
set of keys
set of values
set of key value pairs

Map is implemented by HashMap and Hashtable.
SortedMap is implemented by TreeMap.
Map.Entry describes access methods to the key value pairs.


Classes that implement the Map interface are 
HashMap,LinkedHashMap
TreeMap
WeakHashMap,IdentityHashMap
HashTable,Properties

HashMap :
---------
Underlying DataStructure for HashMap is HashTable.
insertion order is not preserved and is based on hashCode of the keys.
Access time for HashMap is O(1).
Values can be duplicated but the key should be unique.
null value for the key is allowed only once.

LinkedHashMap :
---------------
Underlying DataStructure for LinkedHashMap is LinkedList and HashTable.
LinkedHashMap will keep the order in which elements are inserted into it.

WeakHashMap :
-------------
If an object does not have any reference then it is eligible for garbage collector.
If no references outside the map are held to a particular key it may be garbage collected.

IdentityHashMap :
-----------------
If HashMap that uses == operator instead of equals() to compare keys then it is said to be IdentityHashMap.

HashTable :
-----------
HashTable is same as HashMap except the following differences
HashTable does not allow null value as key.
Every method present inside HashTable is synchronized and performance of these methods is slow compared to HashMap.

TreeMap :
---------
Here objects are placed based on natural sorting order.
If we want we can define our own customized sorting order by passing the Comparator.


