1.Introduction										[13-JUN-2023]  (Done)
2.Variables and Data Types                          [15-JUN-2023]  (Done)
3.Arithematic Expressions                           [13-JUN-2023]  (Done)
4.User Input                                        [17-JUN-2023]  (Done)
5.Type Conversion                                   [17-JUN-2023]  (Done)
6.Const                                             [17-JUN-2023]  (Done)
7.Math methods										[17-JUN-2023]  (Done)
8.Hypotenuse Calculator Program                     [17-JUN-2023]  (Done)
9.Counter Program                                   [17-JUN-2023]  (Done)
10.Random Number Generator                          [17-JUN-2023]  (Done)
11.Useful String methods                            [17-JUN-2023]  (Done)
12.String Slicing                                   [17-JUN-2023]  (Done)
13.Method Chaining                                  [17-JUN-2023]  (Done)
14.If Statement                                     [18-JUN-2023]  (Done)
15.Checked Property                                 [18-JUN-2023]  (Done)
16.Switches                                         [20-JUN-2023]  (Done)
17.Strict Equality Operator                         [20-JUN-2023]  (Done)
18.&& Operator                                      [20-JUN-2023]  (Done)
19.Not Logical Operator                             [20-JUN-2023]  (Done)
20.while loop                                       [20-JUN-2023]  (Done)
21.doWhile loop                                     [20-JUN-2023]  (Done)
22.for loop                                         [20-JUN-2023]  (Done)
23.break and continue                               [20-JUN-2023]  (Done)
24.Nested loop                                      [20-JUN-2023]  (Done)
25.Functions                                        [20-JUN-2023]  (Done)
26.return statement                                 [20-JUN-2023]  (Done)
27.Ternary Operator                                 [20-JUN-2023]  (Done)
28.var vs let                                       [23-JUN-2023]  (Done)
29.Template literals                                [23-JUN-2023]  ()
30.Format Currency                                  [18-JUN-2023]  ()
31.Number guessing game                             [19-JUN-2023]  ()
32.Temperature Conversion Program                   [19-JUN-2023]  ()
33.Arrays                                           [23-JUN-2023]  (Done)
34.Loop through an Array                            [23-JUN-2023]  (Done)
35.Sort an Array                                    [23-JUN-2023]  (Done)
36.Two Dimensional Array                            [23-JUN-2023]  ()
37.Spread Operator                                  [23-JUN-2023]  (Done)
38.Rest Parameters                                  [23-JUN-2023]  (Done)
39.Callbacks                                        [24-JUN-2023]  (Done)
40.forEach                                          [24-JUN-2023]  (Done)
41.map                                              [24-JUN-2023]  (Done)
42.filter                                           [24-JUN-2023]  (Done)
43.reduce                                           [24-JUN-2023]  (Done)
44.Sort Array of Numbers                            [24-JUN-2023]  (Done)
45.Function Expression  				            [24-JUN-2023]  (Done)
46.Arrow Function Expression                        [24-JUN-2023]  (Done)
47.Shuffled an Array                                [24-JUN-2023]  (Done)
48.Nested Functions                                 [24-JUN-2023]  (Done)
49.Closures                                         [24-JUN-2023]  (Done)
50.Maps                                             [24-JUN-2023]  (Done)
51.Objects                                          [27-JUN-2023]  (Done)
52.this keyword                                     [27-JUN-2023]  (Done)
53.Classes                                          [27-JUN-2023]  (Done)
54.Constructor                                      [27-JUN-2023]  (Done)
55.Static                                           [27-JUN-2023]  (Done)
56.Inheritance                                      [28-JUN-2023]  (Done)
57.Super Keyword                                    [28-JUN-2023]  (Done)
58.Getters and Setters                              [28-JUN-2023]  (Done)
59.Objects as Arguments                             [28-JUN-2023]  (Done)
60.Array of Objects                                 [28-JUN-2023]  (Done)

61.Anonymous Objects                                [28-JUN-2023]  (Done)
62.Error Handling                                   [29-JUN-2023]  ()
63.setTimeout                                       [29-JUN-2023]  ()
64.setInterval                                      [29-JUN-2023]  ()
65.Date Objects                                     [29-JUN-2023]  ()
66.Clock Program                                    [29-JUN-2023]  ()
67.Asynchronous                                     [30-JUN-2023]  ()
68.Console.time                                     [30-JUN-2023]  ()
69.Promises                                         [30-JUN-2023]  ()
70.Async                                            [30-JUN-2023]  ()

71.Wait                                             [01-JUL-2023]  ()
72.ES6 Modules                                      [01-JUL-2023]  ()
73.DOM Introduction                                 [01-JUL-2023]  ()
74.Element Selectors                                [01-JUL-2023]  ()
75.DOM Traversal                                    [01-JUL-2023]  ()

76.Add Change HTML Elements                         [01-JUL-2023]  ()
77.Add Change CSS Properties                        [01-JUL-2023]  ()
78.Events                                           [01-JUL-2023]  ()
79.addEventListener                                 [01-JUL-2023]  ()
80.Show Hide HTML Element                           [01-JUL-2023]  ()
81.Detect Key Press                                 [01-JUL-2023]  ()
82.Animations                                       [01-JUL-2023]  ()
83.Canvas API                                       [01-JUL-2023]  ()
84.Window                                           [01-JUL-2023]  ()
85.Cookies                                          [01-JUL-2023]  ()


################################################### 1.Introduction  ###################################################

Javascript is a web based Interpreted programming language that can be used to 
1.Add interactive behavior to web pages
2.Build Web and Mobile Applications
3.Create command line tools
4.To Develop games

Note :
Add the Live Server PlugIn in the Visual Studio Code to see the Changes in the along with the Visual Studio.

################################################### 2.Variables and Data Types ########################################

A Variable is a container for storing data.
It is a representation of some value.
A Variable behaves as if it contains the value.

There are two steps for creating the variable.
1.Declaration 
2.Assigning

To declare a variable we use one of the three key words i.e. var,let and const
let is the best practice for declaring a variable because of variabe scope.

	let age; // declaring the variable
	console.log(age);  // undefined 
	
We can combine both declaration and assignment

	let age=10;
	
	let age=21; // Number
	let studentname='Bhaumik'; // string
	let student=true;  // boolean

	console.log(age);  // 10
	console.log(studentname);  // Bhaumik
	console.log(student); // true
	
We can use Numbers with an Arithematic Expressions

	age=age+1; // 22
	
	let age='21';
	age=age+1; // 211

	console.log('Hello',studentname);  // Bhaumik
	console.log('You are',age,'Old');  // 10
	console.log('Are you Student',student); // true
	
If we want to display the variable in the DOM,declare the paragraph along with the id.
If iw want to change the inner HTML of the paragraph Text

	<body>
    <p id="p1"></p>
    <p id="p2"></p>
    <p id="p3"></p>
    <script src="index.js"></script>
	</body>
	
	document.getElementById("p1").innerHTML = firstName;
	document.getElementById("p2").innerHTML = age;
	document.getElementById("p3").innerHTML = student;
	
################################################### 3.Arithematic Expressions ###################################################

Arithematic expression is a combination of Operands and Operators.
Opernads are values,variables etc.
Operators are like +,_,*,%
Arithematic Expression can be evaluated to a value.
For example x=x+5;
	
	let x=21;
	x=x+25;
	console.log(x)

################################################### 4.User Input  ###################################################

To accept the input from the User we can use

1.window.prompt() :

	let userName=window.prompt("Please Enter Username : ");
	console.log(userName);
	
2.Input Text

	<body>
    <label>User name : </label>
    <input type="text" id="userName">
    <button type="button" id="button">Submit</button>
    <script src="userInput.js"></script>
	</body>

	let userName;
	document.getElementById("button").onclick=function(){
		userName=document.getElementById("userName").value;
		console.log(userName);
	};

To display the Username in the Console 

	 <label id="enteredText"> </label>

	document.getElementById("button").onclick=function(){
    userName=document.getElementById("userName").value;
    document.getElementById("enteredText").innerHTML=userName;
	};
	
################################################### 5.Type Conversion ###################################################

Type conversion is the ability to change the data type of a value to another.
Mostly we get the user Input in the form of String.

	let x="25";
	x=x+1 // 251
	
To cresolve this we convert the user input to String.
We use the typeof method to check the type of String.

	document.getElementById("button").onclick = function () {
		userName = document.getElementById("userName").value;
		if (!typeof userName == String) {
			userName = Number(userName);
			document.getElementById("enteredText").innerHTML = userName;
		}
		else {
			document.getElementById("enteredText").innerHTML = "Please Enter Numbers only";
		}
	}

###################################################  6.Const  ###################################################

Constant is a variable that can't be changed.
Constant adds data security to our code.
Constant assigned once can't be re assigned;

	const appname='smart-school';
	console.log('Building a ',appname,'Application');
	
################################################### 7.Math methods ###############################################

Math is an predefined object that provides basic mathematical functionality and constants.

	let num=9.37;
	x=Math.round(num);
	console.log(x);


Ceil :
------
If want to round a number up to its nearest Integer we use Math.ceil().

Floor :
-------
If we want to round a number down to its nearest integer we use Math.floor().

################################################### 8.Hypotenuse Calculator Program	###############################

Here we are going to create the Hypotenuse of a Triangle i.e c = √(a2 + b2)
Create one HTML that accepts the user enput a,b and display the result.

	let a;
	let b;
	let c;

	/** Hypotenuse Calculator Program */
	document.getElementById("hypotenuse").onclick=function(){
		a=document.getElementById("sideOne").value;
		b=document.getElementById("sideTwo").value;
		a=Math.pow(Number(a),2);
		b=Math.pow(Number(b),2);
		c=Math.sqrt(a+b);
		document.getElementById("result").innerHTML=c;
	}

################################################### 9.Counter Program #############################################
Here we are going to create the counter program which increases,decrease and resets the number.

	<body>
    <label id="counter"></label>
    <br>
    <button type="button" id="increase">Increase</button>
    <button type="button" id="reset">Reset</button>
    <button type="button" id="decrease">Decrease</button>
    <script src="counter.js"></script>
	</body>
	</html>
	
	let count=0;
	document.getElementById("increase").onclick=function(){
		count=Number(count)+1;
		document.getElementById("counter").innerHTML=count;
	}
	document.getElementById("decrease").onclick=function(){
		count=Number(count)-1;
		document.getElementById("counter").innerHTML=count;
	}
	document.getElementById("reset").onclick=function(){
		count=0;
		document.getElementById("counter").innerHTML=count;
	}
       
################################################### 10.Random Number Generator ####################################

random() in Javascript generates a random Number between 0 and 1.
If we want to generate the random number between two numbers we use

	let number=Math.floor(Math.random(1)*6+1);
	
Here it will generate the randon number between 1 and 5.

################################################### 11.Useful String methods ######################################

There are lot of usefule String methods in Javascript.
Some of them are length,toUpperCase().toLowerCase() etc.

################################################### 12.String Slicing #############################################

slice() extracts a section of a String and returns a new String without modifying the Original String.

	/** Slice Example */
	let fullName="Srinivas Chary Sankoji";
	let firstName=fullName.slice(0,8);
	console.log(firstName)

	/** Split Example */
	const nameArray=fullName.split(" ");
	console.log(nameArray[2]);

################################################### 13.Method Chaining  ###########################################

Method Chaining is a programming technique where calling one method after another in one continuous line of code.

################################################### 14.If Statement ###############################################

If condition is a basic form of decission making.
If the Condition is true then do some thing.
If not then don't do it.

################################################### 15.Checked Property ###########################################

If the check box or radio button is selected,accessing the checked property will give the boolean value true or false.

	const selectedTechnology =document.getElementById("technology").checked; // If the technology is selected It will return true.
	
	<body>
    <label>Technology :</label>
    <input name="technology" type="checkbox" value="Java">Java</input>
    <input name="technology" type="checkbox" value="Angular">Angular</input>
    <input name="technology" type="checkbox" value="Fullstack">Fullstack</input>
    <br></br>
    <button type="button" id="button">Submit</button>
    <label id="label"></label>
    <script src="checked.js"></script>
	</body>

	document.getElementById("button").onclick = function () {
		var selectedTechnology = document.getElementsByName('technology');
		var values = [];

		for (var i = 0; i < selectedTechnology.length; i++) {
			if (selectedTechnology[i].checked == true) {
				values.push(selectedTechnology[i].value);
			}
		}
		alert(values);
	}
	
################################################### 16.Switches ###################################################

Switch is a statement that examines a value for a match against many case clauses.
It is more efficient than if else statement.

	let userName=window.prompt("Please enter name");

	switch (userName) {
		case "Srinivas": console.log("Father")
						 break;
		case "Nandini": console.log("Mother")
						 break;
		case "Bhaumik": console.log("Elder Son")
						 break;
		case "Aadvik": console.log("Younger Son")
						 break;
		default:
			break;
	}
               
################################################### 17.Strict Equality Operator ###################################

Using strict equality operator we can check two values are equal or not along with Datatype.

= assignement operator
== comparison operator
=== strict equality operator 

	if(x=="3.14"){
    console.log("Both are equal");
	}
	if(x===3.14){
		console.log("Both are equal but Data type is different");
	}

################################################### 18.&& Operator ################################################

The && and || logical operators gives us the ability to check more than one condition concurrently.
&& operator checks all the conditions must be satisfied.
|| operator checks either one of the condition should be satisfied.
         
################################################### 19.Not Logical Operator #######################################

! i.e. NOT logical operator typically used to reverse a condition's boolean value.
From true -> false and false -> true.

################################################### 20.While loop  ################################################ 

While loop is like if statement which repeats some code untill the condition is true.
While loop can potentially repeat infine amount of time.

	let userName="";
	while(userName == ""){
    userName=window.prompt("Please enter username : ")
	}
	console.log("User Name is Equal");
 
If we are using while loop we need to write the code so that it should come out of the loop.
          
################################################### 21.DoWhile loop ############################################### 

In case of doWhile loop
Do something and check the condition and repeat if the condition is true.

In case of doWhile we check the condition last.
In standard while loop we may skip the condition if it is not satisfied.

	do{
		userName=window.prompt("Please enter username : ")
	}while(userName == "" || userName== null)
         
################################################### 22.For loop ################################################### 

For loop repeats some code for certain amount of time.
        
################################################### 23.Break and Continue #########################################

Break statement comes out from the loop entirely.
continue statement skips an iteration of a loop.

	for(let i=0;i<=10;i++){

    if(i==5){
        continue;
    }
    console.log("Numbers are : "+i)
}
        
################################################### 24.Nested loop ################################################### 

Nested loop is loop inside another loop.

	for(let i=1;i<=3;i++){
		for(j=1;j<=i;j++){
			console.log(j);
		}
	}

################################################### 25.Functions  ###################################################

Functions are used to divide the code into smaller parts so that it can be reused.
Using functions we can define the code once and use it for many times.
To perform some operation we call the function.

	addNumbers(22,27);

	function addNumbers(a,b){
		console.log(a+b);
	}

################################################### 26.return statement  ###################################################

return statment returns a value back to the place where we invoked the function.

	let result=addNumbers(22,27);
	console.log("Sum is :" +result);

	function addNumbers(a,b){
		return a+b
	}
	
################################################### 27.Ternary Operator  ###################################################

Ternary operator is a shortcut for If else Statement.
It takes 3 operands.

1.Condition with ?
2.Expression with true
3.Expression with false

	let marks=75;
	marks>36?console.log("Pass"):console.log("Fail");

###################################################  28.var vs let ########################################################

Variable scope is nothing but where a variable is accessible.
we declare the variables with var and let.

1.let variables are limited to block scope i.e. {}.

	for(let i=1;i<=3;i+=1){
		console.log(i);
	}
	console.log(i); // uncayght Reference Error
	
2.var variables are limited to function scope i.e. function(){} and doesn't exist outside the function.

	validateVarScope();

	function validateVarScope(){
		for(var i=1;i<=3;i+=1){
			console.log(i);
		}   
	}
	
	console.log(i); // uncayght Reference Error

Variable declared with var keyword can escape Block Scope i.e. curly braces but cannot escape a function.

3.Global variable is declared outside the function and can be accessible anywhere.
Problem with Global variabe is it manipulates the browser Window properties.

	
var userName="srinvas";
validateVarScope();

	function validateVarScope(){
		for(var i=1;i<=3;i+=1){
			console.log(i+". Name is "+userName);
		}   
	}
	console.log(userName);
	
Note :
It is the best practice to use let keyword for variables.
	
################################################### 29.Template literals ################################################### 



                 


################################################### 30.Format Currency  ###################################################                   
################################################### 31.Number guessing game  ###################################################             
################################################### 32.Temperature Conversion Program  ###################################################    

################################################### 33.Arrays  ###################################################

Array is a kind of variable that can store multiple values.

	/** Array Declaration*/
	let fruits=[];

	/**To add the Elements to an Array */
	fruits=["Apple","Orange","Banana"];
	console.log(fruits);

	/** To get the First element in an Array */
	console.log(fruits[fruits.length-1]);

	/** To add an Element to an Array  in the Last */
	fruits.push("Mango"); 

	/** To remove an Element form an Array from the Last */
	fruits.pop();

	/** To add an Element in the begining of an Array */
	fruits.unshift("Promogranite");
	console.log(fruits);

	/** To remove the begininig element of an Array */
	fruits.shift();
	console.log(fruits);

	/** To get the length of an Array */
	let length=fruits.length;
	console.log(length);

	/** To get the indexof the particular element */
	let position=fruits.indexOf("Orange");
	console.log("Position is ",position);
                      
################################################### 34.Loop through an Array  ################################################### 

To loop through an Array of elements we have two ways.

1.Standard For Loop

	let prices =[22,27,23,15];
	for(let i=0;i<prices.length;i+=1){
		console.log(prices[i]);
	}

	/** To reverse the elements of an Array */
	for(let i=prices.length-1;i>=0;i-=1){
		console.log(prices[i]);
	}

2.For Up Statement

	/** For up Statement */
	for(let price of prices){
		console.log(price);
	}
       
################################################### 35.Sort an Array  ###################################################

To sort an Array in ascending order

	prices.sort();
	
To sort an Array in descending Order

	prices.sort().reversed();
              
################################################### 36.Two Dimensional Array  ################################################### 

             
################################################### 37.Spread Operator  ################################################### 

Spread Operator allows an iterable such as an Array or String to be expanded in places where zero or more arguments are expected.
Spread Operator unpacks the elements into individual elements.

	/** Creating an Array of Numbers */
	let numberArray=[1,2,3,4,5,6,7,8,9,10];
	console.log(numberArray);

	/** To Get the Elements of an Array */
	console.log(...numberArray);

	/** To find the Maximum Number in an Array */
	console.log(Math.max(...numberArray));


	let family=["Srinivas","Nandini"];
	let children=["Bhaumik","Aadvik"];
	family.push(...children)

	/** To merge the Elements of an Array */
	console.log(...family)
      
################################################### 38.Rest Parameters  ################################################### 

Rest Parameter represents an indefnite number of parameters.
Rest Parameter packs arguments into an Array.

Consider the scenario fo sum function.

	let result=sum(3,5);
	console.log(result);

	function sum (a,b){
		return a+b;
	}
	
If there is a requirement tp pass any number of arguments we use Rest Parameter.

	let response=addition(22,27,23,15);
	console.log(response);

	function addition(...numbers){
		let total=0;
		for(let number of numbers){
			total+=number;
		}
		return total;
	}
Note :
Rest Parameter should be the last parameter of the function.
             
################################################### 39.Callbacks  ################################################### 

Callback is a function passed as an argument to another function.
Using callback is a modular programming technique because it ensures that a function is not going to run before the task is completed.
Callback function helps us to develop Asynchronous Code i.e. when one function has to wait for another function.
Callback function helps us to avoid errors and potential problems.
Consider the scenario of Waiting for a File to Upload.

	let response = addition(displayDOM,2, 5);

	function addition(callback,...numbers) {
		let total = 0;
		for (let number of numbers) {
			total += number;
		}
		callback(total);
	}

	function displayConsole(response) {
		console.log(response);
	}

	function displayDOM(response){
		document.getElementById("number").innerHTML=response;
	}
                    
################################################### 40.forEach  ###################################################

forEach() calls the Callback function one time for each element in an Array.
forEach() accepts upto 3 arguments i.e. value,index and Array.

	let names=["Srinivas","Nandini","Bhaumik","Aadvik"];

	names.forEach((output) => {
		output= output.toUpperCase();
		console.log(output);
	})
	
	names.forEach(converttoUpperCase);
	
	function converttoUpperCase(value,index,array){
		names=value[0]+value.substring(1);
		console.log("Names are ",names);
	}
                       
################################################### 41.map   ###################################################   

Map method provides an executable callback function once for each Array element and creates a new Array.

	/** Square the  Numbers */
	let numbers = [1,2,3,4,5,6,7,8,9,10];
	let squares=numbers.map(number => {
		return Math.pow(number,2);
	})
	console.log(...squares);

	/**Cube the Numbers */
	function cube(number){
		let result= Math.pow(number,3);
		console.log(result);
	}
	numbers.forEach(cube);
                     
################################################### 42.filter  ################################################### 

filter() filters the data based on the condition and retturns the newly created data.

	let filterResult=numbers.filter((number) =>{
		return number>5;
		})
	console.log(...filterResult);

################################################### 43.reduce  ################################################### 

reduce() reduces an array to a single Element.

	let sum=numbers.reduce((total,number) => (total+number))
	console.log(sum);
                         
################################################### 44.Sort Array of Numbers  ################################################### 

	/** Sort an Array in descending order*/
	numbers.sort((x,y) => (y-x)).forEach(display);

	/** Sort an Array in ascending order*/
	let sorted=numbers.sort((x,y) => (x-y));

	/** To get the Highest Number in an Array */
	let highest=sorted[sorted.length-1];
	console.log(highest);
        
################################################### 45.Function Expression  	###################################################

Function Expression is a function without any name and also called as Anonymous function.
Function Expression helps us to avoid polluting the Global Scope with Function names where we write it and forgot.
	
	/** Function Expression */
	var demo1 = function () {
		console.log("Function Expression");
	};
	
	var demo = () => (console.log("Function Expression - Optimized Code"));
	
Consider the scenario of increasing and decreasing the Number.

	let count=0;
	document.getElementById("increase").onclick=function(){
		count+=1;
		document.getElementById("counter").innerHTML=count;
	}
	document.getElementById("decrease").onclick=function(){
		count-=1;
		document.getElementById("counter").innerHTML=count;
	}
	
################################################### 46.Arrow Function Expression  ################################################### 

Arrow Function is a compact alternative to a traditional functional Expression.
	
	let greeting=function(message){
		console.log("Welcome to ",message);
	}
	greeting("Javascript");
	
The above code can be converted to Arrow function.

	let greeting=(message) => console.log("Welcome to ",message);
	
Note :
------
We don't need curly braces if the function has only one return statement.

	let grades=[65,63,70,67];
	grades.sort((x,y)=>(y-x));
	console.log(...grades);
     
################################################### 47.Shuffled an Array  ###################################################





               
################################################### 48.Nested Functions  ###################################################  

Nested Functions are functions inside other functions.
Outer Functions have access to inner functions and Inner functions are hidden from outside functions.
Nested Functions add the security to the data.

	function login() {
		console.log(`Login ${response}`);
		displayUserName();
		displayInbox();

		function displayUserName() {
			console.log(`Welcome ${userName}`);
		}
		function displayInbox() {
			console.log(`You have ${messageCount} new messages`);
		}
	}
      
################################################### 49.Closures   ###################################################

Closure is a function with preserved and private data.
Closure gives us an access to outer function scope from an inner function.

	document.getElementById("count").onclick=inBoxCount();

	function inBoxCount(){
		let count=10;

		function alertUser(){
			alert(`Your message count is ${count}`)
			count=0;
		}
		return alertUser;
	}
                   
################################################### 50.Maps  #######################################################

Map is an Object that holds key value pairs of any data type.

	let amount=0;

	const store = new Map([
		["TShirt",399],
		["Pant",699],
		["Short",499],
		["Shirt",999]
	]);

	/** To add a pair to Map */
	store.set("Bedsheet",899);

	/** To get the particular value from the Map */
	amount=store.get("Shirt");
	console.log(`Shopping car Amount is ${amount}`);

	/** Iterating the Map */
	store.forEach((key,value) =>{
	console.log(`${value}  prices is ${key}`);
	})

	/** To delete the pair from the Map */
	store.delete("Bedsheet")

	/** To check whether the key is present or not */
	let result=store.has("Shirt");
	console.log(result);

	/** Iterating the Map */
	store.forEach((key,value) =>{
		console.log(`${value}  prices is ${key}`);
		})

	/** To check the size of the Map */
	console.log(`Map Size is ${store.size}`);
	
################################################### 51.Objects  #########################################################

An Object is a group of properties and methods.
Property defines what an Object has and Method defines what an Object can do.
We use Object name to access properties and methods.

	const car ={
    model:"Swift",
    color:"White",
    year:2022
	};

	console.log(car.model);
	
To create a function in  the Object

	const car ={
    model:"Swift",
    color:"White",
    year:2022,

    drive:function(){
		console.log(`Driving the ${this.model} car`);
		}
	};
	
	car.drive();
	
Note :
------
We can create multiple objects each with different properties and methods.
 
################################################### 52.this keyword   ###################################################

This reference to a particular object but it depends on the immideate context.
If we want to access the property of the class we use this keyword.

	drive:function(){
		console.log(`Driving the ${this.model} car`);
	}
	
Here this refers to the object that is currently working with.
	const car ={
		model:"Swift",
		color:"White",
		year:2022,

		drive:function(){
			console.log(`Driving the ${this.model} car`);
			}
		};

From the above car Object the immideate context is car.
We can also replace this with car.

Note :
------
If we are using this keyword outside the Object then it will refer to the window Object.
We can also change the properties by using this keyword.
  	
################################################### 53.Classes   ########################################################

A class is a blue print for creating an Object.
Within a class we can define properties and methods.
A class can contain constructor to define unique properties.

	class Player{
    score=0;
		pause(){
			console.log("You paused the Game");
		}
		exit(){
			console.log("You exited the Game");
		}
	}
	const palyer1=new Player();
	palyer1.score+=1;
	console.log(palyer1.score)
	palyer1.pause();
	palyer1.exit();
	
Note :
------
We can create as many Objects we want.
   
################################################### 54.Constructor  #####################################################

Constructor is a special method of a class which accepts arguments and assign it to the properties.

	class Student{
		constructor(name,age,score){
			this.name=name;
			this.age=age;
			this.score=score;
		}
		
		study(){
			console.log(`${this.name} is studying`)
		}
	}

	const studennt1=new Student('Bhaumik',6,75);
	console.log(studennt1);
	studennt1.study();
      
################################################### 55.Static  ##########################################################

Static belongs to the class and it does not belong to the Object.
Static properties are useful for cache, fixed configuration etc.
Methods are useful for Utility functions.

	class Student{
		static count=0;
		constructor(name,age,score){
			this.name=name;
			this.age=age;
			this.score=score;
			Student.count+=1;
		}
		study(){
			console.log(`${this.name} is studying`)
		}
	}
	
	const studennt1=new Student('Bhaumik',6,75);
	console.log(`Number of Students are ${Student.count}`);
                              
################################################### 56.Inheritance   ####################################################

Inheritance is nothing but a Child class can inherit all the method and properties from the Parent Class.
If there is a common functionality which is repeating across all the classes, we can write it in one class and use it in Sub class by extending the Parent class.

	
	class Animal {
		alive = true;
		name = "Rabbit";
		eat() {
			console.log(`${this.name} is eating`);
		}
		sleep() {
			console.log(`${this.name} is Sleeping`);
		}
	}


	class Rabbit extends Animal {
		name = "Rabbit";
		run() {
			console.log(`${this.name} is running`);
		}
	}

	class Fish extends Animal {
		name = "Fish";
		swim() {
			console.log(`${this.name} is Swimming`);
		}
	}

	const rabit = new Rabbit();
	rabit.eat();
	rabit.sleep();
	rabit.run();

	const fish = new Fish();
	fish.eat();
	fish.sleep();
	fish.swim();
     
################################################### 57.Super Keyword   ##################################################

Super keyword when using inheritance refers to the Parent class.
It is commonly used to invoke the constructor of the Parent class.
When we have a constructor in the Chld class which is extending Parent class,it will invoke the Parent class constructor to promote code reusability.

	class Animal{

	}

	class Fish extends Animal {
		constructor(name,age,speed){
			super();
			this.name=name;
			this.age=age;
			this.speed=speed;
		}
	}

	const fish=new Fish("Apollo",2,50);
	console.log(fish.name);
	console.log(fish.age);
	console.log(fish.speed);
   
################################################### 58.Getters and Setters ##############################################

To create a getter we use get keyword.
get binds an Object property to a function when that property is accessed.
While getting the property we can add some additional logic to the Property.

Note :
Here property name and getter name cannot be same.
To avoid this we use _ along with property name.

	class Car {
    _power = 0;
    constructor(power) {
        this._power = power;
    }
    get power() {
        return this._power;
    }
    set power(value) {
        if (value > 100) {
            value = 100;
            this._power = value;
        }
        else {
            this._power = value;
        }
    }
	}

	let car = new Car(80);
	car.power = 500;
	console.log(car.power);

################################################### 59.Objects as Arguments  ############################################

Passing Object as an argument to function will be helpful in displaying all the information about the Object.
Sometimes we need to change the properties of the Object etc.

	function displayAnimal(fish){
		console.log(fish.name);
		console.log(fish.age);
		console.log(fish.speed);
	}
	displayAnimal(fish);

################################################### 60.Array of Objects #################################################

To create an Array of Objects we use []

		let animals=[fish,rabit];
		
To iterate over an Array of Objects we use for up loop.

	let animals=[fish,rabit];
	displayAnimal(animals);

	function displayAnimal(animals){
		for(let animal of animals){
			console.log(`Animal Name is ${animal.name}`);
			console.log(`Animal Name is ${animal.age}`);
			console.log(`Speed is ${animal.speed}`);
		}
	}

################################################### 61.Anonymous Objects ###################################################

Anonymous Objects are Objects without any name.
Using Anonymous Object requires less syntax and it does not require unique names.
The drawback is it is not directly referenced.

	let mamals=[new Fish("Apollo",2,50),new Rabit("White rabit",10,100)];
	mamals.forEach((mamal) => {
		console.log(mamal.name);
		console.log(mamal.age);
		console.log(mamal.speed);
	})

################################################### 62.Error Handling ######################################################


 
   
################################################### 63.setTimeout  #########################################################

       
################################################### 64.setInterval #########################################################

      
################################################### 65.Date Objects ########################################################

     
################################################### 66.Clock Program #######################################################     