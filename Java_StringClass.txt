1.String Class                                                     [16-DEC-2020]  (Done)
2.StringBuffer                                                     [16-DEC-2020]  (Done)
3.StringBuilder                                                    [16-DEC-2020]  (Done)
4.Method Chaining                                                  [16-DEC-2020]  (Done)
5.Why Strings are Immutable in Java (howtodoinjava)
6.Our Own Immutable Class (howtodoinjava)

******************************************************** 1.String Class *****************************************************************

Once we create a String object we cannot perform any changes to the existing object.
If we are trying with those changes a new object will be created and it does not have any reference and is eligible for Garbage Collector.
Non changeable behavior is nothing but Immutable.

		String s1=new String("Chary");
		String s2=new String("Chary");
		s1.concat("Software");
		System.out.println(s1); //Chary
		System.out.println(s1==s2);//false
		System.out.println(s1.equals(s2));//true

Once we create a StringBuffer object and If we perform any changes,then those changes will be applied on the existing object.
This changeable behavior is nothing but mutability of StringBuffer object.

		StringBuffer s3=new StringBuffer("Chary");
		StringBuffer s4=new StringBuffer("Chary");
		s3.append("Software");
		System.out.println(s3);//CharySoftware
		System.out.println(s3==s4);//false
		System.out.println(s3.equals(s4));//false


Note :
------
In String Class equals() is overridden for conetnt comparison Hence if the content is same equals() returns true otherwise returns false.
In StringBuffer Class equals() is not overridden and is meant for reference comaprison.
Due to this even though content is same it returns false.

		String s1=new String("Chary");
		String s2=new String("Chary");
		
		StringBuffer s3=new StringBuffer("Chary");
		StringBuffer s4=new StringBuffer("Chary");
		
		System.out.println(s1.equals(s2)); //true
		System.out.println(s3.equals(s4)); //false

String Object Creation :
------------------------

	String s=new String("Chary");  --> (1)
	String s="Chary";			   --> (2)
	
Incase of (1) Two objects are created one in SCP and another is in Heap and s points to the Heap Object.
Where as of (2) Only one object is created in SCP and s points to the SCP.

Note :
------
Object creation in SCP is always optional.
First JVM will check is there any object already available with required content or not.
If any object is already available then JVM will use the existing object.
If the object is not already available then only a new object will be created.
Garbage Collector is not allowed to access SCP area eventhough object does not have any reference.
All SCP objects will be destroyed automatically at the time of JVM shut down.

Scenario :
----------
	String s1=new String("Chary");
    String s2=new String("Chary");
	String s3="Chary";
	String s4="Chary";
	
Whenever we are using new operator compulsory a new object will be created in Heap Area.
There is no chance of existing two objects with the same content in SCP where as it is possible to have two objects with the same content on Heap.
Duplicate objects are allowed in Heap but not in SCP.

Example 1 :
-----------
		String s1=new String("Srinivas");
		String s2=s1.concat("Chary");
		s1=s1.concat(" Sankoji");
		System.out.println(s1);// Srinivas Sankoji
		System.out.println(s2); // Srinivas Chary
		
Note :
------
If an object is required to create at Runtime object then it is going to create in Heap but not in SCP.

Example 2 :
-----------
		String s1=new String("Summer");
		s1.concat("Winter");
		String s2=s1.concat("Spring");
		s1=s1+"fall";
		System.out.println(s1);// Summerfall
		System.out.println(s2);//SummerSpring

Example 3 :
-----------

		String s1=new String("You Cannot Chaneg Me");
		String s2=new String("You Cannot Chaneg Me");
		System.out.println(s1==s2); // false
		
		String s3="You Cannot Chaneg Me";
		System.out.println(s1==s3); //false
		
		String s4="You Cannot Chaneg Me";
		System.out.println(s3==s4); //true
		
		String s5="You Cannot"+" Chaneg Me";
		System.out.println(s3==s5); //true
		
		String s6="You Cannot";
		String s7=s6.concat(" Chaneg Me");
		System.out.println(s3==s7); //false
		
		final String s8="You Cannot";
		String s9=s8+" Chaneg Me";
		System.out.println(s3==s9); //true
		
		System.out.println(s6==s8); //true
		
Note :
------
If both are constants then compiler is responsible to perform concatenation at the time of compilation only and replaces as one constant.
If one of them is variable at Runtime concatenation is possible.
If the String is declared as final then at the time of compilation only replaces as one constant.

Intern of String Object :
-------------------------
		String s1=new String("Chary");
		String s2=s1;
		String s3=s1.intern();
		System.out.println(s1==s2);//true
		System.out.println(s1==s3);//false

		String s2=s1;

Here s2 points to the Heap Memory.If I want s2 to point to the SCP object we go for intern().
We use intern() to get the corresponding SCP object reference for the given object.

		String s3=s1.intern();
		
Note :
------
Variables are stored inside the stack where as objects are stored inside Heap and SCP.
If an object is going to create at runtime,then object is going to create in Heap and reference points to the Heap object.
If i want reference to be pointed to the SCP object we use intern().

Importance of String Content Pool :
-----------------------------------
If any String object is required to use repeatedly it is not recomended to create a seperate object for each requirement.
Problem in this approach is performance will be impacted and memory utilization will be reduced.
To resolve this problem we can create only one object and we can reuse the same object with multiple references.
we can acheive this by using SCP.

Disadvantage of SCP is If a Single object is referred by multiple references,By using one reference If we change the content of the object,
with those changes a new object will be created and reference will be pointed to newly created object.

Note :
------
String Constants are mostly used where as StringBuffer is rarely used.
String is immutable because of SCP.
All Wrapper classes are Immutable similar to String.

 
		String s1="chary";
		String s2=s1.toUpperCase();
		String s3=s1.toLowerCase();
		String s4=s2.toUpperCase();
		
		System.out.println(s1==s2);//false
		System.out.println(s1==s3);//true
		System.out.println(s2==s4);//true
		
If there is no change in the content no new object will be created both in Heap and SCP.


		String s1="durga";
		String s2=s1.toString();
		String s3="DURGA";
		String s4=s1.toUpperCase();
		String s5=s1.toLowerCase();
		String s6=s5.toLowerCase();
		String s7=s4.toLowerCase();
		String s8=new String("DURGA");
		String s9=new String("durga");
		String s10=s9.toLowerCase();
		
		System.out.println(s1==s2);//true
		System.out.println(s3==s4);//false
		
Creation of our Own Immutable Class :
-------------------------------------
Once we create a String object we cannot perform any changes in the existing object.
If we are trying with those changes a new object will be created .
If there is no change in the content existing object will be reused.
This behavior is nothing but Immutability.

Rules to create a Final Class :
-------------------------------
1.Declare the Class as final so that it cannot be extended.
2.Make all the variables as private so that direct access is not allowed.
3.Declare the Constructor as public.
4.Don't provide setter method for variables.
5.Declare the static method and verify the object has created or not.
6.use the new operator to create the Object.

final class Immutable {
	private int i;
	public Immutable(int i)
	{
		this.i=i;
	}
	public Immutable modify(int i)
	{
		if (this.i == i) {
			return this;
		} else {
			return new Immutable(i);
		}
	}
	public int getI() {
		return i;
	}
}

public class ImmutableTest {
	public static void main(String[] args) {
		Immutable i1=new Immutable(10);
		Immutable i2=i1.modify(10);
		Immutable i3=i2.modify(100);
		System.out.println(i1==i2);
		System.out.println(i2==i3);
	}
}

final vs Immutability :
-----------------------

final StringBuffer sb=new StringBuffer("Durga");
sb.append(" Software");
System.out.println(sb);
sb=new StringBuffer("Naresh");  // CTE

Once we create a StringBuffer object as final we can perform changes in the existing object.
only thing is we cannot reassign the variable.
final is applicable for reference variables where as immutability is applicable for objects.


***************************************************************** 2.StringBuffer ********************************************************

If the content is fixed and won't change frequently we go for String.
In String for every change a new object will be created.
If the content is not fixed and keep on changing then we go for StringBuffer.
In StringBuffer for every change new object will be created and all changes will be doen in the existing object.
All the methods in StringBuffer are synchronized.
At a time only one Thread is allowed to operate on the object and performance of the system is going down.
To resolve this problem we go for StringBuilder.

*************************************************************** 3.StringBuilder *********************************************************

Only difference between StringBuffer and StringBuilder is all the methods present in StringBuilder are non synchronized.
StringBuilder is introduced in Java 1.5.

Method Chaining :
-----------------
For most of the methods in String,StringBuffer and StringBuilder return type is same.
Hence after applying method call based on the return type we can apply another method call.