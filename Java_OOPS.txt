1.Data Hiding										[02-DEC-2020]  (Done)	
2.Abstraction                                       [02-DEC-2020]  (Done)
3.Encapsulation                                     [02-DEC-2020]  (Done)
4.Tightly Encapsulated Class                        [02-DEC-2020]  (Done)
5.Is a Relationship                                 [10-DEC-2020]  (Done)
6.Has a Relationship                                [10-DEC-2020]  (Done)
7.Method Signature                                  [10-DEC-2020]  (Done)
8.Overloading                                       [10-DEC-2020]  (Done)
9.Overriding                                        [13-DEC-2020]  (Done)
10.Polymorphism                                     [13-DEC-2020]  (Done)
11.Coupling                                         [02-DEC-2020]  ()
12.Static Control Flow                              [02-DEC-2020]  ()
13.Static Block                                     [13-DEC-2020]  (Done)
14.Instance Control Flow                            [02-DEC-2020]  ()
15.Object Creation Ways                             [13-DEC-2020]  (Done)
16.Memory Area of JVM                               [02-DEC-2020]  ()
17.Constructor                                      [13-DEC-2020]  (Done)
18.Singleton Class                                  [14-DEC-2020]  (Done)
19.Typecasting                                      [14-DEC-2020]  (Done)
20.vararg Method                                    [14-DEC-2020]  (Done)
21.Main Method                                      [14-DEC-2020]  (Done)


**********************************************************  1.Data Hiding  *********************************************************************

Data Hiding Means hiding of Data.
Our internal data sholud not go out diretly i.e outside person is not allowed to access our internal data directly.
By using private modifier we can acheive Data Hiding.
Instead of providing the data directly,provide access through method.
Consider the scenario of Bank customer,even though we are valid customer of the bank after providing credentails only we can access Account balance.
Main advantage of data hiding is security.
Recomended Modifier for data variable is private.

**********************************************************  2.Abstraction  **********************************************************************

Hiding the internal implementation and highlighting the set of services i.e required information is called as Abstraction.
All the Operations are performed internally by highlighting the set of services.
Bank people will highlight the set of services what they are offering by hiding the internal implementation.
Abstraction improoves the maintainability and modularity of an application.
Abstraction improoves the easyness to use the system because not required to know about the internal implementation.

********************************************************** 3.Encapsulation  **********************************************************************

If any componenet of java class follows Data Hiding and Abstraction then it is called Encapsulation.
Binding the data and corresponding functionality together into a single module is called Encapsulation.
Every Java class is an example of Encapsulation.

In case of Encapsulation,we does not aware which code it got executed and where it is executed.
Here we are hiding the data behind the methods is a central concept of Encapsulation.
Main Advantage of Encapsulation is we can acheive security and Enhancement will become easy.
Encapsulation improoves the maintainability and modularity of an Application.

If we want security we should compromise the performance of the Application.
Disadvantage of Encapsulation is it increases the length of the code and slows down execution.
Perfromance of the system will be impacted.

********************************************************** 4.Tightly Encapsulated Class  **********************************************************

When ever we are very strict about Data Hiding,we go for tightly encapsulatd class.
A class is said to be tightly Encapsulated class if each and every variable of the class is declared as private.
Whether the class contains corresponding setter and getter methods or not,whether these methods are declared as public or not.
These things are not required to check.

Note :
If the Parent class is not tightly encapsulated then no child class is not tightly encapsulated.

********************************************************** 5.Is a Relationship  *******************************************************************

Is a Relationship is also known as Inheritance.
By using extends keyword we can implement is a relationship.
Advantage is reusability of code.
If several components have the same functionality then it is not recomended to define that common functionality in every component.
We need to define the common functionality in one class and specific functionality in the child class.
This approach improoves the reusability of the code and reduces the development time.
Entire Java API is implemented based on simple inheritance.
For all Errors and Exceptions,most common functionality is available in Throwable class.Hence Throwable class acts as a root class for Java Exception Hierarchy.
Similarly For all Java classes most common required functionality is available in  Object class.
Hence Object class acts as a Root Class for all Java Classes.

Example :
---------
public class Parent {

	public void m1()
	{
		System.out.println("Parent Class Method");
	}
}

public class Child extends Parent{

	public void m2()
	{
		System.out.println("Child Class Method");
	}
}

public class ParentChild {
	public static void main(String[] args) {
		Parent parent=new Parent();
		parent.m1();
		Child child=new Child();
		child.m1(); // Parent Class Method
		child.m2(); // Child Class Method
		
	}
}

												Object
						Throwable    String   StringBuffer      Number
				Exception   Errors                          Byte  Short Integer
			RTE  IOE        OutOfMemoryError

Object class contains 11 Methods that contains common functionality which is avaialbale for all the Classes.

Note :
------
1.Whatever methods parent has by default avaialbale to child class.Hence on the child class reference we can call both parent and child class methods.
2.Whatever methods child has by default avaialbale not avaialbale to the parent class.Hence on the parent class reference we cannot call child class methods.
3.Parent class reference can be used to hold child class objects but by using this reference we can call methods available in parent class 
and child class specific methods we cannot call.

	Parent parent1=new Child();
	parent1.m1();   // Parent Class Method 
	parent1.m2();   // Compile Time Error
		
4.Child class reference cannot be used to hold parent class object.


Multiple Inheritance :
----------------------
Java does not support Multiple inheritance through class because there may be a chance of ambiguity problem.
In Java a class cannot extend more than one class at a time,Hence Java won't provide support for multiple inheritance.

Class A
{
	m1();
}


Class B 
{
   m1();
}

Class C extends A,B
{
	m1();  // Compile Time Error due to Ambiguity problem which method it has to call.
}

But an Interface can extend more than one Interface at a time,Hence Java provides support for Multiple Inheritance through Interface.

Interface A 
{
	m1();
}

Interface B 
{
	m1();
}

Interface C extends A,B
{
}

Because for Interface we need to provide Implementation.
Here Implementation for A is in Seperate Class and B is in Another Class.
To the Interface C Only one implementation is enough and single implementation acts for both interfaces.There is no chance of ambiguity.
Eventhough multiple method declarations are present,there should be only one implementation i.e implementation is unique.
Hence there is no chance of ambiguity Problem in interfaces.

Cyclic Interface :
------------------
Cyclic Inheritance is not allowed in Java.

Class A extends A
{

}

Class A extends B
{
}

Class B extends A
{
}

************************************************************* 6.Has a Relationship  *************************************************************

It is also known as Composition or Aggregation.
Whenever the common functionality is repeatedly required,write it in one class and call this functionality where ever it is required.
There is no specfic keyword to implement has a relationship but most of the times we use new keyword.
Main Advantage of has a relationship is reusability of the code.

Consider the scenario if we want to build the car ,each part is taken from the third party Vendor.
Here the disadvantage is if there is a change in Engine, then it will impact the Class Car.
Has a Relationship increases the dependencies between the components and increases the maintanance problems.

Note : If there is no parent child relationship and still i wnat to acheive reusability of the code we use has a relationship.
Composition and Aggregation are both the cases that comes under has a relationship.

Composition :
-------------
Consider the scenario of University where it consists of several departments.
Without existing university there is no chance of existing department.
Here University is a Container object where as Department is contained Object.
Here Container objects and contained objects are Strongly associated with each other.Then this Association is nothing but Composition.
Without existing Outer class object there is no chance of existing Inner class object.

Aggregation :
-------------
Consider the scenario of department.
Many Professors works under one department.
There may also be a scenario where the Department has no Professors in it.
Here without existing container object(Department) there may also be a chance of existing contained object(Professor).
Container objects and contained objects are weakly associated is called Aggregation.

Note :
------
In Composition,Container object holds Contained Objects i.e Conatiner and Contained Objects are Strongly associated.
In Aggregation,Container Object holds the references of Contained Objects i.e Conatiner and Contained Objects are weakly associated.

************************************************************* 7.Method Signature   **********************************************************************

			public void m1(int i,double d);
			
In Java Method Signature consists of name of the Method and Argument Types.
Return type is not a part of Method Signature.
For each call performed by the Thread on the method,corresponding Entry will be stored inside the Stack Area.

public class MethodSignatureDemo {

	public void m1(int i)
	{
		System.out.println("Integer Value is "+i);
	}
	
	public void m1(double d,int i)
	{
		System.out.println("Integer Value is "+i + "and Double Value is "+d );
	}
	public static void main(String[] args) {
		MethodSignatureDemo demo =new MethodSignatureDemo();
		demo.m1(5);
		demo.m1(36.0,5);
		
	}
}

Note :
------
In a Class two Methods with same signature are not allowed.Atleast argument types should be different.

************************************************************* 8.Overloading   ******************************************************************************

Two Methods are said to be overloaded methods if both the methods have the same name and having different argument types i.e
Atleast order of arguments must be different is also applicable.

In C 

	abs(10.2);
	abs(-10.2);
	
both returns the absolute value and returns 10.2

	abs(10l) gives compile time error and we need to define one more method i.e
	labs(10);
	
Here C does not support overloading and increases the complexity of the program.
But Java supports overlaoding and reduces the complexity of the program.

Note :
------
In overloading Method resolution is always taken care by compiler i.e based on reference type.
Compiler decides which method has to be executed based on reference type.
Here overloading is called static polymorphism or compile time polymorphism or early Binding.

public class OverloadingDemo {

	public void m1()
	{
		System.out.println("No Argument COnstructor");
	}
	public void m1(int i)
	{
		System.out.println("Value of Integer Argument is "+i);
	}
	public void m1(double d)
	{
		System.out.println("Value of Double Argument is "+d);
	}
	public static void main(String[] args) {
		OverloadingDemo demo=new OverloadingDemo();
		demo.m1();
		demo.m1(36);
		demo.m1('a');// Automatic promotion in Overloading
	}
}

Automatic promotion in Overloading :
------------------------------------
While performing Method overloading,if exactly matched method is not found then we don't get compile time error.
Here Compiler promotes the argument to the next level and checks whether the matched method is available or not.
This process will be continued untill all the possible promotions.
Still if the matched method is not avaialbale then we get the compile time Error.
Promoting the argument to the next level is nothing but Automatic promotion in Overloading.

Various possible promotions are 

	byte --> short \
					\ 
					 >
			      >	   int --> long --> float --> double
			char /		   

public void m1(Object obj)
{
	System.out.println("Object Argument");
}
public void m1(String string)
{
	System.out.println("String Argument");
}

demo.m1(null);// Priority goes to Child class in case of overloading and output is "String Argument".

Note :
------
In case of overloading Method Resolution if both method matches,then priority goes to the Child class argument over the Parent class argument.


public void m1(String string)
{
	System.out.println("String Argument");
}

public void m1(StringBuffer stringBuffer)
{
	System.out.println("StringBuffer Argument");
}

demo.m1(null);// CTE

Note :
------
In case of overloading method Resolution,If both methods are at same level we get CTE.


VarArg Method :
---------------

vararg method came in 1.5 version.
vararg() can be called by passing any no of arguments including 0 or any.
In general vararg() will get the least priority i.e if no oher method matches then only vararg() will get the chance.
vararg() is same as default in switch case.

public void m1(int... i)
{
	System.out.println("Vararg Method with Parameter "+i);
}

demo.m1(35,24);


***************************************************************** 9.Overriding  *********************************************************************

whatever the methods parent has by default it is avaialbale to the child class.
If the child class is not satisfied with the parent class method then child class is allowed to redefine the parent class method in the child class based on its requirement.
Parent class method which is overriden is called overridden method.
Child class method which is overriding is called overriding method.

public class ParentDemo {

	public void property()
	{
		System.out.println("Property");
	}
	public void marriage()
	{
		System.out.println("Arranged Marriage");
	}
}

public class ChildDemo extends ParentDemo{

	public void marriage()
	{
		System.out.println("Love Marriage");
	}
}

ParentDemo parentChild=new ChildDemo();
parentChild.marriage();

Flow of execution :
-------------------
Here compiler will check whether the marriage method is present or not.
It again checks whether it is present in Parent class object or Child class Object.
If it is present in Parent Class Object it will execute the Parent Class method.
Similarly if it is present in child class object it will execute child class Object.

At runtime JVM will check whether the method is overriding in the child class or not.
If yes child class method will get executed.

In overriding Method Resolution is always taken care by compiler based on Runtime Object.
Overriding is also called as Dynamic Polymorphism or Runtime Polymorphism or Late Binding.

Rules for Overriding :
----------------------
Name of the Method and argument type must be same. i.e Method Signature must be same.
In Overriding return type must be matched but this rule is applicable untill Java 1.4.
Form Java 1.5 onwards Covariant return types are allowed.
According to Covariant Return Type,Child class method return type need not be same as Parent Class Method return Type but its subtype is also allowed.
Covariant Return Type is applicable only for Object Types but not for primitive types.

Scenario : Parent Class method is declared as private 
------------------------------------------------------
Based on requirement we can override parent class private methods in child class.
But it is not overriding.
Overriding concept is not applicable for private methods.

public class ParentDemo {
	private void personal()
	{
		System.out.println("Property");
	}
}

public class ChildDemo extends ParentDemo{
	private void personal()
	{
		System.out.println("Property");
	}
}

Scenario : Parent Class method is declared as final 
---------------------------------------------------
public class ParentDemo {
	public final void drink()
	{
		System.out.println("Property");
	}
}

public class ChildDemo extends ParentDemo{
	public void drink()
	{
		System.out.println("Property");
	}
}

Here it gives the CTE saying cannot override the final method from ParentDemo.
We can override non final method as final.
We can override Parent class abstract method in the Child class to provide implementation.

Scenario : Parent Class method is non abstract 
----------------------------------------------
public class ChildDemo {
	public void marriage()
	{
		System.out.println("Love Marriage");
	}
}

public abstract class AbstractChildDemo extends ChildDemo{
	public abstract void marriage();
}

If the Parent class method is non abstract then in the Child class it can be overridden as an abstract method.
Advantage is ,In the next level child we need to provide implementation.
Disdavantage is Parent class method is not available to the next level child class.
We can override non abstract method as abstract in the child class.

Synchronized,Strictfp,native won't give any restriction while overriding.

Scenario : Overriding w.r.t private,public and default :
--------------------------------------------------------
If the Parent class method is declared as public then compulsory Child class method should also be declared as public.
While overriding we cannot reduce the scope of the Access Modifier but we can increase.

	private --> default --> protected --> public
	

Scenario : Overriding w.r.t Exception :
---------------------------------------
Runtime Exception and its Child Classes and Error and its Child Classes are called unchecked Exceptions.
Remaining all other are Checked Exceptions.

Note :
------
If a Child Class method throws any Checked Exception then Parent Class Method should thorw that same Checked Exception or its Parent.
Similarly there is no Restriction for UnChecked Exception.

Scenario : Overriding w.r.t Static Method :
-------------------------------------------
If the Parent Class method is declared as Static we cannot override in the Child class as Non Static.
Similarly If the Parent Class method is declared as non Static we cannot override in the Child class as Static.

Note :
------
We cannot override non static methods as static and vice versa.

If the Parent and Child class methods are declared as static ,it is valid.But it is not method overriding and it is method hiding.
All rules of method overloading and method hiding are same.
In overriding method resolution is taken care by JVM based on runtime object.
In case of method hiding,method resolution is taken care by compiler based on reference.

Overriding w.r.t Vararg Methods :
---------------------------------
We can Override vararg method with another vararg method then it is said to be overriding otherwise it is said to be overloading.
If we Overriding vararg method with normal method then it is said to be overloading.

public class Parent{
public void m1(int x)
{
	System.out.println("Love Marriage");
}
}

public class Child extends Parent{
public void m1(int... x)
{
	System.out.println("Love Marriage");
}
}

Above case is said to be Overloading.

If we replace the Parent Class m1() with Vararg Method then it is said to be Overriding.

Overriding w.r.t variables :
----------------------------
Overriding concept is not applicable for variables and is applicable only for methods.
variable resolution is always taken care by compiler based on reference type,whether the variable is static or non static.

Difference between Overloading and Overriding :
-----------------------------------------------

Overloading :
Method Name should be same.
Argument Type should be different atleast order
There is no restrictions on return type.
We can Overlaod private,static,final methods.
There is no restriction on Access Modifier.
There is no restriction on throws clause.
Method resolution is always taken care by compiler based on reference type.
Overlaoding is aloso known as static polymorphism or compile time polymorphism or early binding.

Overriding:
Name of the Method and Argument Type should be same i.e Method Signature should be same including order.
Return type should be same or Covariant return type
Access modifier should be increase but cannot decrease
Overridden method should throw the same execption as parent or its sub type.

Method Resolution is taken care by JVM based on runtime object.
Overriding is also known as Dynamic Polymorphism or Runtime Polymorphism or Late Binding.


******************************************************************* 10.Polymorphism   *****************************************************************

Same name but multiple forms is nothing but Polymorphism.
We can use the same function name with different arguments.

	abs(int i)
	abs(double d)
	abs(float f)
	
Consider the Scenario 

	List list=new ArrayList();
	List list=new LinkedList();
	List list=new Vector();
	List list=new Stack();
	
We can use the same list reference to hold any implementation class object.

Consider the Scenario

Arraylist arrayList=new ArrayList();

we can use arrayList reference to hold only ArrayList Obejcts.
By using child class reference we can call methods available in both parent and child class Objects.
If we konw the exact runtime Object the we go for the above approach.

List list=new ArrayList();
we can use the list reference to hold any of its implementation class obejcts.
By using parent reference we can call methods available only in parent class and child specific methods we cannot call.
If we don't know exact runtime object the we go for this approach.

There are two types of polymorphism 

Static polymorphism  --> Method Overloading,Method Hiding
Dynamic Polymorphism  --> Method Overriding

Encapsulation talks about security.
Inheritance talks about reusability.
Polymorphism talks about flexibility.

******************************************************************* 13.Static Block  **********************************************************************

Static block will be executed at the time of Class Loading.
Hence at the time of Class Loading if we want to perform any other activity,then we have to define the code inside static block.

Scenario One :
--------------
At the time of JDBC Driver class Loading,automatically registering the driver with DriverManager is required.
Every driver class contains a static block to perfrom this activity.

	Class Driver{
	static{
	//Register the Driver class with Driver Manager
	}
	}

Scenario Two :
--------------
At the time of Class Loading corresponding native libraries should be loaded.
Hence we have to define this step inside the static block.

	Class Test
	{
		static{
		System.LoadLibrary("Native Library Path");
		}
	}
	
Note :
------
Within a Class we can take any number of static blocks but all the static blocks will be executed from top to bottom.
Without using main() it is possible to print some statement on the console.
Without using main() and static block it is also possible to print some statement on the console.
Without using System.out.println() it is also possible to print some statement on the console.


******************************************************************* 15.Object Creation Ways  *******************************************************************

We can create the Object in 5 different ways

1.By Using new Operator
	
	Test test=new Test();

2.By Uisng newInstance() of Class.forName()

	Object o=Class.forName("Test").newInstance();
	
3.By using Factory Method

	Runtime r=Runtime.getRuntime();
	
4.By Using clone()

	Test t=new Test()
	Object o = t.clone();// Constructor is not executed
	
5.By using Serialization 

	FileInputStream fis=new FileInputStream();
	ObjectInputStream ois=new ObjectInputStream(fis);
	Object o=ois.readObject(); // Constructor is not executed
	

Uninitialized Arrays :
----------------------
int[] i;

If an array is  not initialized then it refers to null.
Once we create an array,every element by default initialized with default values irrespective of whether it is local or instance or static.
Every variable in Java should be either primitive or reference type.
Every Variable in Java Should be either instance or static or local.


******************************************************************* 17.Constructor  *******************************************************************

Class Student
{
	String name;
	int rollno;
}

If we are not perfroming initialization then JVM provides the default values.
Then within the class Student,all the names have the default values null and rollno as 0.
Object creation is not enough and we need to perfrom initialization then only object is in a position to provide the proper response.

If we perform initialization at the time of declaration, then all the objects have the same values.
If we perfrom initialization inside the instance block then all the objects have the same values.
If we perfrom initialization seperately for each block then length of the code will be increased and is not reccomended.

Whenver we are creating an object some peice of code will be executed to perform initialization.
Peice of code is nothing but Constructor.
Main object of constructor is to perform initialization of an object.
For every object creation instance block and constructor will be executed.

Difference between instance block and Constructor :
---------------------------------------------------
Main purpose of Constructor is to perfrom initialization of an Object.
Other than initialization activity if we want to perfrom any other activity we need to define inside static block.
For every Object creation both static block and constructor will be executed but static instance block first followed by contructor.

Both Constructor and instance block will have different purpose.
Replacing one concept with another concept is not possible.

public class ConstructorDemo {

	static int count = 0;
	{
		count++;
	}

	ConstructorDemo() {
		System.out.println("Default Constructor");
	}

	ConstructorDemo(int i) {
		System.out.println("Integer Constructor");
	}

	public static void main(String[] args) {
		ConstructorDemo demo = new ConstructorDemo();
		ConstructorDemo demo1 = new ConstructorDemo(1);
		System.out.println(count);
	}
}

For example if we write count in constructor,sometimes to create a Single Object we need to execute more than one Constructor.

Rules for Writing Constructor :
-------------------------------
Name of the Constructor and Name of the Class should be same.
Return Type concept is not applicable for Constructor even void also.
Whenever we are giving return type to the Constructor,Compiler treats as a Method and does not give any Compile time Error.
We can also have a method name whose name is same as Class Name but not according to the naming convention.
The only applicable modifiers for the Constructor are private,default,protected,public.

Default Constructor :
---------------------
Every Class in Java including abstract class should contain Constructor.
It may be explicitly provided by the programmer or generated by the Compiler.
If we are not writing any constructor then only compiler will generate the default Constructor.
If we are writing atleast one constructor then compiler won't generate the default constructor.

Prototype of default Constructor :
----------------------------------

Class Test{

}

Class Test { 
 Test()    // Default Constructor
 {
 super();  
 }
}

If we are not writing any constructor then only compiler will generate the default constructor.
Prototype of default constructor is always no argument constructor.
Access modifier of default constructor is same as Class Modifier but this rule is applicable only for public and default.
Default Constructor contains one line i.e super() .
It is a No Argument call to the Super class Constructor.

Compiler verfies whether the Constructor has written properly or not.
Compiler also verifies whether the first line inside every constructor should be either super() or this().
If we don't write anything compiler generates super() for us.

Note :
------
We can use super() or this() only in the first line.If we are using it in other than first line we get compile time error.
We can use either super() or this() in default constructor but not both.
We can use super() or this() only in constructor.If we are trying outside we get compile time error.


Difference between super(),this() and super,this :
--------------------------------------------------
super(),this():
---------------
super() and this() are used to call super class and current class constructors directly.
We can use super() and this() only inside constructor.

super,this :
------------
super and this are applicable only for instance variables.
These are the keywords used to refer super class and current class instance variables.
we can use super and this keywords anywhere except static area.

Overloaded Constructor :
------------------------
A Class can have any number of constructors.
All these constructors can have same name but different argument types.
Overloading concept is applicable for Constructors.

Every Class in Java including abstract class contains constructor but interface cannot contain constructor.
Abstrac Class constructor will be executed whenever we are creating child class object.

Note :
------
Constrcutor is applicable only to that class to perform initialization.
Parent Class Constructor is not avaialbale to Child Class Constructor.
Inheritance and overriding concept is not applicable for Constructors.

Note :
------ 
Recursive Method Invocation gives Runtime Exception
where as Recursive Constructor invocation gives Compile Time Error.

Note :
------
Functionality of super() is to call No Argument Constructor in the Parent Class.
Whenever we are writing any argument Constructor,it is highly recomended to write No Argument Constructor also.

Constrcutor w.r.t Exception Handling :
--------------------------------------
If a Child class Constructor throws some checked Exception then the Parent Class Constructor should throw the same Checked Exception or its Parent.

******************************************************************* 18.Singleton Class  **************************************************************************

For any Java Class if we are allowed to create only one Object,then such class is said to be Singleton Object.
Advantage of Singleton Object is instead of creating multiple Objects for the same purpose,create only one object and reuse the same object for every request.
so that performance and memory utilizations will be improved.

If we want to get runtime object

	Runtime r-Runtime.getRuntime();
	
Using Runtime object we can communicate with JVM.
Here getRuntime() verifies is there any object is present or not.
If present reuses the object otherwise creates the new Runtime object.

Creation of our own Singleton Object :
--------------------------------------
If we are allowed to create an object using constructor then we can create so many objects.
Here we are voilating the Singleton nature.

	Runtime r=Runtime.getRuntime();
	
Here entire Singleton nature is present inside getRuntime().

Rules for creating Singleton :
------------------------------
1.Declare the private static reference variable of the same class.
2.Declare the private constructor.
3.Define the static method and verify the object has created or not.


public class SingletonDemo {
	private static SingletonDemo singleton = null;

	private SingletonDemo() {
		System.out.println("Private Constructor");
	}
	private static SingletonDemo getSingleton() {
		if (singleton == null) {
			singleton = new SingletonDemo();
		}
		return singleton;
	}
	public static void main(String[] args) {

		SingletonDemo demo = singleton.getSingleton();
		SingletonDemo demo1 = singleton.getSingleton();
		System.out.println(demo == demo1);
		System.out.println(demo.equals(demo1));
	}
}

Note :
------
Without declaring parent class as final we can restrict child class creation by declaring Parent class Constructor as private.

********************************************************************* 19.Typecasting  **********************************************************************

Syntax :
--------

		A b=(C)d;
		
A is Class or Interface
b is object reference
C is Class or Interface
d is Object reference

Compime time Checking (One) :
-----------------------------
The type of d and C must have some relationship i.e
either Parent to Child or Child to Parent or same Type otherwise we get compile time Error.

	Object object=new String("durga");
	StringBuffer sb=(StringBuffer)object;

Compime time Checking (Two) :
-----------------------------
C must be either same or derived type of A otherwise we get compile time Error.

	Object object=new String("durga");
	StringBuffer sb=(String)object;
	
Runtime Checking :
------------------
Underlying Object type of d must be same or derived type of C otherwise we get Runtime Exception saying ClassCastException.
	
	Object object=new String("durga");
	StringBuffer sb=(StringBuffer)object;
	
Here C and d has some relationship
Here C is same as A
Here at Runtime underlying Type of d is String which is not same as C nor derived type of C.
we get RuntimeException.

Note :
------
Through Typecasting we are not creating any new Object for the existing Object.
we are trying to provide another type of reference.

********************************************************************* 20.vararg Method  *************************************************************************

Untill Java 1.4 we cannot declare a method with various number of arguments.
If there is a change in adding new argument,compulsory we have to declare a new method which increases the length of the code and reduces readability.
To overcome this problem we use vararg method is introduced in 1.5 version.
From 1.5 version onwards we can declare a method which can take any number of arguments.

	m1(int... x) or m1(int ...x)
	
we can invoke this method by passing any number of int values including 0 also.

	public static void m1(int... x)
	{
		System.out.println("Vararg Method");
	}
	public static void main(String[] args) {
		m1(1);
		m1(1,2);
		m1(1,2,3);
	}
	
We can differentiate the values by using index.

	public static void m2(int... x)z
	{
		int total=0;
		for(int y:x)
		{
			total=total+y;
		}
		System.out.println("Vararg Method Total is :"+total);
	}
	
Note :
------
We can mix normal parameter with vararg parameter but vararg parameter should be the last parameter.
We cannot take more than one vararg parameter.
vararg method will get the least priority than the general method.
If no other method matches then only vararg method will get executed.
vararg is same as default case in switch.

Note :
------
we cannot declare both m1(int... x) and m1(int[] x) because vararg is converted into single dimensional array.

Vararg parameter vs Single Dimensional Array :
----------------------------------------------
Whenever single dimensional Array is present we can replace with Vararg Parameter.
Wherever vararg parameter is present we cannot replace with Single Dimensional Array.


********************************************************************* 21.Main Method  ***********************************************************************

Class Test {

}

Whether the Class contains Main Method or Not,Whether it is declared according to the requirement or not,
These things are not responsibilities of the compiler.
But at runtime JVM is responsible to perform these changes.
If JVM is unable to find the required main() then we will get Runtime Exception saying NoSuchMethodError : main

At runtime JVM searches the main() with the following syntax

	public static void main(String[] args)
	
public :
To call this method by JVM from anywhere
static :
without existing object also JVM has to call this method
void :
main() won't return anything to the JVM
main :
this is the method name configured inside JVM
String[] args :
These are the command line arguments

If we perform any changes to the above signature then we will get RuntimeException saying NoSuchMethodError :main

Note :
-----
eventhough above syntax is very strict following changes are acceptable.

1.order of modifiers is not important
2.we can declare String[] args in any number of acceptable form
3.instead of args we can use any valid identifier
4.we can replace String[] with vararg parameter


We can declare main() with the following identifiers

final 
synchronized 
strictfp

Note :
------
we can overload the main() but JVM will always execute the String[] args main().
Other overloaded method will be executed as a Normal method.

Note :
------
Inheritance concept is also applicable for main().
Hence while executing child class if child class doesnot contain main() then parent class main() will be executed.
Overiding concept is applicable for main() but it is not method overriding,it is method hiding.

