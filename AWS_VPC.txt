1.AWS VPC  								(Vishal Padghan)  					[22-APR-2021]  (Done)		(Refer Articles)
2.AWS VPC  								(Mathew Kenny Thomas)  				[26-SEP-2021]  (Done) 
3.AWS VPC  				                (Prashant Lakhera)  				[27-SEP-2021]  (Done) 		(Refer Articles)
4.VPC setup on AWS						(Harshit Sharma)					[20-JUL-2021]  ()   		(Refer Articles)
5.AWS VPC  								(Lewis Gavin)  						[22-APR-2021]  ()			
6.AWS VPC								(varunmanik1)						[22-APR-2021]  ()			(Refer Articles)
7.VPC Peering 							(Crishantha Nanayakkara)			[30-SEP-2021]  (Done)
8.VPC Peering 							(Chris Hare)						[30-SEP-2021]  (Done)
9.AWS VPC Endpoints						(Crishantha Nanayakkara)			[22-APR-2021]  ()
10.Custom VPCs on AWS					(Crishantha Nanayakkara)			[22-APR-2021]  ()
11.AWS S3 VPC endpoint					(Be A Better Dev)					[22-APR-2021]  ()
12.Introduction to Amazon VPC			(Be A Better Dev)					[22-APR-2021]  ()
13.Bastion Host							(Rahul wagh & Dhfernando)			[28-AUG-2024]  (Done)
14.VPC Peering							(Rahul wagh)						[28-AUG-2024]  (Done)
13.Transit Gateway						(Rahul wagh)						[28-AUG-2024]  ()
14.NAT Gateway                          (Rahul wagh)						[28-AUG-2024]  ()
15.VPC Flow logs                        (Rahul wagh)						[28-AUG-2024]  ()
16.VPC End Point                        (Rahul wagh)						[28-AUG-2024]  ()
17.VPC End Point Service                (Rahul wagh)						[28-AUG-2024]  ()

IGW
NAT Gateway
NAT Instance
VPN Connection 
Direct Connect
Elastic IPAddress
Virtual Private Gateway
Customer Gateway
NACL

#################################################### 1.AWS VPC (Vishal Padghan)   #########################################################

Security becomes more important when some resources needs to be shared with third party vendors because we run the risk of exposing sensitive data to them.
VPC is a private cloud in the AWS Environment that enables us to launch the AWS Services into the virtual Network that we have defined.
We can also have control over the virtual network and we can restrict the incoming traffic using Security Groups and NACL's.

There are two types of VPC
Default VPC i.e. created by Amazon.
Custom  VPC i.e. created by us to meet the securty needs.

Basic Concepts in VPC :

1.Subnet and its utility
2.Route Table
3.Internet Gateway
4.Creating VPC using AWS Console
5.Creating private and public subnet inside the VPC.

1.Subnet and its Utility :
--------------------------
Subnet can be thought of dividing larger network into smaller networks.
This should be done because maintainance of smaller networks is easier as compared to larger networks.
It also provides the security to the network from other networks.

Example :
There are different teams in an organization like HR,Finance,Support,Operations etc.
The data accessible to the Finance team cannot be given to the operations team etc.
Here we will create a subnet such that it provides the security to the network from other networks.

2.Route Table :
---------------
Route table contains set of rules called routes which determines where the traffic has to be redirected.
Route table can also be used to add the Internet Gateway to the Subnet.
There can be Multiple Route Tables in a VPC.

3.Internet Gateway :
--------------------
Internet Gateway allows the instance in a VPC to connect to the Internet i.e.
Internet Gateway allows the user to make the subnet public by providing a route to the Internet.
With the help of Internet Gateway an Instance inside the VPC can be accessed through the Internet and resources outside the Instance can access the Instance.
Only one Internet Gateway can be attached to a VPC at a time.

4.Creating VPC using AWS Console :
----------------------------------


5.Creating A Non-Default VPC And Creating A Private And Public Subnet Inside The VPC :
--------------------------------------------------------------------------------------

####################################################  2.AWS VPC (Mathew Kenny Thomas) ##############################################################

AWS VPC is a private cloud in AWS environment that allows us to launch AWS services into a virtual network that we have defined.
This virtual Network closely resembles to a traditional network that we operate in our own Data Center with the benefits of using scalable infrastructure of AWS.

Network Address Translation(NAT) :
----------------------------------
Since the subnet is private,the ipAddress assigned to an instance cannot be used in public.
NAT maps the private ipAddress to the public ipAddress and vice versa.

Elastic IPAddress :
-------------------
Elastic IPAddress is a static and public IPv4 Address designed for dynamic cloud computing.
We can associate an Elastic IpAddress with any Instance or Network Interface for any VPC in our Account.
With an Elastic IpAddress,we can mask the failure of an Instance by rapidly remapping the address to another Instance in our VPC.

Security Groups :
-----------------
Security Group acts as a Firewall to control Inbound and Outbound Traffic.
Each Security Group has rules according to which traffic is governed.
In Amazon Firewall the only action that can be carried out is allow.
We cannot create a rule to deny.
The Destination is always the Instance on which the Service Security Group is running.

Customer Gateway :
------------------
Customer Gateway is the resource that is installed on the Client Side and is often linked to the provider side.
Amazon VPC VPN links our Data Center to our Amazon VPC.

Virtual Private Gateway :
-------------------------
Virtual Private Gateway is the VPN Concentrator on the Amazon side.
We can create a Virtual Private Gateway and attach it to the VPC from which we can create the VPN Connection.

VPN :
-----
VPN stands for "Virtual Pair Networking" which is the popular Internet Security Method which was originally designed for large organizations where
Employee needs to connect to a certain computer from different location.

VPC Peering :
-------------
VPC Peering connection allows us to route traffic between two VPC's using IPv4 or IPv6 private Address.
Instances within the VPC can communicate with each other as they are on the same Network.
We can create a VPC Peering connection between two VPC's or with a VPC in another AWS Account.
VPC Peering connection helps us to facilitate the transfer of data. 

Network Access Control List :
-----------------------------
An optional layer of security for our VPC that acts as a firewall for controlling traffic in and out of one or more Subnets.
We might setup NACL rules with similar to security groups in order to add an additional layer of security to VPC.
Default NACL is configured to allow all traffic to flow in and out of the Subnets to which it is associated.

####################################################  3.AWS VPC (Prashant Lakhera)  #########################################################

AWS VPC is a private cloud that enables us to launch AWS services into a virtual network that we have defined.
This virtual Network closely resembles to traditional Data Center with the benefits of using the scalable infrastructure provided by AWS.
Since VPC is private and we can choose our own Network/CIDR Range.
We can get the control of what Subnet can do and what it cannot do.

When we create an AWS account, AWS provides a default VPC. 
This VPC includes a default subnet in each availability zone. 
However, we have limited control over the default VPC. 
The default VPC includes an Internet Gateway and its subnets are public by default.

Consider the scenario where we want to deploy a Database Server, and we don't want the Database Server to communicate with the internet. 
In this case, we need to create a custom VPC with a private subnet where the Database Server can reside.

Note :
------
If we delete the default VPC there is a way to recover it.
 
Steps Involved in creating VPC :
--------------------------------
1.Choose an IPAddress and CIDR range.
2.Divide the Network into Sub Networks and this is for high availabilty.
3.For our network to be reachable from the internet, we need to configure the Route Table to direct the traffic to the Internet Gateway. 
Internet Gateway allows us to send data to the internet and receive data from the internet, making our network accessible from the outside world.
4.Setup Network Filters i.e. we want which port/protocol/network range to be allowed or denied(Security Group or Network ACL's)

In AWS Console VPC can be found under 
Networking and Content Delivery --> VPC --> Your VPC's --> Create VPC.

Enter the Name of the VPC under Name Tag i.e. prashant-lakhera-vpc
Provide the CIDR block.  (10.123.0.0/16)
Tenancy as default.

1.Choose an IPAddress and CIDR range :
--------------------------------------
Some IP ranges recomended by AWS are
10.0.0.0 - 10.255.255.255  (Prefix is 8)
172.16.0.0 - 172.16.255.255 (Prefix is 16)
192.168.0.0 - 192.168.255.255 (Prefix is 16)

Note :
------
One of the most important thing to note is that while choosing the Network range we need to avoid the Network range that overlaps with
On premise network or other VPC's.
If we require to connect our VPC with Data Center via VPN or create VPC peering between two VPC's these overlapping CIDR range will give conflicts.

As soon as we create VPC,Number of things created for us are 

Route Table :
-------------
Route Table contains set of rules called routes which determines where the traffic has to be redirected.

Network Access Control List :
-----------------------------
Firewall which works at Subnet level is NACL.
NACL adds an additional layer of security to our VPC and controls traffic going in and out for one or more Subnet's.
The default NACL is configured to allow traffic to flow in and out of the Subnets to which it is associated.

Secutity Group :
----------------
Firewall which works at instance level is Security Group.
Security Group acts as a firewall to control the inbound and outbound traffic for its associated instance.
VPC comes with default Security Group.
Any Instance If is not associated with any other Security Group during launch then it is associated with default Security Group.

2.Divide the Network into SubNetworks and this is for high Availabilty :
------------------------------------------------------------------------
One of the main reason to divide the large network into smaller network i.e. Subnet's is to make an Application highly availabile.
The allowed block size is between /16 netmask(65536 IPAddress) and /28 netmask(16 IPAddress).
The smallest Subnet mask we can choose is /28.

Public Subnet :
10.123.1.0/24
10.123.2.0/24

Private Subnet :
10.123.3.0/24
10.123.4.0/24

Note :
------
The first 4 IP and the last IP is not available for use.

If a Subnet with CIDR block 10.0.0.0/24,following 5 IPAddress are not used.
10.0.0.0 : Netwoek Address
10.0.0.1 : Resrved by AWS for VPC Router
10.0.0.2 : Reserved by AWS for Amazon DNS Server
10.0.0.3 : Reserved by AWS for Future use
10.0.0.255 : Network Broadcast Address.AWS does not support Broadcast Address.

In the navigation pane,choose Subnet and then choose create Subnet.
Enter the name of the Subnet under Name Tag i.e. prashant-lakhera-public-subnet-(availabilityzone)
From the dropdown select the VPC that we have created.
Select the Availabilty Zone where we want to create a Subnet.
In the IPv4 CIDR block select the IPv4 Address range for Subnet.

Note :
Same set up we need to do for other Availabilty Zones.

3.Internet Gateway :
--------------------
Next step is we need to create an Internet Gateway.
In the left pane click on Internet Gateway and choose to create an Internet Gateway  i.e. prashnat-lakhera-internetgateway
By default Internet Gateway is in detached State.
Attach Internet Gateway to a VPC.

Internet Gateway is horizontally scaled,redundant and highly available VPC component.
Internet Gateway performs NAT for Instances that have been assigned public IPv4 Address.
Internet Gateway supports both IPv4 and IPv6 traffic.

How Internet Gateway Works :
----------------------------
The main purpose of an Internet Gateway in AWS is to enable the communication between instances in your VPC and the internet. 
For an instance to communicate with the internet, it must have either a public IPv4 address or an Elastic IP address associated with its private IPv4 address. 
Instances themselves are only aware of their private IPv4 addresses.

The Internet Gateway performs one-to-one Network Address Translation (NAT) on behalf of the instance. 
When traffic leaves the VPC subnet and is sent to the internet, 
the source (reply) address is translated to the instance’s public IPv4 address or Elastic IP address, not the private IPv4 address. 
Similarly, when traffic destined for the instance reaches the public IPv4 address or Elastic IP address, 
the Internet Gateway translates the destination address to the instance’s private IPv4 address before delivering the traffic within the VPC.

Note:
IPv6 Address are globally unique and therefore public by default.

4.Routing Traffic :
-------------------
A Route Table in AWS VPC contains a set of rules, known as routes, which are used to determine where network traffic should be directed. 
The default routing rule ensures that traffic destined for resources within the VPC stays within the VPC.

Each subnet within the VPC must be associated with a Route Table, which controls the routing for that subnet. 
While you cannot delete the main Route Table, you can replace it with a custom Route Table.

If we want to send the traffic to an internet, you need to create an Internet Gateway, attach it to the VPC.
Then add a route in the Route Table with the destination set to 0.0.0.0/0 and the target set to the Internet Gateway.
When you create a subnet, it is automatically associated with the main Route Table of the VPC. 
By default, the main Route Table does not contain a route to an Internet Gateway, so it does not allow internet-bound traffic unless explicitly configured.

In the left pane,click on Route Tables --> create Route Table --> Name the Route Table and select the VPC.
First row in the Route Table is "local Route" which enables the Instances within the VPC to communicate.
This route is present in every Route Table by default and cannot remove it.

Enable the Internet Access --> click on Edit Routes --> Add the route 0.0.0.0/0 which we have created in Internet Gateway.
This will send the traffic outside the VPC to Internet Gateway.
Click on Subnet associations and then edit Subnet Association.

Public Subnet :
10.123.1.0/24
10.123.2.0/24

Private Subnet :
10.123.3.0/24
10.123.4.0/24

Public Subnet :
---------------
If the Subnet is associatd with Route Table which has a route to an Internet Gateway, then it is called Public Subnet.

Befor we launch an Instance,under Subnet -> Auto Assign Public Ip is set to NO.
We want Instance that launched in public Subnet to get Public IP.
Then modify Auto Assign IP Settings.

#################################################### 7.VPC Peering (Crishantha Nanayakkara) ####################################################

VPC Peering provides a network connection between two VPC's that enables us to route traffic between them privately.
VPC Peering Connection can be between two VPC's within the same account or different account or other regions.
VPC Peering Connection's are fault tolerant and there is no single point of failure.
AWS makes sure that connection is stable irrespective of the load.

VPC Peering uses the existing infrastructure to create the VPC Peering.
It does not need any extra hardware or even VPN to establish it.
The communication between two VPC's are done via private IP's.

In order to enable VPC Peering between two Subnet's we are required to add a route in the Route Table that points to the IPAddress range of the Peer VPC.
Here routes are required at both the Route Tables.
The connection between VPC's are always point to point.

Note :
------
VPC does not support Edge Routing or Transitive Peering i.e. It cannot connect one VPC from another VPC.

#################################################### 8.VPC Peering (Chris Hare) ################################################################

Depending on the organization, we may have multiple VPC's or VPC's deployed across different regions. 
There are several scenarios where having multiple VPCs is advantageous.

For different stages in the development process.
To deploy services in multiple regions.
To use different VPCs for various business units.
To segregate applications based on criteria such as functions, security levels, etc.

When you have multiple VPCs, you might need to connect them to allow communication between resources in different VPCs. 
One common method for achieving this connectivity is VPC Peering. 
VPC Peering allows you to connect two VPCs, either within the same region or across different regions,enabling them to route traffic between each other using private IP addresses.

However, VPC Peering has some limitations:
It is not transitive; if VPC A is peered with VPC B, and VPC B is peered with VPC C, VPC A cannot communicate with VPC C.
Peering connections are established on a per-VPC basis, so managing a large number of VPCs with many peering connections can become complex.
For more scalable and flexible connectivity, particularly in larger environments, AWS Transit Gateway is another option. 
Transit Gateway allows you to connect multiple VPCs and on-premises networks through a central hub, enabling more straightforward and more scalable network architectures.

Regardless of the reasons for multiple VPC,sometimes we need to connect them together so that they can exchange information.
There are two methods for achieving this connectivity
1.VPC Peering
2.Transit Gateway

1.VPC Peering :
---------------
VPC Peering means establishing a route between two or more VPC's so that they communicate with each other.
It starts getting complicated when there are more than two VPC's in the peering arrangement.

VPC Peering does not support Transitive Peering.
Transitive Peering means If VPC A is connected to VPC B and VPC B is connected to VPC C.
Then VPC A cannot communicate with the resources present in VPC C.
This networking arrangement is not supported in VPC peering Model.

Consequently we can use Mesh topology to create peering between multiple VPC's.
Eventhough it is referred to as Mesh topology each peering connection is still Point to Point.
If there is a failure between one of the peering connections,Traffic cannot be routed across different connection.

Setting up :
------------
1.Create two VPC's which do not have overlapping of CIDR blocks.
2.Create Peering connection request between two VPC's.
3.Owner of the Remote VPC approves the Peering Request
4.Configure Routes on both VPC
5.Adjust affected Security Groups

Peering within the same AWS Account :
-------------------------------------
The VPC where the request is made from is known as Requestor VPC and the other is Acceptor VPC.
When both the Requestor and Acceptor are in the same AWS Account and VPC Peering Request is created using CloudFormation
Then CloudFormation will attempt to accept the request automatically.

In the Left Pane --> Click on VPC Peering Connection --> Create Peering Connection.
Then enter the Details 

Name of the Peering Connection
Requestor
Acceptor
Account and Region

#################################################### 9.AWS VPC Endpoints  #########################################################################


#################################################### 13.Bastion Host (Rahul wagh & Dhfernando) ####################################################

When it comes to cloud computing security is utmost important.
AWS provides a service called VPC which is virtual private cloud that enables us to launch AWS resources in the network that we have defined.
One of the most critical components in securing an AWS VPC environment is Bastion Host.

Bastion host is an EC2 instance which is deployed within the VPC which has access to the internet and acts as a gateway between the Internet and private subnet in the VPC.
Private Subnet is not accessible from outside.
Bastion host is referred to as Jump Host or Jump Server because it is used to jump from the internet to the private network.
Bastion host acts as a single point of entry to access the private subnet within the VPC from the internet.


Create a VPC and add CIDR range.

	bastion-host-vpc
	12.0.0.0/16
		
Create the Internet Gateway and attachc it to the newly created VPC.

	bastion-host-internet-gateway
	
Now create the Public subnet and Private subnet within the VPC.

	Select the VPC i.e. bastion-host-vpc
	Provide the Subnet Name  i.e. bastion-host-public-subnet
	Select the Availability zone
	Add the CIDR range  i.e. 12.0.1.0/24
	
	Select the VPC i.e. bastion-host-vpc
	Provide the Subnet Name  i.e. bastion-host-private-subnet
	Select the Availability zone
	Add the CIDR range  i.e. 12.0.2.0/24
	
Create a Route Table for Public Subnet.

Provide the Route Table name and select the VPC.
The add the Subnet to the Route Table in the Edit Subnet Association.
Also add the Route to the Internet in the Route Table.

	rt-bastion-host-public
	bastion-host-vpc
	
	Destination as 0.0.0.0/0
	Target as bastion-host-internet-gateway
	
Create a Route Table for Private Subnet.
The add the Subnet to the Route Table in the Edit Subnet Association.

	rt-bastion-host-private
	bastion-host-vpc
 
Create the Bastion Host within the Public Subnet :

	Name : bastion-host-ec2
	AMI : ubuntu
	Instance Type: t2.micro
	Key pair : aws-login
	Network settings : 
			Select bastion-host-vpc as VPC 
			rt-bastion-host-public as Subnet
			Enable Auto assign public ip
			Create the security group i.e. bastion-host-public-sg
			Then launch the instance.


Create the EC2 instance within the private Subnet

	Name : bastion-host-ec2-private
	AMI : ubuntu
	Instance Type: t2.micro
	Key pair : aws-login
	Network settings : 
			Select bastion-host-vpc as VPC 
			rt-bastion-host-public as Subnet
			Enable Auto assign public ip
			Create the security group i.e. bastion-host-private-sg
			Here we need to change the source type i.e. 12.0.1.0/24 so that t can only be accessed from public Subnet.
			Then launch the instance.
			
Login to the Bastion host using Gitbash.

	ssh -i "aws-login.pem" ubuntu@35.154.108.49

Now to enter into into the private instance from Bastion Host
	
	Copy the private key i.e. aws-login into Bastion host.
	To do this copy the key from local host using the command cat aws-login.
	Create the file in Bastion host i.e. aws-login-from-bastion.
	Open it in vi mode and paste the key which has copied from local.
	Convert to chmod 400 aws-login-from-bastion.
	
Copy the private ip of private Instance and form the command.

	ssh -i "aws-login-from-bastion" ubuntu@12.0.2.161
	

########################################################### 14.VPC Peering (Rahul wagh) #########################################################

Create Two VPC's :
vpc-peering-one
11.0.0.0/16

vpc-peering-two
12.0.0.0/16

Create Route Table for both the VPC's :
rt-peering-one
rt-peering-two

Create public Subnet in one VPC and private Subnet in another VPC.

peering-one-public-subnet
Select the Availability zone
11.0.1.0/24

peering-two-private-subnet
Select the Availability zone
12.0.1.0/24

Add subnet Association for the route Tables.

In the public subnet route table we need to grant the internet access i.e. rt-peering-one
For this we need to create an Internet Gateway.

	vpc-peering-one-ig
	vpc-peering-two-ig
	
Create an EC2 instance in vpc-peering-one :
Add one more security group along with SSH.
Also add the user data and connect to an EC2 instance.

	#!/bin/bash
	yes | sudo apt update
	yes | sudo apt install apache2
	echo "<h1>Server Details</h1><p><strong>Hostname:</strong> $(hostname)
	</p><p><strong>IP Address</strong> $(hostname -I | cut -d ' ' -f1)</p>" >
	/var/www/html/index.html
	sudo systemctl restart apache2

Create an EC2 instance in vpc-peering-two.


	

	
	











  



 