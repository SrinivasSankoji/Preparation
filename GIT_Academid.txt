1.Introduction				[14-04-2021]			(Done)
2.Basic Commands			[14-04-2021]			(Done)
3.Stash                     [14-04-2021]			(Done)
4.Merge vs Rebase           [14-04-2021]			()


*********************************************************************** 1.Introduction ***********************************************************************

GIT is a version Control System.
GIT is a tool that allows us to manage our source code history.
GIT can be downloaded and is a version Control System which allows us to manage our source code history.
As GIT is downloaded it can be a local tool that we can install on our Machine.


GitHub is a hosting and collabartion provider which has the purpose to host the git repositories.
GitHub is a Web based solution.
We can push the GIT Repositories to the GitHub so that other developers can access the Code and collabarate in Project.
Pushing the project from GIT to GitHub is totally optional and we can work locally with GIT.
Alternative to GitHub is AWS Code Commit.

Git and GitHub are two different things althouh the names seems to be quite similar.
  
Repository is the location where the code history is stored.
We have to tell git that it should manage certain projects or specific projects.For this purpose we have to add the project files to the Repository.
Inside the Repository the code is also structured in efficient and logical way.

Branch :
Inside the Repository we also has a branch.
Branch is the folder within the Repository that contains commits.

Commit :
Commit stands for the different stages and different versions of the source code that we saved inside a branch.

Consider the case we have started the code and finished the code.
Two versions of the code in two commits.
These two commits are saved inside a Branch.
Branch is the part of the GIT Repository.

Example :
We run the GIT either with the command prompt or Terminal on the Windows.
If we don't have git,source code history cannot be maintained and cannot go back to the previous state.
GIT allows us to manage our different versions of source code history in a very efficient and easy to maintain manner.
We have to trun our project into a project managed by GIT.


git init :
This will initialize the GIT Repository i.e telling the GIT to manage the project.
Once the GIT is initialized we get all the files in the project that needs to create the Repository.
With the Repository we can make sure that GIT will monitor and control all the files in the Folder.

git status :
It will show the untracked files or modified files in the Repository.
If the file is newly created then it will be shown as untracked.
If the file is already present in the Repository then it will be shown as modified.

git add . :
If the status is untracked,GIT knows that thare are some files which needs to be tracked by GIT.
We have to tell explicitly tell GIT which files it should include in our Repository therefor which code parts it should track.
To tell the GIt to track these files we use the command 

	git add . or git add filename
	
The above command will add all the files of the project folder to the tarcking logic of the Repository.
If we again run the command 
	
	git status

we now seen the status in green color which indicates that the changes are tracked by the GIT Repository.

git commit :
To commit the chnages to the branch in the Repository we use the command

	git commit -m "Changes"
	
Above command states that add this code as a version of the Code in the so called Branch.
once the commit is executed all the changes are pushed to the Repository.
To view the committed changes we use the command

	git log
	
Branch :
GIT automatically creates the master branch.

Note :
we created the Repository by using the command git init.
Inside the Repository we addded some file and added the code in it.
We informed the git to track the changes of the file using the command git add .
Once the changes are tracked by the GIT we add the changes to the Repository and we use the command git commit.
Once we commit the code,code is now saved into the master branch of our Repository.

Example :
Now Add some text in the file and perform the add and commit operations.

	git add .
	git commit -m "Second Commit"
	
Now we have two commits in the Master branch of our Repository.

Note :
GIT does not create copies of commits that we create.
GIT simply tracks the changes in the file.
When we perform add operation GIT looks for all the files in the code and verifies are there any changes in the file.
When we perfrom commit these changes will be saved.
GIT does not copy the code again and again and it will be highly inefficient.

Whenver we create a new commit then this commit would be the HEAD of the Branch.
If we want to go to the previous commit we use the command
	
	git checkout commitId
	
When we run the above command,we are now back to the code before and the HEAD points to this commit.
This commit is no longer part of Master Branch and We can use this feature to check what is happened in the previous commit.
If we want to go back to the current commit after the checkout commitid,we use the command

	git checkout master
	
Consider the Scenario where we have written some code and not performed any add and commit operation i.e not added to the Repository.
If we want to revert unstaged changes and go bck to the previous commit we use the command	

	git checkout -- .

git branch :
When we run the below command then we get the output as master with * .

	git branch
	
We are in the master Branch which was automatically created when we perform the first commit.

Branching :
Branch contains the code we have and different versions of it.
Consider the scenario where we work in the master branch and has a stable release.
If we want to add a new feature and don't want to crash ths stable way.
Then we can alos create a new branch for a secific feature and keep working on those features.
Once the feature is finished then we merge the feature to the master branch.

To create a new branch we use the command
	
	git checkout -b git-academid
	
If we run the below command,git is mapped to the newly created branch.

	git branch
	
If we run the below command,all the commits related to master branch are now part of newly created branch.

	git log

Add some text to the newly created branch and then add and commit the code.

	git add .
	git commit -m "Branch Creation"
	
To merge the newly created branch to the master branch,navigate to the master branch and then run the command

	git merge git-academid
	
As newly created branch is not required then we can remove the branch using the command

	git branch -D git-academid

Merge Conflicts :
If the branch and the master has the confilcts while merging the branch then we need to manually compare the text and resolve the conflicts.
After resolving the conflicts add and commit the code.

GIT Commands :
1.Initialization:
Navigate to Projct folder
git init
git status

2.Commits :
git add .
git commit -m ""
git log
git chckout commitId
git checkoit -- .
git reste --hard commitId

3.Branches
git branch
git checkout commitId
git checkout -b branchName
git merge branchName
git branch -D branchName


*********************************************************************** 2.Basic Commands *********************************************************************

GIT allows us to control different versions of our code locally on our Machine.
To push our code from our local Repository to a Web based remote Repository and for that we use GitHub.
GitHub allows us to store the local Repositories into Cloud.

Note :
creating a Repository with README i.e creating a Repository with some data.

Remote :
To establish the connection bewteen the Local Repository and remote Repository we use the command

	git remote add origin "URL"
	
origin is the name of the remote Repository.
Because we want to make sure that we establish the connection between a specific remote Repository.
We can alos give any name instead of origin.
To check whether the Local Repository is added to the Remote Repository we use the command

	git remote (or) git remote -v

remote -v can be used to see the remote Repository of the URL.
Now we have a connection between the Local Repository and the remote Repository.

Push:
To push the Local Repository to the Remote Repository we use the command

		git push -u origin master
		
push : To move the Local Repository to the Remote Repository
-u 	 : Upstream from Local Repository to the Remote Repository
origin : name of the Remote Repository
master : branch that can be pushed from Local Repository to remote Repository.

Here we have to enter the credentials for GitHub userName and password.
We can also cachce the username and password.
If we run the below command then we are at master branch created by Local Repository 

	git branch 
	
If we run the below command then it shows the link between the Local Repository and Remote Repository i.e repository at GitHub which has the name origin 

	git remote
	
If we run the below command then it shows the output as

	git branch -r  o/p : origin/master
	
Means we have a connection between the Local master branch and master branch in our remote Repository.

Cloning :
To get the code from the remote Repository we use the the command

	git clone "URL"
	
To push the changes to the remote Repository we use the command

	git push

To get the code from the remote Repository we have 2 options

	git fetch : To get the Code from remote Repository to the remote tarcking Branch.
	git checkout origin/master : To checkout the code from remote tracking Branch.
	git merge origin/master : To merge the remote tracking branch to the Local Branch.
	
The above two commands can be replaced by using single command 

	git pull
		
Note :
We have Local Repository and remote Repository.
In between we have remote tracking Repository and is kind of synchronization between local and remote Repository.

To remove the connection between the local Repository and remote Repository we use the command

	git remote rm origin

*********************************************************************** 3.Stash  ******************************************************************************

Working on a project is always not a staright forward thing.
We might work on specific feature and try out something and go back to the last commit.
But we might want to save the changes as a Draft.
With GIT stash it is easily possible without having to create a new commit for the stash status.
We can avoid dirty commits using GIT stash.

	git stash

When we run the above command all the changes are drafted and GIT points to the last commit.
To get back the changes we use the command

	git stash apply

We now has the option to commit the project or keep on working on the stash.
Which stash we want to display is based on index.

	git stash 0
	
git stash apply will apply the most recent changes.
To add the description for the stash we use the command
	
	git stash push -m "Meaningful Name to the Stash"
	
To remove/drop the stash we use the command

	git stash drop indexNumber
	
To merge the stash we use the command

	git stash pop indexNumber
	
*********************************************************************** 4.Merge vs Rebase  ********************************************************************

consider the scenario we have the following usecase.

Master   m1      m2    

Feature          m2     f1   f2 

Combined m1      m2     m3   featureBranch  


Here Master Branch has two commits i.e m1 and m2.
Create new Branch from the m2 commit of the Master Branch.
Then Create 2 more commits from the Master Branch.
Till that time Master Branch has one more commit i.e m3
Now we need to commit the Feature Branch in the Master Branch i.e 

	m1 --> m2 --> m3 --> Feature Branch.
	
To caheive this we have 2 Approaches 

1.Merge
2.ReBase

Merge :
Creating First Commit in Master Branch i.e named m1.
Creating Second Commit in Master Branch i.e named m2.
After Creating the Feature Branch and Adding two commits in the Feature Branch.
Creating Third Commit in Master Branch i.e named m3.

Feature Branch :
Creating First Commit in Feature Branch i.e named f1.
Creating Second Commit in Feature Branch i.e named f2.

	git merge --squash Feature
	
Problem with squash is that we need to manually resolve the Errors and then add and commit the code.
We had an another approach that can resolve the same issue i.e by using ReBase.

Note : We run the merge command in master Branch. 

Squash :
Squash allows us to summarize different commits.
All the changes in the feature branch i.e till the last commit puts together and merges them with the latest commit of the master Branch.

Rebase :
Creating First Commit in Master Branch i.e named m1.
Creating Second Commit in Master Branch i.e named m2.
After Creating the Feature Branch and Adding two commits in the Feature Branch.
Creating Third Commit in Master Branch i.e named m3.
