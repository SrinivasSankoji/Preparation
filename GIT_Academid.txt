1.Introduction				[13-04-2021]			()
2.Basic Commands			[13-04-2021]			()
3.Stash                     [13-04-2021]			()
4.Merge vs Rebase           [13-04-2021]			()


*********************************************************************** 1.Introduction ***********************************************************************

GIT is a version Control System.
GIT is a tool that allows us to manage our source code history.
GIT can be downloaded and is a version Control System which allows us to manage our source code history.
As GIT is downloaded it can be a local tool that we can install on our Machine.


GitHub is a hosting and collabartion provider which has the purpose to host the git repositories.
GitHub is a Web based solution.
We can push the GIT Repositories to the GitHub so that other developers can access the Code and collabarate in Project.
Pushing the project from GIT to GitHub is totally optional and we can work locally with GIT.
Alternative to GitHub is AWS Code Commit.

Git and GitHub are two different things althouh the names seems to be quite similar.
  
Repository is the location where the code history is stored.
We have to tell git that it should manage certain projects or specific projects.For this purpose we have to add the project files to the Repository.
Inside the Repository the code is also structured in efficient and logical way.

Branch :
Inside the Repository we also has a branch.
Branch is the folder within the Repository that contains commits.

Commit :
Commit stands for the different stages and different versions of the source code that we saved inside a branch.

Consider the case we have started the code and finished the code.
Two versions of the code in two commits.
These two commits are saved inside a Branch.
Branch is the part of the GIT Repository.

Example :
We run the GIT either with the command prompt or Terminal on the Windows.
If we don't have git,source code history cannot be maintained and cannot go back to the previous state.
GIT allows us to manage our different versions of source code history in a very efficient and easy to maintain manner.
We have to trun our project into a project managed by GIT.


git init :
This will initialize the GIT Repository i.e telling the GIT to manage the project.
Once the GIT is initialized we get all the files in the project that needs to create the Repository.
With the Repository we can make sure that GIT will monitor and control all the files in the Folder.

git status :
It will show the untracked files or modified files in the Repository.
If the file is newly created then it will be shown as untracked.
If the file is already present in the Repository then it will be shown as modified.

git add . :
If the status is untracked,GIT knows that thare are some files which needs to be tracked by GIT.
We have to tell explicitly tell GIT which files it should include in our Repository therefor which code parts it should track.
To tell the GIt to track these files we use the command 

	git add . or git add filename
	
The above command will add all the files of the project folder to the tarcking logic of the Repository.
If we again run the command 
	
	git status

we now seen the status in green color which indicates that the changes are tracked by the GIT Repository.

git commit :
To commit the chnages to the branch in the Repository we use the command

	git commit -m "Changes"
	
Above command states that add this code as a version of the Code in the so called Branch.
once the commit is executed all the changes are pushed to the Repository.
To view the committed changes we use the command

	git log
	
Branch :
GIT automatically creates the master branch.

Note :
we created the Repository by using the command git init.
Inside the Repository we addded some file and added the code in it.
We informed the git to track the changes of the file using the command git add .
Once the changes are tracked by the GIT we add the changes to the Repository and we use the command git commit.
Once we commit the code,code is now saved into the master branch of our Repository.

Example :
Now Add some text in the file and perform the add and commit operations.

	git add .
	git commit -m "Second Commit"
	
Now we have two commits in the Master branch of our Repository.

Note :
GIT does not create copies of commits that we create.
GIT simply tracks the changes in the file.
When we perform add operation GIT looks for all the files in the code and verifies are there any changes in the file.
When we perfrom commit these changes will be saved.
GIT does not copy the code again and again and it will be highly inefficient.

Whenver we create a new commit then this commit would be the HEAD of the Branch.
If we want to go to the previous commit we use the command
	
	git checkout commitId
	
When we run the above command,we are now back to the code before and the HEAD points to this commit.
This commit is no longer part of Master Branch and We can use this feature to check what is happened in the previous commit.
If we want to go back to the current commit after the checkout commitid,we use the command

	git checkout master
	
Consider the Scenario where we have written some code and not performed any add and commit operation i.e not added to the Repository.
If we want to revert unstaged changes and go bck to the previous commit we use the command	

	git checkout -- .

git branch :
When we run the below command then we get the output as master with * .

	git branch
	
We are in the master Branch which was automatically created when we perform the first commit.









 





*********************************************************************** 2.Basic Commands *********************************************************************




*********************************************************************** 3.Stash  ******************************************************************************





*********************************************************************** 4.Merge vs Rebase  ********************************************************************
