
#.Java Techie
1.Distributed Tracing in Microservice with Spring Cloud Sleuth & Zipkin     (Java Techie)     				[31-JUL-2020]  (Done)
#.Byte Programming
2.MicroServices | Distributed Logging & Tracing								(Byte Programming)				[17-JUL-2020]  ()
#.Green Learner
3.	
#reflectoring.io
4.Tracing in Distributed Systems with Spring Cloud Sleuth					(reflectoring)					[31-JUL-2020]  ()

**********************************  1.Distributed Tracing in Microservice with Spring Cloud Sleuth & Zipkin     (Java Techie)  **********************************************

We need to add the Configuration to push the tracing details to the Zipkin Server.
Define the AlwaysSampler in the Configuration.

	@Bean
	public Sampler defaultSampler() {
		return  Sampler.ALWAYS_SAMPLE;
	}
	
If we call the Rest API directly then both Trace Id and Sapn Id will be the same.

**********************************  4.Tracing in Distributed Systems with Spring Cloud Sleuth     (reflectoring Techie)  ****************************************************

If any error occurs in the upstream service,upstream service will probably log the error.
Since the downstream service recieves the error response,it will also log the error.
For a Straight forward error analysis,both log entries should be connected by a shared correlation id.
The correlationid is usually referred to as traceId.
TraceId is created when a request from outside of the system is directed at a downstream service.
TraceId is then passed to the upstream services so that they can use them in their log entries.

Spring Cloud Sleuth is a library that supports implementing a traceId.
Sleuth is activated by default after adding the dependency and creates a traceId for each incoming request.





 