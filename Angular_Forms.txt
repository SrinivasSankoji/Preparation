1.Forms										(CodeEvolution)  [14-APR-2020]  (Done)
2.Template Driven Forms                     (CodeEvolution)  [14-APR-2020]  (Done)
3.Setting Up Project                        (CodeEvolution)  [14-APR-2020]  (Done)
4.Adding Form to HTML                       (CodeEvolution)  [14-APR-2020]  (Done)
5.Binding Data with ngForm                  (CodeEvolution)  [14-APR-2020]  (Done)
6.Binding Data to Model                     (CodeEvolution)  [14-APR-2020]  (Done)
7.Tracking State and Validity               (CodeEvolution)  [14-APR-2020]  (Done)
8.Validation with Visual Feedback           (CodeEvolution)  [15-APR-2020]  (Done)
9.Displaying Error Messages                 (CodeEvolution)  [15-APR-2020]  (Done)
10.Select Control validation                (CodeEvolution)  [15-APR-2020]  (Done)
11.Form Validation                          (CodeEvolution)  [15-APR-2020]  (Done)
12.Submitting Form Data                     (CodeEvolution)  [15-APR-2020]  (Done)
13.Express Server to recieve Form Data      (CodeEvolution)  [16-APR-2020]  ()
14.Error Handling                           (CodeEvolution)  [16-APR-2020]  ()


***********************************************   1.Forms	******************************************************************************************

Forms are vital part of any Business Application.
We use forms to Register,Login,Submit a Request,Place an Order,Schedule an Appointment and perform other countless tasks.
While designing Forms it is also important to create an experience that guides the User efficiently and effectively through out the workflow.
As a developer we need to handle 

Data Binding,
Change Tracking,
Data Validation,
Visual Feedback,
Error Messages and 
Form Submission.

The Component contains the HTML Template to collect the User Data.
The Component contains the Class that handles Data Binding.
The Collected data is then sent to the Server using Service.
To achieve this Angular provides two ways.

1.Template Driven Forms
2.Reactive Forms

In Template Driven Forms most of the code is written in HTML Template where as 
In case of Reactive Forms or Model Driven Forms most of the code is written inside Component Class.


***********************************************  2.Template Driven Forms	******************************************************************************************

As the name indicates most of the Code is written inside HTML Template.
Easy to use and is similar to Angular JS Forms.
In this approach we are heavily relying on Two Way Data Binding i.e ngModel.
We dont have to keep track of the input field values and react to the change in input Field Values.
Angular takes care of this by using ngModel Directive.
As a result we have bulky HTML Code and minimal Component Code.
Angular also provides ngForm directive along with ngModel directive which keeps track of the Form and the Form Elements State and Validity.

Drawback of Template Driven Forms is when it comes to Unit Testing.
Form Validation logic cannot be Unit Tested.
The only way to perform and end to end Testing is by using Browser.
Another drawback is in case of handling complex Forms.
Here we need to add more and more Validations to a field that will reduce the readablity of the Form.

We should go for Template Driven Forms when
1.Simple Form with Unit Testing that can be handled through Browser.
2.For Complex Forms with complex Validation where Unit Testig is mandatory then we go for Reactive Forms.

Steps to create the Template Driven Forms are

Genarate the Project
Add the Form to the HTML
Binding the Data
Tracking the State and Validity
Providing visual feedback
Display Error Messages
Submitting the data to the Server


***********************************************   3.Setting Up Project	*******************************************************************************************

To Check the Version

	ng -v 
	
To Install Angular CLI

	npm install -g @angular/cli@latest
	
To Update the Version of angular CLI

	npm install -g @angular/cli@latest
	
	npm cache verify
	
	npm cache clean
	
	npm install -g @angular/cli@latestx
	
To Generate the Project
	
	ng new TemplateForm
	
To run the Project

	ng serve
	
First Step is to add Bootstrap styling to our Project.
Bootstrap is a CSS Framework that gives a variety of classes that can be applied to make the HTML better.
To add Bootstrap CSS

https://getbootstrap.com/  --> Click on Get Started -->  and Copy the CSS Path.

Add the Path in index.html at the End of the <HEAD>.


***********************************************  4.Adding Form to HTML	**********************************************************************************************
		
		<div class="container-fluid mb-5">
		  <h1>Bootcamp Enrollment Form</h1>
		<form #userForm="ngForm">
		<div class="form-group">
		  <label>Name</label> 
		  <input type="text" class="form-control">
		</div>
		<div class="form-group">
		   <label>Email</label> 
		   <input type="email" class="form-control">
		</div>
		<div class="form-group">
		   <label>Phone</label> 
		   <input type="tel" class="form-control">
		</div>
		<br>
		<div class="form-group">
		  <select class="custom-select">
			  <option selected>Iam Interested In </option>
			  <option *ngFor="let topic of topics">{{topic}}</option>
		  </select>
		</div>
		<br>
		<button class="btn btn-primary" type="submit">Submit</button>
		</form>
		</div>
		 
To create a dropdown create an Array of elements in test.component.ts.

	topics =['Angular','Javascript','Forms'];

***********************************************   5.Binding Data with ngForm	**************************************************************************************

The first step to work with Anguar Forms is to import the FormsModule and add it to the import Array.
In app.module.ts 

	import {FormsModule} from '@angular/forms'
	
Anytime If we are using the <form> ,Angular attaches ngForm directive to <form> which gives the valuable information about the <form>.
It Tells what are the values of different form-control and whether the values are valid or not.
We get the reference of the whole <form> using Template Reference Variable.
	
	<form #userForm="ngForm">
	
Here ngForm directive exports itself as String and by assigning it to a Template Reference Variable and we have reference to the directive itself.
ngForm Directive allows us to access to the values of the form-control by using value property.

	{{userForm.value | json}}

Here Angular does not track the value of form-control on its own.
we need to tell angular which of the form-control has to be tracked. i.e done by using ngModel directive.
Place ngModel directive to each of the form-control and ngModel works only with name attribute.

	 <input type="text" class="form-control" name="userName" ngModel>

In Addition to ngModel,Angular also provides ngModelGroup directive If we would like to group together or create a subgroup in the Form.
Consider the case of Address and Address can contain street,city,state and Postal Code.
We can group all of those into an address object using ngModelGroup directive.

In Template Driven Forms we have 3 directives i.e 
ngForm
ngModel
ngModelGroup

Here we are binding the data using ngModel directive and we can send the data to the server using userForm.value.
Although it works fine but the better approach is to bind the data to the Model and send the Model to save.


***********************************************  6.Binding Data to Model	******************************************************************************************

To creat a Model 

	ng g clsss user
	
	export class User 
	{
    constructor(
        public userName:string,
        public email:string,
        public phone:string,
        public topic:string,
        public timePreference:string,
        public subscribe:string
    ){}
	}
	
Next step is to creat an insatnce of the Model in test.component.ts.

	 userModel=new User('Bhaumik','bcs@gmail.com','7718973681','','Morning',true);
	 
After having this data,It is possible to bind the userModel data to the enrollment Form.
Consider the Scenario of editing or updating the data that is already saved.
Whenever we have the requiremnet of form to be prefilled to update with the existing data.
We need to bind the userModel to the Enrollment Form and that can be done by using property binding.

	 {{userModel |json}}
	 

		<div class="form-group">
           <label>Name</label> 
           <input type="text" class="form-control" name="userName" [ngModel]="userModel.userName">
        </div>
		
Here Angular Form Module is now same as User Module.
But when we change the value in the Text Angular Form will get the updated value where as userModel is not updating and still contains the old value.
The reason is we are using Property Binding which is one way Data Binding i.e
Data is flown form the View to the Class but not from the Class to the View.
Whenever we are working with forms we need to have Two way Binding.

***********************************************  7.Tracking State and Validity  	**********************************************************************************

Before sending the data to the Server we need to perform Client Side Validations and provide the visual feedback to the User.
Angular helps us to perform Form Validation by tracking the state of the form-control by applying appropriate Classes.
What Class is applied to form-control bassed on its state and validity.
At any point of time Angular applies 3 classes to the form-control based on its state and Validity.

1.User has visited the form-control or Not 
whenever we load the class for the first time Angular applies the Class ng-untouched
If we click on the form-control either by switching or Tab out Angular applies the class ng-touched
Here the key point is that class will change only on blur and we have to navigate away from the form-control.

2.form-control value has changed or not
For the first time Angular aplies the Class ng-pristine
If the form-control value has changed then Angular applies the Class ng-dirty

3.form-control value is valid or not
If the form-control value is valid then Angular applies the Class ng-valid or else applies the Class ng-invalid
For Example If the input field contains a required attribute It Implies that a value has to be entered.
If the values are missing ng-invalid is going to be applied.


	<div class="form-group">
           <label>Name</label> 
           <input type="text" #name class="form-control" name="userName" [(ngModel)]="userModel.userName">
        </div>
	
    {{name.className}} // form-control ng-untouched ng-pristine ng-valid
	
To test the ng-valid we need to add the required attribute to the input Element.

	 <input type="text" #name required class="form-control" name="userName" [(ngModel)]="userModel.userName">
	 
Although these Classes helps us to provide the Visual Feedback Angular also provides an alternative.
For each of the Classes Angular Provides its associated property on ngModel Directive.
The properties are the same but with the removal of ng.
we can acces the properties of the ngModel directive by creating the reference of the ngModel Directive.
Here #name Template reference variable points to the input element in the DOM.
By assigning a value of ngModel reference variable to name,Now name points to the ngModel of this particular form-control.

	 <input type="text" #name="ngModel" required class="form-control" name="userName" [(ngModel)]="userModel.userName">
	
	{{name.untouched}} // By default it is true and once we click on the input text it becomes false.
	

***********************************************  8.Validation with Visual Feedback  ***********************************************************

A good User Experience when filling out forms is to visually indicate to the user,If a Form Field is invalid as and when they enter the Details.
In Angular we apply validation to the Form Fields by applying some of the Classes to visually indicate the User that the Form is invalid.

There are Two approaches.
1.We can use our own Class with the necessary Styles that has to be applied to the form-control.
2.We can use the Validation Classes that has been provided by CSS Framework.

For invalid state the Class provided by Bootstrap is is-invalid.
We have to apply the Class Conditionally i.e only when the form-control is invalid.

	input type="text" #name="ngModel"  required class="form-control is-invalid" name="userName" [(ngModel)]="userModel.userName">    

Here the Output will be Text Box with red border and is applied on the page load itself.	
we have to make this when the form is invalid.
For that we make use of ngModel properties coupled with class binding i.e 

	[class.is-invalid]="name.invalid"
	
	<input type="text" required #name="ngModel" [class.is-invalid]="name.invalid"  class="form-control" name="userName" [(ngModel)]="userModel.userName">

apply the Class is-invalied when the name form control is invalid.

Scenario 2 :
------------
Consider the case where the Form is not prefilled with data i.e make the name variable to empy in componenet class i.e.
	
	userModel=new User('','srinivaschary.chary@gmail.com','7718973681','Angular');

In this case it wiil perform validation on the page Load itself.
In addition to check whether the form-control is invalid we also need to check whether the user has visited the form or not.

	[class.is-invalid]="name.invalid && name.touched"
	
	<input type="text" #name="ngModel" required class="form-control" [class.is-invalid]="name.invalid && name.touched" name="userName" [(ngModel)]="userModel.userName">
	
Scenario 3 :
------------
we can also perform pattern matching validation for the form fields.
we can add any basic regular expression we want to add and create a pattern that the form field must satisfy.
Consider the case password must be between 8 to 15 Characters with one special character,Pin Code,Phone Number in specific format and so on.

Consider the case of applying the Regular Expression for the Phone Number.
First thing is to get the reference to the ngModel directive i.e. #phone="ngModel"
Then add the Pattern attribute with the Regular Expression.

<input type="tel" #phone="ngModel" pattern="^\d{10}$"  [class.is-invalid]="phone.invalid && phone.touched"
            class="form-control" name="phone" [(ngModel)]="userModel.phone">

However when the form field is invalid we need to display an appropriate Error Message.

***********************************************  9.Displaying Error Messages   	**********************************************************************************

Here we are going to display the Error Message when the Form Field is invalid.
In the Test.component.html add the small Tag.

	 <small>Name is required</small>
	 
This Message has to be displayed only when the Form Field is invalid.

There are Two approaches.
1.Class Binding.
2.ngIf

For Class Binding we will use the class d-none which is a Bootstrap Class for setting the display property to none.

	<small [class.d-none]="name.valid || name.untouched">Name is required</small>
	
Do not show the Error Message when the name form-control is valid or untouched.
To make the message appaear like an Error Message we use the Class text-danger.

	<small class="text-danger" [class.d-none]="name.valid || name.untouched">Name is required</small>
	
we might get the scenario where we have more than one validation for the same Field.

	<small class="text-danger" [class.d-none]="phone.valid || phone.untouched">Phone Number is required and Should Have 10 Digits</small>
	
We can also display the Error Messages based on error properties of the ngModel.
Comment the existing Error Messages.
Add the <div> and this <div> will be conditionally rendered based on whether the phone Number is valid or Not.
Here we use ngIf Directive along with ngModel Properties.

	 <div *ngIf="phone.errors && (phone.invalid || phone.touched)">
        <small class="text-danger" *ngIf="phone.errors?.['required']">Phone Number is Required</small>
        <small class="text-danger" *ngIf="phone.errors?.['pattern']">Phone Number Must be 10 Digits</small>
     </div>


***********************************************  10.Select Control validation  	**********************************************************************************

Here we need to perform validation on Select Control Field.Topic Should be any other value except Iam Interested in.
If the User interacts with Select Control and leaves the Option then we should provide an Error Message Please Choose the Topic.
Simpleset way to perform select Control Validation is make use of required attribute of the <select>.
Create a reference of ngModel so that we can make use of ngModel properties to appply a Class to the Select Element and also display the Error Messages. 

	<div class="form-group">
        <select required #topic="ngModel" class="form-control" [class.is-invalid]="topic.invalid && topic.touched" 
        class="custom-select" name="topic" [(ngModel)]="userModel.topic">
            <option value="">Iam Interested In </option>
            <!-- <option selected>Iam Interested In </option> -->
            <option *ngFor="let topic of topics">{{topic}}</option>
        </select>
        <br>
        <small class="text-danger" [class.d-none]="topic.valid || topic.untouched">Please Select the Topic</small>
      </div>
	
This works only when the value is Empty i.e.

	 <option value="">Iam Interested In </option>
	 
If we have the default value then the Validation Fails .i.e 

	<option selected>Iam Interested In </option> -->

Here we need to provide the custom Validation for the Select Control.
we need to listen the blur event and change event of the select Control and In the Event Handler and we are going to check the value.
If the value is the default value then set an Error Flag to true.
we use this error flag to conditionally apply the Classes.

	 <!-- Topics -->
    <div class="form-group">
        <select (blur)="validateTopic(topic.value)" (change)="validateTopic(topic.value)"
        #topic="ngModel" class="form-control" [class.is-invalid]="topicHasError && topic.touched" 
        class="custom-select" name="topic" [(ngModel)]="userModel.topic">
            <option value="">Iam Interested In </option>
            <!-- <option selected>Iam Interested In </option> -->
            <option *ngFor="let topic of topics">{{topic}}</option>
        </select>
        <br>
        <small class="text-danger" [class.d-none]="!topicHasError || topic.untouched">Please Select the Topic</small>
      </div>
	  
	  export class FormVisualValidationComponent {

	  userModel=new User('Bhaumik','srinivaschary.chary@gmail.com','7718973681','');
	  topics =['Angular','Javascript','Forms'];
	  topicHasError=true;

	  validateTopic(value:any)
	  {
		if(value=="")
		{
		  this.topicHasError=true;
		}
		else{
		  this.topicHasError=false;
		}

	  }
	}

passing the Selected value to the events.

	 [class.is-invalid]="topicHasError && topic.touched"
	 
If the topicHasError and is touched then display the Error Message.

	[class.d-none]="!topicHasError || topic.untouched">
	
If there is No Error and Topic has not touched then display the None class to the Error Message.
Finally remove the required attribute to work with the Functionlaity.

***********************************************  11.Form Validation   	******************************************************************************************

So far we have seen individual form-control.
Angular also helps us to do the Form Level Validation.
whenever we use the <form> tag,Angular automatically attaches the ngForm Directive to the <form>.
we can get the reference of the ngForm with the Template Reference Variable i.e. #userForm="ngForm"
Like wise we have properties on ngModel Directive similarly we have the same properties on ngForm Directive.

	{{userForm.form.valid}}
	
This can be used to disable the Submit Button untill the Form is valid.
To the Button add the disabled Property and bind it to the invalid state of the Form.

	<button [disabled]="userForm.form.invalid" class="btn btn-primary" type="submit">Submit</button>
	
This works fine if we dont have any custom validations that ngForm is not Tracking.
But in our Case we have custom select validation.
If we click on submit Button check the value of the Selected Field and then proceed with submitting the form.
To the disbaled property of Button add one more condition.

	<button [disabled]="userForm.form.invalid || topicHasError" class="btn btn-primary" type="submit">Submit</button>
	
Button gets disabled when the form is invalid or Topic has Error.

***********************************************  12.Submitting Form Data   	**************************************************************************************

Here we are going to submit the Form data to the Server.
First step is to add the novalidate attribute to the form tag.
This will prevent Browser validation kicking in when we Click on Submit Button.

	<form #userForm="ngForm" novalidate>
	
Next Step is to bind the ngSubmit Event which gets emitted when we click on submit Button.

	 <form #userForm="ngForm" (ngSubmit)="onSubmit()" novalidate>
	 
Now to send the Data to the Service we need to create a Service.

	ng g s enrollment
	
Then import the HttpClientModule and inject it to the constructor.
we also need to add the HttpClient in the imports Array of app.module.ts.

	import { Injectable } from '@angular/core';
	import { HttpClientModule } from '@angular/common/http';

	@Injectable({
	  providedIn: 'root'
	})
	export class UserFormService {

	  constructor(private _http: HttpClient) { }
	}
	
Now we are in a position to make the Http Request.
create a method in enrollment service that accepts the user and submit the Post request with url and User.

	public enroll(user:User)
	{
     return this._http.post<any>(this._url,user);
	}

Call the enroll Srevice from the onSubmit() in test.component.ts

	 onSubmit()
	 {
		// console.log(this.userModel);
		this.userForService.enroll(this.userModel)
		.subscribe(data => console.log('Success',data),
		  error => console.log('Error',error))
	 }

***********************************************  13.Express Server to recieve Form Data   	**********************************************************************

Here we are goint to set up a basic express server that is going to recieve form Data.
Create a Folder named server in the Folder Angular.
Open the Folder server in the command Prompt

	npm init --yes
	npm install --save express body-parser cors
	
Express is a Web Server
Body Parser is a Middleware to handle form Data.
cors is a package to make request across different ports.

Now the Dependencies are installed in the server Folder i.e package.json

	"dependencies": {
    "body-parser": "^1.19.0",
    "cors": "^2.8.5",
    "express": "^4.17.1"
	}
	
Now craete a New File named server.js and within this File begin with the packages that we have installed.

	const express = require('express');
	const bodyParser = require('body-parser');
	const cors = require('cors');
	
Create a Port that the express server will run on.

	const PORT=3000;
	
create an instance of an express 

	const app=express();
	
Specify the body parser to handle json Data

	app.use(bodyParser.json);
	
Also specify the cors package
	
	app.use(cors());

Now add the Code to Test a Get Request

	app.get('/',function(req,res)
	{
    res.send('Hello from Server');
	});
	
Finally we listen to the Request on the Specified Port.

	app.listen(PORT,function()
	{
    console.log("Server Running on Local Host : "+PORT);
	});
	
Now the basic Express Server is Ready.


***********************************************  14.Error Handling  	**************************************************************

When we submit the Form and if some thing goes wrong and the Server will respond with an Error.
Here we need to handle the errors after the Form Submission.

In the Enrollment Service we will be catching the error from the Server and throwing it to the subscribed Component.
we need the help of rx js.


***********************************************  End   	******************************************************************************








