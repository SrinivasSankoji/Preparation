Streamexample

 

package com.test;

 

import java.util.*;

 

import java.util.stream.Collectors;

import java.util.function.Function;

 

 

public class StreamEx {

 



 

               
               private static List < Product1 > productsList = new ArrayList < Product1 > ();

              

               public static void main(String[] args) {

                             

                       productsList.add(new Product1(1, "HP Laptop", 25000));

                       productsList.add(new Product1(2, "Dell Laptop", 30000));

                       productsList.add(new Product1(3, "Lenevo Laptop", 28000));

                       productsList.add(new Product1(4, "Sony Laptop", 28000));

                       productsList.add(new Product1(5, "Apple Laptop", 90000));

                       // With Java 8 Stream API'S

                       withStreamAPI();

                             

               }
                       // filtering data of list

                             private static void withStreamAPI() {               

          List<?> productPriceList = (List<?>) productsList.stream().filter((product) -> product.getPrice() > 25000)

                                     .map((product) -> product.getPrice()).collect(Collectors.toList());

                                            
               // displaying data
               productPriceList.forEach((price) -> System.out.println(price+"   price check"));

                                              

                                               

                       

                       // max() method to get max Product price

                       Product1 prod = productsList.stream()

                           .max((prod1, prod2) -> prod1.getPrice() > prod2.getPrice() ? 1 : -1).get();

                       System.out.println(prod.getPrice());

                      

                       // min()

                       Product1 pro = productsList.stream()

                                          .min((prod1, prod2) -> prod1.getPrice() > prod2.getPrice() ? 1 : -1).get();

                                      System.out.println(pro.getPrice());

                                     

                                      

                                                            // salary less than 30000

                                                            Set<Float> productPriceList1 = productsList.stream().filter(product -> product.getPrice() < 30000)

                                                                                          .map(product -> product.getPrice()).collect(Collectors.toSet());

                                                              System.out.println(productPriceList1 +"gggggggggggggggggg");

                                                           

 

                                     List<Product1> l= productsList.stream().sorted(Comparator.comparingDouble(Product1::getPrice).reversed()).collect(Collectors.toList());

                                     System.out.println("");

                                     System.out.println("");

                                     System.out.println("*************************");

                                     l.forEach(System.out::println);

                                    

                                     

                                     // Creating a list of Prime Numbers

                                      List<Integer> PrimeNumbers = Arrays.asList(5, 7, 11,13);

                                       

                                      // Creating a list of Odd Numbers

                                      List<Integer> OddNumbers = Arrays.asList(1, 3, 5);

                                       

                                      // Creating a list of Even Numbers

                                      List<Integer> EvenNumbers = Arrays.asList(2, 4, 6, 8);

                               

                                      List<List<Integer>> listOfListofInts =

                                              Arrays.asList(PrimeNumbers, OddNumbers, EvenNumbers);

                               

                                      System.out.println("The Structure before flattening is : " + listOfListofInts);

                                     

                                      

                                      //////////////////////////////////////////////////////////////////////////////

                                       

                               // Using flatMap for transformating and flattening.

                                      List<Integer> listofInts  = listOfListofInts.stream().flatMap(list -> list.stream())

                                                                  .collect(Collectors.toList());

                               

                                      System.out.println("The Structure after flattening is : " +listofInts);

                                     

                                      

                              // Count the repeated elements       

                                      List<String> list = new ArrayList<>();

 

                                      List<String> items = Arrays.asList("a", "p", "p","l","e");

 

                                      Map<String, Long> result =

                                              items.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

 

                                      System.out.println(result);   //{p=2, a=1, e=1, l=1}

                                     

                                      

                                      

                                // multiply list with 3

                                      List<Integer> elements = Arrays.asList(1,2,3,4);

                                      elements = elements.stream().map(e -> e*3).collect(Collectors.toList());

                                      elements.forEach(System.out::println);  //   3,6,9,12

                                     

                                //max 

                                      int ii = elements.stream().max((x,y) ->x.compareTo(y)).get();

                                      System.out.println(ii);

                                     

                                //min           

                                      int jj = elements.stream().min((x,y) ->x.compareTo(y)).get();

                                      System.out.println(jj);

                                     

                                //distinct

                                      Collection<String> listt = Arrays.asList("A", "B", "C", "D", "A", "B", "C");

                                     

                                      List<String> distinctChars = listt.stream()

                                                              .distinct()

                                                              .collect(Collectors.toList());    //[A, B, C, D]

                                      distinctChars.forEach(System.out::println);

                                 

                                 // char more than 3    

                                      List<String> listRef = Arrays.asList("Abcd", "hhhhhB", "mC", "kjhD");

                                     

                                     List<String> ll= listRef.stream().filter(name -> name.length() > 3).collect(Collectors.toList());

                                     System.out.println(ll+"    String count");

                                    

                                     List<String> listRef1 = Arrays.asList("sriF", "sriX", "mC", "kjhD");

                                    // long count = listRef1.stream() .filter(x -> x.startsWith("sri")) .count();  // output --> 2

 

                                     List<String> countNames = listRef1.stream() .filter(x -> x.startsWith("sri")) .collect(Collectors.toList());

                                     System.out.println(countNames+"    String count same letter");

 

               }

}


-------------------------------------------------------------------------------------------------------------------------
Reverse order

package com.test;

 

import java.util.regex.Pattern;

 

public class TRT {

 

       static String reverseWords(String str)

       {

             Pattern pattern = Pattern.compile(\\s);

 

             String[] temp = pattern.split(str);

             String result = "";

 

             for (int i = 0; i < temp.length; i++)

             {

                    if (i == temp.length - 1)

                           result = temp[i] + result;

                    else

                           result = " " + temp[i] + result;

             }

             return result;

       }

       public static void main(String[] args) {

             String s1 = "Welcome to geeksforgeeks";

             System.out.println(reverseWords(s1));

 

             String s2 = "I love Java Programming";

             System.out.println(reverseWords(s2));

       }

 

}

 

package com.test;

 

import java.util.ArrayList;

import java.util.Arrays;

import java.util.List;

import java.util.stream.Collectors;

 

public class T1 {

       public static void main(String args[]) {

//creating ArrayList     

             List<String> productlist1 = Arrays.asList("Printer", "Mouse", "Keyboard", "Motherboard");

             List<String> productlist2 = Arrays.asList("Scanner", "Projector", "Light Pen");

             List<String> productlist3 = Arrays.asList("Pen Drive", "Charger", "WIFI Adapter", "Cooling Fan");

             List<String> productlist4 = Arrays.asList("CPU Cabinet", "WebCam", "USB Light", "Microphone", "Power cable");

 

             List<List<String>> allproducts = new ArrayList<List<String>>();

//adding elements to the list 

             allproducts.add(productlist1);

             allproducts.add(productlist2);

             allproducts.add(productlist3);

             allproducts.add(productlist4);

            

             System.out.println(allproducts+ " allproductsallproductsallproducts");

//creating a list of all products 

             /*

             * List<String> listOfAllProducts = new ArrayList<String>(); //for each loop

             * iterates over the list for (List<String> pro : allproducts) { for (String

             * product : pro) { //adds all products to the list

             * listOfAllProducts.add(product); } }

             * System.out.println("List Before Applying mapping and Flattening: \n");

             * //prints stream before applying the flatMap() method222

             * System.out.println(listOfAllProducts);

             */

//creats a stream of elemnts using flatMap() 

             List<String> flatMapList = allproducts.stream().flatMap(pList -> pList.stream()).collect(Collectors.toList());

             System.out.println("List After Applying Mapping and Flattening Operation: \n");

//prints the new stream that we get after applying mapping and flattening  

             System.out.println(flatMapList);

            

            

             List<String> list = Arrays.asList("geeks", "gfg", "g","e", "e", "k", "s");

 

             List<String> answer = list.stream().map(String::toUpperCase).collect(Collectors.toList());

 

             // displaying the new stream of UpperCase Strings

             System.out.println(answer+ "answer");

            

             List<Integer> list1 = Arrays.asList(0, 2, 4, 6, 8, 10);

 

             // Using peek without any terminal

             // operation does nothing

                   list1.stream().peek(System.out::println);

       }

}

 

 

 

 

Reflect

 

package com.test;

 

import java.lang.reflect.Constructor;

 

public class Reflect {

      

    public static void main(String[] args) {

        ReflectionSingleton instanceOne = ReflectionSingleton.getInstance();

        ReflectionSingleton instanceTwo = null;

        try {

            // Below code will change constructor access level from private to public

            Constructor constructor = ReflectionSingleton.class.getDeclaredConstructor();

            constructor.setAccessible(true);

            

            // Creating second instance

            instanceTwo = (ReflectionSingleton) constructor.newInstance();


        } catch (Exception e) {

            e.printStackTrace();

        }

        System.out.println("instanceOne HashCode : " + instanceOne.hashCode());

        System.out.println("instanceTwo HashCode : " + instanceTwo.hashCode());


    }


}


class ReflectionSingleton {

    private static ReflectionSingleton instance = new ReflectionSingleton();


    private ReflectionSingleton() {


    }


    public static ReflectionSingleton getInstance() {

        return instance;

    }

}

package com.test;

 

import java.util.ArrayList;

import java.util.IntSummaryStatistics;

import java.util.List;

import java.util.stream.IntStream;

import java.util.stream.Stream; 

class Product{ 

    int id; 

    String name; 

    float price; 

    public Product(int id, String name, float price) { 

        this.id = id; 

        this.name = name; 

        this.price = price; 

    } 

} 

public class Q1 { 

       public static void main(String[] args) {

            

             for (int i =0; i <3; i++)

             {

                   

                    switch (i) {

                    case 0:

                           break;

                    case 1:

                           System.out.print("one ");

                    case 2:

                           System.out.print("two ");

                    case 3:

                           System.out.print("three ");

                    }

                    System.out.println("Done ");

                    }

            

             System.out.println("******************************** ");

               List<Product> productsList = new ArrayList<Product>(); //Adding Products

               productsList.add(new Product(1,"HP Laptop",25000f));

               productsList.add(new Product(2,"Dell Laptop",30000f));

               productsList.add(new Product(3,"Lenevo Laptop",28000f));

               productsList.add(new Product(4,"Sony Laptop",28000f));

               productsList.add(new Product(5,"Apple Laptop",90000f)); // This is more compact approach for filtering data

            

               productsList.stream() .filter(product -> product.price >= 30000) .forEach(product -> System.out.println(product.name));

               System.out.println("******************************** ");

              

               String[] s = {"one", "two", "three", "four"};

               Stream<String> stringStream = Stream.of(s);

               IntStream intStream = stringStream.mapToInt(e -> e.length());

                System.out.println(intStream);

               IntSummaryStatistics stats = intStream.peek(System.out::println)

                                                     .summaryStatistics();

               System.out.println(stats);

            

       } 

} 

package com.test;

 

import java.util.Arrays;

import java.util.IntSummaryStatistics;

import java.util.List;

import java.util.stream.Collectors;

 

public class CountnJoining {

 

       public static void main(String[] args) {

            

             List<String> strList = Arrays.asList("abc", "", "bcd", "", "defg", "jk");

            

             long count = strList.stream() .filter(x -> x.isEmpty()) .count();

            

             long count1 = strList.stream() .filter(x -> x.length()>3) .count();

             System.out.println(count);

             System.out.println(count1);

            

             List<String> G7 = Arrays.asList("USA", "Japan", "France", "Germany", "Italy", "U.K.","Canada");

            

             String G7Countries = G7.stream() .map(x -> x.toUpperCase()) .collect(Collectors.joining());

             System.out.println("G7Countries = "+G7Countries);

            

             List<Character> list = Arrays.asList('D', 'e', 'm', 'o');

             String str = list.stream().map(String::valueOf).collect(Collectors.joining());

             System.out.println("Concatenated = "+str);

 

            

             

             // All list sum

             List<Integer> numbers = Arrays.asList(5, 4, 10, 12, 87, 33, 75);

             IntSummaryStatistics stats = numbers.stream().mapToInt((x) -> x).summaryStatistics();

             System.out.println("Sum of all numbers : " + stats.getSum());

            

 

 

 

       }

 

}

 

package com.test;

 

import java.util.Arrays;

import java.util.List;

import java.util.stream.Collectors;

 

public class ListTest {

 

       public static void main(String[] args) {

             // TODO Auto-generated method stub

 

               List<Integer> list = Arrays.asList(0,1,2,3,4);

              

              //  List<Integer> subList=subStream(list.stream(),2,5).collect(Collectors.toList());

              

               List<Integer> subListt= list.subList(0, 4);

              

               System.out.println(subListt);

            

            

               

               String str = "hhnnmjklloopssd";

             char[] carray = str.toCharArray();

           //  System.out.println("The string is:" + str);

             System.out.println("Duplicate Characters in above string are: ");

 

             for (int i = 0; i < str.length(); i++) {

                for (int j = i + 1; j < str.length(); j++) {

                   if (carray[i] == carray[j]) {

                      System.out.print(carray[j] + " ");

                      break;

                   }

                }

             }

            

            

             int i, j, row=6;  

             for (i = 0; i < row; i++) {

                    for (j = 0; j <= i; j++) {

                           System.out.print("* ");

                    }

                    System.out.println();

             } 

            

       }

 

}

 

package com.test;

 

import java.util.ArrayList;

import java.util.HashSet;

import java.util.List;

import java.util.Set;

import java.util.stream.Collectors;

 

public class StringEx {

       public static void main(String args[]) {

            

            

            

            

             // 1. list of Strings

        List<String> companies = new ArrayList<String>();


 

        // 1.1 add string elements to List

        companies.add("Meta");

        companies.add("Apple");

        companies.add("Amazon");

        companies.add("Netflix");

        companies.add("Meta"); // duplicate

        companies.add("Google");

        companies.add("Apple"); // duplicate


 

        // 1.2 print original List to console

        System.out.println("1. Original List with duplicates : \n");

        companies.forEach(System.out::println);


 

        // 2. create Set object to store unique elements

        Set<String> distinctCompanies = new HashSet<>();


        // 3. get duplicate elements

        Set<String> duplicateCompanies = companies

                .stream()

                .filter(company -> !distinctCompanies.add(company))

                .collect(Collectors.toSet());

       

 

            

               List<String> l= companies.stream().distinct().collect(Collectors.toList());

               System.out.println("duplicates remove" +l);

            

        

        

        // 2.1 print unique elements

        System.out.println("\n2. Unique elements : \n");

        distinctCompanies.forEach(System.out::println);


 

        // 3.1 print duplicate elements

        System.out.println("\n3. Duplicate elements : \n");

        duplicateCompanies.forEach(System.out::println);

            

            

            

       }

}

-----------------------------

package com.test;

 

import java.util.HashMap;

import java.util.HashSet;

import java.util.Set;

 

public class HashTest {

 

       public static void main(String[] args) {

             // TODO Auto-generated method stub

 

             Set uniqueColours = new HashSet();

             Set s1 = new HashSet();

            

             Set s2 = new HashSet();

            

             uniqueColours.add(s1);

             uniqueColours.add(s2);

            

             System.out.println(uniqueColours.size());

            

            

             HashMap m1 = new HashMap();

             HashMap m2 = new HashMap();

            

             HashMap m = new HashMap();

             m.put(m1, "A");

             m.put(m2, "B");

             m.put(m1, "C");

            

             System.out.println(m);

             

       }

 

}

--------------------------------------------------------------------------
package solveproblemswithsreams;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class SortListUsingJavaStreamAPI {
	
	public static void main(String[] args) {
		
		List unsortedList = Arrays.asList(10,1,21,3,6,2);
		// Sorting in natural order or ascending order
		List sortedListAsc = 
				unsortedList.stream()
					.sorted()
					.collect(Collectors.toList());
		
		System.out.println("Before sorting : "+ unsortedList);
		System.out.println("After sorting  : "+ sortedListAsc);
		
		// Sorting in descending order
		List sortedListDesc = 
				unsortedList.stream()
					.sorted(Comparator.reverseOrder())
					.collect(Collectors.toList());
		
		System.out.println("Before sorting : "+ unsortedList);
		System.out.println("After sorting  : "+ sortedListDesc);
	}
}

Regards,

Srikanth Polewar

7276241931

 