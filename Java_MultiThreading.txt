1.Introduction												[28-DEC-2020]  (Done)
2.Starting a Thread                             			[28-DEC-2020]  (Done)
3.Life Cycle of Thread                         				[04-JAN-2021]  (Done)
4.Thread Class Constructor                      			[05-JAN-2021]  (Done)
5.Setting and Getting name of Thread            			[05-JAN-2021]  (Done)
6.Thread Priority                               			[05-JAN-2021]  (Done)
7.yield                                         			[05-JAN-2021]  (Done)
8.join                                          			[08-JAN-2021]  (Done)
9.sleep                                         			[12-JAN-2021]  (Done)
10.Synchronization                              			[12-JAN-2021]  (Done)
11.Inter Thread Communication                   			[12-JAN-2021]  (Done)
12.Producer Consumer problem								[12-JAN-2021]  (Done)
13.Daemon Threads                               			[12-JAN-2021]  (Done)
14.ThreadGroup                                  			[12-JAN-2021]  (Done)
15.DeadLock	(geeksforgeeks)
16.Deadlock Prevention and Avoidance (geeksforgeeks)


*************************************************************   1.Introduction	 ****************************************************************************

Executing several tasks simultaneously is the concept of Multitasking.
There are two types of Multitasking.

1.Process based Multitasking
2.Thread based Multitasking

1.Process based Multitasking :
------------------------------
Executing several tasks simultaneously where each task is seperate independent process.Such type of multi tasking is called process based multi tasking.
Process based multi tasking is best suitable at OS Level and not at programatic level.

2.Thread based Multitasking :
-----------------------------
Executing several tasks simultaneously where each task is a seperate independent part of the same process is called Thread based Multitasking.
Here each independent part is called Thread.
Thread based Multitasking is best suitable for programatic levl.
Whether it is Thread based or process based,Main Advantage of Multitasking is that we can reduce the response time so that performance will be improoved.

************************************************************* 2.Starting a Thread  *************************************************************************

We can define a Thread in the following two ways
1.By Extending Thread Class
2.By Implementing Runnable Interface
 
1.By Extending Thread Class :
-----------------------------
	public class MyThread extends Thread{
	@Override
	public void run() {
		for (int i = 0; i <= 10; i++) {
			System.out.println(i);
		}
	}
	}
	
	public class Test {
	public static void main(String[] args) {
		MyThread thread=new MyThread();
		thread.start();
		for (int i = 5; i <= 10; i++) {
			System.out.println(i);
		}
	}
	}
	
2.By Implementing Runnable Interface :
--------------------------------------
we can define a thread even by implementing runnable interface.
Runnable interface is present in java.lang package and it contains only one method.

	public void run()
	
	public class MyRunnable implements Runnable{
	@Override
	public void run() {
		for (int i = 0; i <= 5; i++) {
			System.out.println(i);
		}
	}
	}
	
	public class RunnableTest {
	public static void main(String[] args) {
		MyRunnable runnable=new MyRunnable();
		Thread t=new Thread(runnable);
		t.start();
	}
	}
	
Scenario One :
--------------
MyRunnable runnable=new MyRunnable();
Thread t=new Thread(runnable);
t.start();
		
New Thread will be created and responsible for the execution of Thread Class run(). i.e t.start().

Scenario Two :
--------------
t.run()
No New Thread will be created and Thead class run() will be executed like a normal method.
	
Note :
------
Once runnable object is created and it does not have the start capability.someone has to start the runnable object.
Thread class has the capability to start the runnable object.
Best way of definig a Thread is by implementing runnable interface.

Thread Scheduler :
------------------
If several Threads are waiting to get the chance to execute,then which thread will be executed first is decided by the Thread Scheduler.
we can't expect exact behavior of Thread Scheduler and is JVM independent.
Due to this we cannot expect the order of execution of Thread.

Difference between start() and run() :
--------------------------------------
If two independent jobs are there,job has to be executed.In which order it is executed is not important.
To start the thread If our class does not contain start() then parent class start() will be executed.
Thread class start() calls the run().

In case of start(),a new thread will be created which is responsible for the execution of run().
In case of run(),no new thread will be created and run() will be executed lika a normal method.

Importance of start() :
-----------------------
Start() is responsible to register our thread with Thread Scheduler.
Thread Scheduler is responsible to allocate memory to the Thread.
finally invokes the run().

Without executing Thread class start() there is no chance of starting new Thread in Java.
We have to override run() which will be executed by the thread class start().
If we have overloaded run() then it will be executed just like a normal method.

Not overriding run() :
----------------------
If we are not overiding run() then parent class run() will be executed and it has empty implementation.
Here we will get no output and we don't get any compile time error.
It is highly recomended to override run().

overriding start() :
--------------------
If we override start() then no new thread will be created and start() will be executed just like a  normal method.


*************************************************************  3.Life Cycle of Thread  **************************************************************** 

New Born State
Ready/Runnable State
Running State
Dead State

		Thread t=new Thread();
		
When we Create a Thread object,Thread is said to be in new state or born state.

		t.start();
		
when t.start() is excuted then Thread is said to be in ready/runnable state i.e Here start() allocates the memory to the Thread and invokes the run().
Once run() starts the execution then Thread will be in running state.
Once run() completes the execution then Thread will enter into dead state.

Note :
------
After starting the thread again if we start the thread then we will get IllegalThreadStateException.

**********************************************************  4.Thread Class Constructor  *************************************************************

Thread t=new Thread();
Thread t=new Thread(Runnable r);
Thread t=new Thread(String name);
Thread t=new Thread(Runnable r,String name);
Thread t=new Thread(ThreadGroup g);
Thread t=new Thread(ThreadGroup g,Runnable r);
Thread t=new Thread(ThreadGroup g,String name);

We can also define a Thread that extends Thread class and passing it as a parameter to the Runnable object.
This way of defining a Thread is not recomended.

	public class ThreadConstructor  extends Thread{
	@Override
	public void run() {
		System.out.println("Thread Class Constructor");
	}
	public static void main(String[] args) {
		ThreadConstructor constructor=new ThreadConstructor();
		Thread t=new Thread(constructor);
		t.start();
	}
	}
********************************************************** 5.Setting and Getting name of Thread   **************************************************

Every Thread in Java has some name.It may be default name generated by JVM or customized name explicitly provided by the programmer.
Thread class defines the following methods to set and get the names of the Thread.

	public final String getName();
	public final void setName(String name);
	
If we want to set my own name to the Thread 
	Thread.currentThread().setName("Bhaumik");
	
If we want to know the current executing Thread,we use 

	Thread.currentThread();

********************************************************** 6.Thread Priority   ***********************************************************************

Every Thread in Java has some priority.
It may be explicitly provided by the programmer or default value generated by JVM.
Valid range of Thread priority is 1 to 10 where 1 is the least priority and 10 is the highest priority.
Thread class contains some constants to represent standard priority i.e

Thread.MAX_PRIORITY=10;
Thread.MIN_PRIORITY=1;
Thread.NORM_PRIORITY=5;

ThreadScheduler will use these priorities while allocating it to the processor.
Thread which is having the highest priority will get the chance to execute first.
If two threads having the same priority then we can't expect the exact behavior.It depends on the ThreadScheduler.
Default priority only for main Thread is 5 and for all remaining Threads it will be inheriting form parent to child.
Whatever priority Parent has same priority will be applicable for Child.

We can get and set the priority of Thread.Thread class has the following methods.

	public final int getPriority();
	public final void setPriority(int priority);
	
Here allowed values are 1 to 10.
If we give any other value it gives IllegalArgumentException.

*************************************************************  7.yield  ******************************************************************************

we can prevent Thread execution by using the following methods.

1.yield()
2.join()
3.sleep()

public static native void yield() :
-----------------------------------
yield() causes to pause the current executing thread and gives the chance to remaining waiting threads of same priority.
If there are no waiting Threads or all Threads have the same priority then same Thread will continue its execution.
Thread which is yielded to get the chance to execute again is decided by the ThreadScheduler and we cannot expect exactly.
When yield() is executed,Thread state moves from running state to ready/runnable state.


	public class ThreadYeildDemo extends Thread{
	@Override
	public void run() {
		for (int i = 0; i < 5; i++) {
			Thread.yield(); //Pause the Current executing Thread
			System.out.println(i);
		}
	}
	public static void main(String[] args) { // Creation of Main Thread
		ThreadYeildDemo yeildDemo=new ThreadYeildDemo(); // Creation of Child Thread
		yeildDemo.start(); // Starting Child Thread
		for (int i = 6; i < 10; i++) {
			System.out.println(i);
		}
	}
	}
	
Output :
--------
6
7
8
9
0
1
2
3
4
	
Here Child Thread calls the yield() and is paused for sometime and Main Thread gets the chance to execute more number of times.
In the above program Main Thread will be completed first when compared to Child Thread.

*************************************************************  8.join   ***************************************************************************

public final void join() throws InterruptedException :
------------------------------------------------------
If a Thread wants to wait until the completion of some other Thread then we should go for join().
If a Thread t1 wants to wait until the execution of thread t2,then we have to call t1.join().
Here thread t1 will enter into waiting state.
Once t2 completes its execution then t1 can start its execution.

Whenever we are calling join(),Thread enters into waiting state and there may be a chance of other Thread interrupting the Thread.
Here we get InterruptedException and is a checked Exception.
We need to handle this either by using try cathc block or throws keyword.
when join() is executed,Calling Thread will enter into waiting state and waits for the completion of other Thread and
If the other Thread completes its execution or time expires then current Thread enters into ready/runnable state.

Scenario One (Main Thread Entering into Waiting State) :
--------------------------------------------------------
	public class JoinThread extends Thread {
	@Override
	public void run() {
		for (int i = 0; i <= 5; i++) {
			System.out.println("Seetha Thread");
		}
	}
	}
	
	public class JoinDemo {
	public static void main(String[] args) throws InterruptedException {// Creation of Main Thread
		JoinThread thread = new JoinThread();
		thread.start();// Starting Child Thread.
		thread.join();// Calling Thread i.e Main Thread enters into waiting state and gives the chance to Child Thread.
		for (int i = 0; i <= 5; i++) {
			System.out.println("Rama Thread");
		}
	}
	}
	
Output :
--------
Seetha Thread
Seetha Thread
Seetha Thread
Seetha Thread
Seetha Thread
Rama Thread
Rama Thread
Rama Thread
Rama Thread
Rama Thread
Rama Thread	
	
Here Main Thread will wait untill the completion of Child Thread.

Scenario Two (Child Thread Entering into Waiting State) :
---------------------------------------------------------
Here waiting of Child Thread untill the completion of Main Thread.
Child Thread needs the reference of Main Thread to call the Main Thread.

	public class JoinChildThread extends Thread {
	static Thread mainThread;
	@Override
	public void run(){
		try {
			mainThread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		for (int i = 0; i <= 5; i++) {
			System.out.println("Child Thread");
		}
	}
	}
	
	public class JoinChildDemo {
	public static void main(String[] args) {
		JoinChildThread.mainThread=Thread.currentThread();
		JoinChildThread childThread=new JoinChildThread();
		childThread.start();
		for (int i = 0; i <= 5; i++) {
			System.out.println("Main Thread");
		}
	}
	}
	
Output :
--------
Main Thread
Main Thread
Main Thread
Main Thread
Main Thread
Main Thread
Child Thread
Child Thread
Child Thread
Child Thread
Child Thread
Child Thread

	
Scenario Three :
----------------
If a Main Thread calls join() on the same Thread itself then the program will be hanged.


*************************************************************  9.sleep  **************************************************************************

If a Thread does not want to perform any operation for a particular amount of time i.e just pause is required we go for sleep().
Whenever we are using sleep() compulsory time period should be required.
Whenever Thread is in sleep() there may be a chance of other Thread interrupting the Thread and raises InterruptedException.
Here we need to handle either by using try catch block or throws keyword.

If a Thread calls sleep() then Thread will enter into sleeping state.
Sleeping Thread comes into ready/runnable state
1.If the time expires
2.If the sleeping Thread got interrupted

Scenario One :
--------------
	public class SleepDemoOne {
	public static void main(String[] args) throws InterruptedException {
		for (int i = 0; i<= 3; i++) {
			System.out.println("Numbers are "+i);
			Thread.sleep(1000);
		}
	}
	}

interrupt() :
-------------
Thread class contains interrupt() to interrupt the sleeping Thread or waiting Thread.
	
	public void interrupt();
	
	public class SleepDemoTwo extends Thread{
	@Override
	public void run() {
		for (int i = 0; i <= 3; i++) {
			System.out.println("Numbers are " + i);
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				System.out.println("Child Thread got Interrupted");
			}
		}
	}
	}
	
	public class SleepDemoThree {
	public static void main(String[] args) {
		SleepDemoTwo three=new SleepDemoTwo();
		three.start();
		three.interrupt();
		System.out.println("Main Thread End");
	}
	}
	
Whenever Main Thread calling interrupt() on the Child Thread and If the Child Thread is not in Sleeping state or waiting state then there is no impact on interrupt call immideately.
inetrrupt() will wait untill target method enters into sleeping state or waiting state.
Once target method enters into sleeping state or waiting state then immideately it will be inetrrupted by the method call and catch block will be executed. 
	
Scenario Two :
--------------

	public class SleepDemoThree {
	public static void main(String[] args) {
		SleepDemoTwo three=new SleepDemoTwo();
		three.start();
		//three.interrupt();
		System.out.println("Main Thread End");
	}
	}
	
If the target Thread never enters into sleeping or waiting state,then there is no impact on interrupt() call and it will be wasted.

yield : It causes to pause the current executing Thread and give the chance for remaining Threads of same priority.
join  : If a Thread wants to wait until the completion of some other Thread we go for join().
sleep : If a Thread wants to perform any operation for a particular amount of time we go for sleep().

*************************************************************   10.Synchronization   *************************************************************

Synchronized is the modifier applicable for methods and blocks and not for classes and variables.
If a method or block is declared as synchronized then at a time only one Thread is allowed to execute the method or block on the given object.
Main Advantage of Synchronized keyword is we can resolve data inconsistency problems.
Main Limitation of Synchronized keyword is it increases waiting time of Threads.
Hence If there is no specific requirement it is never recomended to use synchronized keyword.

Object  Level Lock :
--------------------
Every object in Java has a unique lock.
Synchronization is internally impelmented by using lock concept.
Whenever we are using synchronization then only lock concept will come into picture.

If a Thread wants to execute any synchronized method on the given object ,first it has to get the lock of an object.
Once Thread gets the lock then it is allowed to execute any synchronized method on the given object.
Once synchronized method is completely executed then automatically lock will be released.
When a Thread is executing any synchronized mathod on the given object then remaining Threads are not allowed to execute any synchronized mathod on the given object simultaneously.
But remaining Threads are allowed to execute any non synchronized methods.

Class Level Lock :
------------------
Every class in Java has a unique Lock Concept.
If a Thread wants to execute any static synchronized method then it requires class level lock.
If a Thread is executing static synchronized method then remaining Threads are not allowed to execute any static synchronized method on that class simultaneously.
But remaining Threads are allowed to execute normal static methods,normal instance methods,synchronized instance methods.

Synchronized block :
-------------------- 
If very few lines of code requires synchronization then it is never recomended to declare those entire method as synchronized.
we have to declare those few lines of code inside synchronized block.
Main advantage of synchronized method over synchronized block is it reduces the waiting time of Threads and improoves the performance of the system.

To get Object level Lock 

	synchronized(this)
	{
	}
	
To get Class level Lock

	synchronized(Test.class)
	{
	}
	
*************************************************************  11.Inter Thread Communication  ***************************************************************

Two Threads can communicate with each other by using wait(),notify() and notifyAll() methods.
The Thread which requires update has to call wait().
The Thread which is performing update has to call notify() so that waiting Thread will get the notification and continues its execution with those updates.

Note :
------
wiat(),notify() and notifyAll() are available in Object class but not in Thread Class because Thread can call these methods on any Java Object.
To call any of these methods compulsory Current Thread should be the owner of the object i.e
Current Thread should acquire lock of an object i.e current Thread should be in synchronized area.

wait(),notify() and notifyAll() should be in synchronized area otherwise we will get RuntimeException saying IllegalArgumentException.
Once a Thread calls wait() on any object First it releases the lock of that particular object immidealtely and enters into waiting state.
Once a Thread calls notify() on any of the object It may not release the lock immideately and does not enter into waiting state.
Except wait(),notify() and notifyAll() there is no other method where lock is released and will be happened automatically.

*************************************************************  12.Producer Consumer problem  **************************************************************

Producer has to produce items to the Queue and Consumer has to consume items from the Queue.
If the Queue is empty then consumer Thread has to call the wait() and enter into waiting State.
After producing items to the Queue,Producer Thread has to call notify() on to the Queue so that waitig consumer will get notification and will get updated.

Note :
------
On which object we are trying to call wait(),notify() and notifyAll() we have to get the lock of that particular object.
we can use notify() to give the notification only for one object.
If multiple Threads are waiting for notification then only one Thread will get notification and all the remaining Threads are required to wait for further notification.
But which Thread will get the notification we cannot expect exactly and it depends on JVM.
we can use notifyAll() to give the notification for all waiting Threads of a paticular object,But the execution should be one by one.

*************************************************************  13.Daemon Threads  *************************************************************************

The Threads which are executed in the background are called Daemon Threads.
Main objective of Daemon Thread is to provide support for Non Daemon Threads.
We can check whether the Thread is Daemon or Non Daemon by using isDaemon().

	publuc final boolean isDaemon()
	
We can change the Daemon nature of the Thread by using setDaemon(boolean b).
We can change the Daemon nature of the Thread before starting only otherwise we get runtime Exception saying IllegalThreadstateException.
Main Thread is always non Daemon and is possible to change this nature.
Daemon nature will be inheriting from Parent to Child i.e If the Parent is Daemon then Child is also Daemon.
If the Parent is non Daemon then Child is also non Daemon.
Whenever the least Daemon Thread terminates all the Daemon Threads will be terminated automatically.

Deadlock :
----------
If two Threads are waiting for each other forever such type of situation is called Deadlock.
There is no resolution technique for Deadlock but there are several prevention techniques.
synchronized keyword is the only one reason for Deadlock.
Hence while using synchronized keyword we have to take much care.

Deadlock vs starvation :
------------------------
In case of Deadlock waiting Thread never ends.
A long waiting Thread which ends at a certain point of time is called starvation.

Note :
------
Least priority Thread has to wait until completing all the Threads.
But this long waiting Thread should compulsory ends at certain point of time.

*************************************************************  14.ThreadGroup  ***********************************************************************

Based on the functionality we can group the Threads into a single unit which is nothing but ThreadGroup.
ThreadGroup provides a convenient way to perform common operations for all the Threads belongs to a particular Group.

Java MultiThreading concept is implemented by using the following two concepts

1.GreenThread Model
2.NativeOS Model

GreenThread Model :
-------------------
The Threads which are managed completely by the JVM without taking support of OS is called Green Thread.
 
2.NativeOS Model :
------------------
The Thread which are managed with the help of underlying OS.such type of Thread is called Native Thread.

ThreadLocal :
-------------
we can use ThreadLocal to define local Resources of a Thread like Database Connection,counter variables etc.

RaceCondition :
---------------
If multiple Threads are operating on the same object simultaneously then there may be a chance of data inconsistency problems.
The situation is called Race Condition and we can resolve Race Condition by using synchronized keyword.

