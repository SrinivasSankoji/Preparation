1.Introduction														[16-JAN-2022]  (Done)	
2.Install Junit                                     				[16-JAN-2022]  (Done)
3.Junit TestCase                                    				[16-JAN-2022]  (Done)
4.Junit TestFixture                                 				[16-JAN-2022]  (Done)
5.Ways to Execute Junit TestCases                   				[17-JAN-2022]  (Done)
6.Junit Annotations                                 				[17-JAN-2022]  (Done)
7.Junit Ignore TestCase                             				[18-JAN-2022]  (Done)
8.Junit Test Suite & Filtering Test Cases           				[30-AUG-2022]  (Done)
9.Junit @Tag and Filtering Tagged tests (javabydeveloper)			[30-AUG-2022]  (Done)
10.Junit Test Execution Order                        				[28-AUG-2022]  (Done)
11.@RepeatedTest                                    				[28-AUG-2022]  (Done)
12.@Nested                                          				[17-SEP-2022]  ()
13.Custom Display Name and @Conditional             				[10-SEP-2022]  (Done)

14.Junit vs TestNG                                  				[18-JAN-2022]  ()
15.Junit Additional Classes                         				[11-SEP-2022]  ()
16.Junit Assertions (howtodoinjava)                                 [11-SEP-2022]  (Done)
17.Grouped Assertions                               				[02-SEP-2022]  (Done)

********************************************************** 1.Introduction ******************************************************************************************

In a typical Test Driven Development(TDD) Approach,Developers focus on writing the unit test cases for every chunk of code they developed.
The better the testing of the Product,the better the Quality of the Product.
We all know that testing should go paralelly with each phase of the SDLC.

Unit Testing :
--------------
Unit Testing is nothing but testing a small piece of code or logic to verify the output of the code is as expected on the the specific input data by satisfying certain conditions.
Unit Tests helps the developer to find out the issues in the current logic and any regression failures due to the current change.
Unit Tests also provides the insight on how the current code could impact the future implementation.

Unit Tests are not feasible to test complex interfaces with another Application or third party/external services.
Usually Unit Tests are supposed to be independent of other Tests.

Test Coverage :
---------------
The percentage of the code that is tested by the Unit Test Cases is called Test Coverage.
Running the Test Cases automatically helps us to identify the software regression issues introduced by the changes in the current code.

Manual Testing vs Unit Testing :
--------------------------------
Unit Testing can be done in two approaches.

1.Manual Testing
2.Automation Testing

In both the Approaches workflow remains the same
Create the Test Case
Review the Test Case
Rework If the correction is needed
Execute the Test Case
Analyze the Test Results

When a Test case is executed manually without an intervention of a tool is called Manual Testing.
Similarly when a Test case is executed with the help of a tool without much manual intervention is called Automation Testing.

Unit Test Framework :
---------------------
Developers use the Unit Test Framework to write the Automated Unit Test Cases.
Junit is an open source Unit Test Framework that is used for writing and executing Unit Test Cases in Java Programming Language.
It is one of the best known Unit Testing Framework.

Examples of Junit TestCase :
----------------------------

	public class HelloWorldTest {
		@Test
		public void test() {
			assertEquals("Hello world", "Hello world");
		}
	
		@Test
		public void testHelloWorld() {
			HelloWorld helloWorld=new HelloWorld("Hello world");
			assertEquals(helloWorld.getMessage(), "Hello world");
		}
	}

********************************************************** 2.Install Junit  ******************************************************************************************

Junit5 works with Java8 or above.Hence it supports Lambda Expression of Java Code as well.
It is the next generation of Junit that comes with different versions named as 

Junit Platfrom
Junit Jupiter
Junit Vintage

Junit Platfrom :
----------------
Junit Platform for Junit 5 works with the help of two API's.
One that enables the user to create the Testing Framework.
Another that helps the user to launch the Test through IDE or through the command line.

Junit Jupiter :
---------------
junit-jupiter-api is the main module where all the core annotations are located such as @Test,Lifecycle method annotations and Assertions.
junit-jupiter-engine has the Test Engine implementation which is required at runtime to execute the Tests.
junit-jupiter-params supports for parameterized tests in Junit 5.

Junit Vintage :
---------------
Sometimes we need the older version of the Junit Code to be worked along with the current Code.
This can be done by using Junit Vintage API.

********************************************************** 3.Junit TestCase ********************************************************************************************

	public class HelloWorldTest {
		@Test
		public void test() {
			assertEquals("Hello world", "Hello world");
		}
	
		@Test
		public void testHelloWorld() {
			HelloWorld helloWorld=new HelloWorld("Hello world");
			assertEquals(helloWorld.getMessage(), "Hello world");
		}
	}
	
********************************************************** 4.Junit TestFixture ****************************************************************************************

When there are multiple Test Cases in the Junit Class,there could be a common Object or Objects used by all the Test cases.
Here the common Object can be a specific function that might be common function throughout all the Test Cases.

Test Fixture is a set of fixed steps in a Code that can be used as pre condition or post condition for all the Test Cases.
The main purpose of Test Fixture is to eliminate the duplication of the code for all the Test Cases.

With @BeforeEach Annotation Framework will run the setUp() before every TestCase.
With @AfterEach Annotation Framework will run the tearDown() after every TestCase.
With @BeforeAll Annotation Framework will run the preClass() only Once Before All the Test Cases.
With @AfterAll Annotation Framework will run the postClass() only Once After All the Test Cases.

Note :
------
@BeforAll and @AfterAll must be declared as static.

The names setUp() and tearDown() are just user defined names and we can set any name for the Method.

	
	@BeforeAll
	public static void preClass() {
		System.out.println("This is the preClass() that executes only Once Before All the Test Cases");
	}
	
	@BeforeEach
	public void setUp() {
		System.out.println("This is the setUp() that executes Before every Test case");
	}

	@Test
	public void test1() {
		System.out.println("This is the testcase test1() in this class");
	}

	@Test
	public void test2() {
		System.out.println("This is the testcase test2() in this class");
	}

	@Test
	public void test3() {
		System.out.println("This is the testcase test3() in this class");
	}

	@AfterEach
	public void tearDown() {
		System.out.println("This is the tearDown() that executes After every Test case");
		System.out.println("\n");
	}
	
	@AfterAll
	public static void postClass() {
		System.out.println("This is the postClass() that executes only Once After All the Test Cases");
	}
	
Order of Execution will be

@BeforeAll
@Before
@Test
@After
@AfterAll

********************************************************** 5.Ways to Execute Junit TestCases ***********************************************************************

In order to execute Junit Test Cases there are certain ways where in we could run a Single Test Class which contains one or more Test Methods through the following Options.

1.Run as Junit Test option.
2.Run using the shortcut key ie ALT+SHIFT+X T
3.To execute only one Test method in the Class	ie Right Click on the Test Method and run as Juint Test
4.Run the Junit Tests from the Command Line
5.Run the Junit Tests using Testrunner Class
6.Run the Junit Tests using Maven

5.Run the Junit Tests using Testrunner Class :
----------------------------------------------
In realtime scenario executing one Test Case at a time is the least preferred option.
Consider the scenario where in we need to run a group of related/un related Test Cases.
Here we need to create and execute Test Suites.
The different Annotations that can be used in JUnit4 to create and execute the Test Suites are

@Suite
@SuiteClasses
 
The overall process for executing the Test Suite using the Test Runner is as follows
1.Create the Test Suite Class for grouping the Test Cases
2.Create the Test Runner class to invoke the Test Suite created
3.Execute the Test Runner class

		public class TestCaseOne {

			int x = 36;

			@Test
			public void compareInteger() {
				int y = 23;
				Assertions.assertEquals(x, y);
			}

		}
		
		public class TestCaseTwo {

			String name1 = "Bhaumik";

			@Test
			public void compareString() {
				String name2 = "Aadvik";
				Assertions.assertEquals(name1, name2);
			}
		}
		
In JUnit4 To group multiple Junit Test Classes and bind them into a single Test Suite we use the Annotations 
@Suite
@SuiteClasses


		import org.junit.Before;
		import org.junit.runner.RunWith;
		import org.junit.runners.Suite;
		import org.junit.runners.Suite.SuiteClasses;

		@RunWith(Suite.class)
		@SuiteClasses({ TestCaseOne.class, TestCaseTwo.class })
		public class TestSuiteDemo {

			@Before
			public static void runJunitTestSuite() {
				System.out.println("Running Junit Test Suite for Test Cases TestCaseOne and TestCaseTwo");
			}
		}
		
6.Run the Junit Tests using Maven :
-----------------------------------

********************************************************** 6.Junit Annotations  ************************************************************************************

A Test execution goes through different stages of life cycle.
Before starting a Test there are certain activities to be performed on the initialization of the Class.
Certain other activities to be performed before Test case begins.
Certain other activities to be performed during the Test Execution or after the Test Execution.
All the above scenarios can be done using the below Annotations.

@BeforeAll
@BeforEach
@Test
@AfterEach
@AfterAll

Other Annotations are

@TestMethodOrder and @Order
@ExtendWith
@TestFactory
@Nested
@Tag
@ParameterizedTest and @ValueSource
@RepeatedTest
@DisplayName
@TestInstance

********************************************************** 7.Junit Ignore TestCase *********************************************************************************

Sometimes we get the requirement where we need not run the Test Cases or not supposed to run all the Test Cases.
In this case we need to ignore the Test Cases and that can be done by using @Ignore in Junit 4 and @Disabled in Junit 5.
@Ignore or @Disabled Annotation can be used at Test Level or at Class Level.

		@Test
		@Disabled
		public void testHelloWorld() {
			HelloWorld helloWorld = new HelloWorld("Hello world");
			assertEquals(helloWorld.getMessage(), "Hello world");
		}

********************************************************** 8.Junit Test Suite & Filtering Test Cases *****************************************************************

The Annotations @RunWith,@SelectClasses and @SelectPackages helps us to create a Test Suite by grouping multiple Junit Test Cases in Junit5.

To create a Test Suite by grouping Multiple Test Classes in Junit5

		@RunWith(JUnitPlatform.class)
		@SelectClasses(PaymentTest.class)
		public class IncludeClass_TestSuite_Test {
		}
		
To create a Test Suite for a Single Package or Multiple Packages using @IncludePackages and @SelectPackages in Junit5

		@RunWith(JUnitPlatform.class)
		@SelectPackages("com.javabydeveloper.payment")
		public class IncludePackages_TestSuite_Test {
		}

Filtering Test Suite :
----------------------
Sometimes we need to filter out the Test Cases and execute a particular set of Test Cases based on our requirement.
Consider the scenario where some of the Test Cases are identified for Regression Testing,Smoke Testing,Unit Testing and so on.
Consider the scenario where we need to include or exclude Test Cases from certain packages or Classes or Categories etc.
The Annotations that can be used to filter out the Test Cases are

@Tag
@IncludeTags
@ExcludeTags
@IncludePackages
@ExcludePakcages
@IncludeClassNamePatterns
@ExcludeClassNamePatterns

********************************************************** 9.Junit @Tag and Filtering tagged tests (javabydeveloper) **********************************************

Test Classes and Methods can be tagged in Junit5 using @Tag Annotation.
Those Tags can later be used to filter out the Test discovery and Execution.
We can also include multiple tags using @Tags Annotation.

Rules for creating the Tag :
----------------------------
A Tag must not be null or blank.
A Tag must not contain white space.
A Tag must not containg ISO Control Characters.

	package com.junit.javabydeveloper.tag;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

public class TagTest {

	@Tag("Acceptance")
	@Test
	void acceptanceTest() {
		System.out.println("Acceptance Test");
	}

	@Tag("Accessibility")exc
	@Test
	void accessibilityTest() {
		System.out.println("Accessibility Test");
	}

	@Tag("Security")
	@Test
	void securityTest() {
		System.out.println("Security Test");
	}

	@Tag("Api")
	@Test
	void apiTest() {
		System.out.println("Api Test");
	}

	@Tag("Load")
	@Test
	void loadTest() {
		System.out.println("Load Test");
	}

	@Tag("Performance")	
	@Test
	void performanceTest() {
		System.out.println("Performance Test");
	}

}

Note :
------
We can also create our own cusom tags.

**********************************************************  10.Junit Test Execution Order  *************************************************************************

Test Methods does not follow any specific order by default.
Test cases does not execute in the order in which they have written.
There are different ways or modes to set the order of execution for the Test cases.

Junit 4 :
---------
MethodSorters.DEFAULT
MethodSorters.JVM
MethodSorters.NAME_ASCENDING

The package org.junit.runners.* needs to be imported to include the class MethodSorters.

	@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class Junit4OrderTest {

	@Test
	public void Testcase_3() {
		System.out.println("Testcase_3 executes");
	}

	@Test
	public void Testcase_1() {
		System.out.println("Testcase_1 executes");
	}

	@Test
	public void Testcase_2() {
		System.out.println("Testcase_2 executes ");
	}
}

Junit5 :
--------
To control the Order of executions in Junit5 we have

@TestMethodOrder
@Order
@Random

The built in TestMethodOrder classes and their details are

Alphanumeric  : Sorts the methods Alphanumeric based on their names.
OrderAnnotation : Sorts the methods numerically based on the values passed to the @Order Annotation.
Random : Sorts the methods randomly just like in the MethodSorters.JVM in Junit4.

	package com.junit.softwaretestinghelp;

import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

@TestMethodOrder(OrderAnnotation.class)
public class Junit5OrderTest {

	@Test
	@Order(1)
	public void Testcase_3() {
		System.out.println("Testcase_3 executes");
	}

	@Test
	@Order(2)
	public void Testcase_1() {
		System.out.println("Testcase_1 executes");
	}

	@Test
	@Order(3)
	public void Testcase_2() {
		System.out.println("Testcase_2 executes ");
	}
}

Note :
Junit5 also supports custom orders by implementing the interface MethodOrder.

********************************************************** 11.@RepeatedTest  **********************************************************

The term Repeated Test means to repeat the execution of specific Test Case or Test Method for certain number of times.
The same purpose can be achieved in Parameterized Test also.
The only difference between the Parameterized Test and Repeated Test is that Parameterized Test works with data variations while Repeated Test works with the same data.

Consider the scenario of Banking Application.
When we click on the Payment Link,It shows an Exception saying that "Page cannot be displayed".
This disappears after 4 Clicks and this is consistent and known issue for the Client.
Here we cannot have Tests failure for such Environmental Issues and that would not accepted by the Client.
The solution could be either we have to write the logic within the Test case itself to handle the Clicking of the Payment Link for 5 times and have our Test Proceed.
The other Solution is use the @RepeatedTest Annotation.

Syntax :
--------
@RepeatedTest Annotation can be used instead of Annotation @Test.
A Number is passed as an input parameter to the @RepeatedTest Annotation.Then the Method repeats the execution for that many number of times.

Rules :
-------
@RepeatedTest Annotation cannot be private and static.
@RepeatedTest Method return type must be void only.
	
	public class RepeatedTestDemo {

	@RepeatedTest(5)
	@DisplayName("Test case for Multiplication")
	void multiply() {
		int a = 10;
		int b = 20;
		assertEquals(200, (a * b), "Matched. Test status - Passed");
	}
}

In order to understand the usage of the Annotation,we first need to understand the place holders supported by @RepeatedTest Annotation.

CURRENT_REPETITION_PLACEHOLDER : Returns the count of the current repetition.
TOTAL_REPETITIONS_PLACEHOLDER :  Returns the total count of total petetions. 
DISPLAY_NAME_PLACEHOLDER : Returns the value that has passed as a parameter to the @DisplayName Annotation.

	public class RepeatedTestDemo {

	@DisplayName("Test case for Multiplication")
	@RepeatedTest(value = 5,name = RepeatedTest.LONG_DISPLAY_NAME)
	void multiply(TestInfo testInfo) {
		int a = 10;
		int b = 20;
		assertEquals(200, (a * b), "Matched. Test status - Passed");
	}
}

TestInfo Interface :
--------------------
TestInfo is an interface that fetches the details about the Test Method which has annotated with @Test,@RepeatedTest or Parameterized Test.
TestInfo can also be used with lifecycle callback methods like @BeforeEach,@AfterEach,@BeforeAll and @AfterAll.

RepetetionInfo Interface :
--------------------------
RepetetionInfo is an interface that fetches the details about the Repetetion of the Test Method.

RepeatedTest Interface :
------------------------
RepeatedTest is an Interface that fetches the details about the @RepeatedTest Annotation like name and value.

	public class RepeatedTestInterfaceDemo {

	@RepeatedTest(value = 2)
	@DisplayName("Interface Methods")
	@Tag("Annotations")
	public void interfaceDemo(TestInfo testInfo,RepetitionInfo repetitionInfo,RepeatedTest repeatedTest)
	{
		System.out.println("TestInfo Details");
		System.out.println("TestInfo :"+testInfo.getDisplayName());
		System.out.println("TestInfo :"+testInfo.getTags());
		System.out.println("TestInfo :"+testInfo.getTestMethod().get().getName());
		
		System.out.println("***Repetition Details***");
	    System.out.println("Current Repetition:" + repetitionInfo.getCurrentRepetition());
	    System.out.println("Total Repetitions:" + repetitionInfo.getTotalRepetitions());
	 
	    System.out.println("***Annotation Details***");
	             System.out.println("Name value of @RepeatedTest annotation:" + repeatedTest.name());
	    System.out.println("Value of @RepeatedTest annotation:" + repeatedTest.value());
	}
}

********************************************************** 12.@Nested  **********************************************************

Nested Class as the name suggests it is the class that is placed inside another class and is arranged in hierarchical structure.
There could be a situation where a Test class contains several Tests that include complex logic.
In such cases Nested classes or classes may be used.This option is not available in Junit4.

Here the complex and multiple Test cases can be broken down in such a way that each Test case could be smaller and modularized.
The related Tests can be grouped under each seperate class and embeeded under the main group.

Rules for Nested Annotation :
-----------------------------
@Nested Annotation can be used on Class and not on a specified Test.
Outermost class can never be annotated with @Nested.
Nested class should contain non static methods.
Nested class can have seperate lifecycle than Outer class.

Example of Nestd Class :
------------------------


Example With Lifecycle Methods From Main Class :
------------------------------------------------


Example With Separate Lifecycle Methods For Nested Class :
----------------------------------------------------------



********************************************************** 13.Custom Display Name and @Conditional  **********************************************************

@Displayname Annotation can be used on a class or Method to add the customized name to the Method which can be shown in the Report/Result.
This makes the class name and the Test name more readable even to a person with no Technical Background.
This is by default supported by Junit5.

Disabling Tests :
-----------------
Disabling the Test means skip the Test during Test Execution.
There might be several reasons for this.
The code under the Test case is still under development and want to avoid the Test case.

Conditional Disabling Vs Unconditional Disabling :
--------------------------------------------------
@Disabled Annotation can be used to disable the Test class or Test case for execution without providing a specific condition.
Here it does not look for any condition to satisfy before disabling it during execution.
Conditional disabling the Tests is the way using which the Test could be disabled based on certain conditions like JRE,Environment variables,OS etc.
Similar to disabling the Tests based on certain conditions, we can also enable the Tests based on certain condition.

Disable Or Enable Tests Per Certain Logic Or If Condition :
-----------------------------------------------------------


Disable Or Enable Tests Based On Operating System :
---------------------------------------------------


Disable Or Enable Tests Based On Java Runtime Environment :
-----------------------------------------------------------

Disable Or Enable Tests Based On The Environment Variables :
------------------------------------------------------------


Disable Or Enable Tests Based On System Property :
--------------------------------------------------

********************************************************** 14.Junit vs TestNG  ************************************************************

1********************************************************** 5.Junit Additional Classes ****************************************************

********************************************************** 16.Junit Assertions ************************************************************

Assertions helps us to validate the expected output with the actual output for a specific Test case.
Writing Assertions is the fastest and effective way to detect and fix the bugs.
Someties assertions work as a pre condition or post condition for a function call.

********************************************************** 17.Grouped Assertions  **********************************************************

Junit5 supports additional feature called Grouped Assertions.
Whenever we want to execute multiple assertions together and get the consolidated report,Grouped Assertions will come into the picture.
We can also define Grouped Assertions with Heading or without Heading.

	@Test
	public void groupedAssertionTest() {
		float a = (float) 1.2;
		float b = (float) 1.3;
		float delta = (float) 1.0;
		assertAll(() -> assertEquals(a, b, "Assert with Delta"));
	}
	
Nested Or Dependent Grouped Assertions :
----------------------------------------
Grouping of grouped Assertions is possible in Junit5 and is called Netsed Grouped Assertions or Dependent Grouped Assertions.
assertAll() is considered as Single Grouped Assertions.
When one assertAll() includes one or more assertAll() then it is said to be Nested Grouped Assertions.

	@Test
	public void nestedGroupedAssertionTest() {
		Employee employee = new Employee("Bhaumik", 23);

		assertAll("Grouped Assertions", () -> {

			assertNotNull(employee.getEname());

			assertAll("Nested Assertions", () -> {
				assertEquals(employee.getEmpcode(), 21);
			});
		});
	}
	
If the external assert fails,it skips all the dependent or internally grouped assertions during execution.
We can use Nested Grouped Assertions when one or more Test cases is dependent on the other.
When the result of one assert statement is the deciding factor of another assert statement,we use Nested Grouped Assertions.





















		
		







 


 

                                