1.Microservice Configuration								[10-MAY-2020]  (Done)					
2.What and Why                                              [10-MAY-2020]  (Done)
3.Property File Configuration                               [10-MAY-2020]  (Done)
4.External Property Sources                                 [10-MAY-2020]  (Done)
5.Value Annotation                                          [10-MAY-2020]  (Done)
6.Configuration Properties                                  [10-MAY-2020]  (Done)
7.Yaml Files                                                [11-MAY-2020]  (Done)
8.Spring Profiles                                           [11-MAY-2020]  (Done)
9.Environment Object                                        [11-MAY-2020]  (Done)

10.Spring Cloud Config Server                               [12-MAY-2020]  (Done)
11.Set up Spring Cloud Config Server                        [12-MAY-2020]  ()
12.Spring Cloud Config Client                               [12-MAY-2020]  ()
13.Dynamic Config                                           [12-MAY-2020]  ()
14.Best Practices                                           [12-MAY-2020]  ()


*********************************************************  1.Microservice Configuration  *******************************************************************

In this Series we understand the Microservice Configuration Goals
Some of the Configuration Features in Spring Boot like 

value
ConfigProps
Actuator
Spring Profiles
Environment

Spring Cloud Config Server which is a Project of Spring Cloud
Dynamic Configuration
Some of the Industry Best Practices


*********************************************************  2.What and Why  **********************************************************************************

Configuration is essential for any Production Application.
It is a best practice to seperate the Application Code and Configuration.
If parameters are not part of business Logic and they keep on change it is better to make them as configurable.
Some of the examples of Configuration are 

1.Database Connections
2.Credentials like Authentication
3.Feature Flags like boolean flag
4.Business Logic Configuration Parameters like discount
5.Scenario Testing like increase the trafic of the Application
6.Spring Boot Configuration like Hystrix Parameters,Connection parameters,error parameters

whenever we want to deploy any production Application it has to go through all the Phases of Lifecycle
and it has to run all the test Cases,then deploy into production.
If we want increase the number of threads for a Microservice then no need to build and deploy the Application.
It has to be Configured here and For Confoguration Changes it has to be moved to the Production without any build and deployment.
Configuration changes has to be very fast,easy and real time.


Different type of Configs are 

1.XML Files
2.properties
3.yaml
4.json

These are the File that we save the Configuration and effect the Production.
Scenario is 

Multiple Microservice Applications
Multiple instances of each Microservice Application

At the end of the development of Microservice Application we should have

1.externalized Configuration
2.environment Specific Configuration
3.consistent i.e if we have multiple instance of each microservice then all the Microservice should point to the Same Configuration.
4.version History i.e we can have configuration History
5.Realtime Management i.e if one Microservice is Consumed by lot of applications then increase the number of threads and it should be affected 
while all the Microservice are running.

 
*********************************************************  3.Property File Configuration   ************************************************************************

Firste step to externalize the Microservice Configuration is to actually put them in config File and then read it in our Application.
Create a Spring boot Project 
	
		spring-boot-config-brains
		
Spring provids the value from the Property instead of we asking for the Property.
This is called value Injection.

	private String greetingMesage;
	
We can ask the Spring to inject the value fo the property into the above variable.
This can bedone by using @Value annotation.

	@Value("${test.greeting}")
	private String greetingMesage;
	
Another thing about property File is that we can refer one property from another directly in our property file.

	test.greeting=${test.description}

	test.name=Configuration 
	test.description= Welcome to Spring Boot ${test.name}
	
Here we have taken only the Configuration out from the Code.
Property File is inside the Jar and to effect the Changes it has to build and deploy.


*********************************************************  4.External Property Sources   **************************************************************************

Most of the Cases we put the Configuration in our Spring boot Application and then we build the Application.
Here the Property File is Sitting inside the Jar.
If we want to change the Property no need to compress the Jar and do the Changes.
We can have the Spring Boot Application with the Jar intact and look for the Configuration Outside without having to do anything with the Jar.
One way to run the Spring Boot Application is to run the Jar File.

	java -jar jarName
	
Create application.propertie here and override the Values.
Now the Values are overidden by the Spring Boot when we run the Jar.
Property File outside the Jar is Overridden inside the Jar.
We have an Opportunity Create a MicroService with Some Default Property and push it to all the nodes where it needs to run 
and any time i need to override it,Create another application.properties next to it.
We have one Step more for the Configuration.
Different host can have different values Configured for the Properties File.
This ia another way of overriding the Configuration.

We not only override the application.properties externally,we can also override the property in the application.properties file using command Line.

	java -jar jarName  test.greeting="Form Command Line Argument"

@Value Annotation also looks for the System Properties as well.
There are lot of sources Spring looks for the property in the Configuration File
and there are differnet levels where we can override them.


*********************************************************  5.Value Annotation   *********************************************************************************
 
@Value Annotation is an Essential way to get the Value from Properties File.
By Using @Value Annotation we get some static String.

	@Value("Welcome Bhaumik Chary")
	private String message;
	
There are some Cases where we need a default Value if the property does not exist.
Here Application wont Start.
Possible Solution is application should get the Default value if the property does not exist.

	@Value("${message:Welcome Bhaumik Sankoji}")
	private String defaultMessage;
	
Sometimes we assign multiple values to the property in properties File.
If we want to read the property as List we use the @Value Annotation.

	@Value("${test.names}")
	private List<String> names;
	
We can also define the key value pair in Properties File and get them using @Value Annotation.

	@Value("#{${test.dbdetails}}")
	private Map<String,String> dbdetails;
	
Here # treats as a Spring Expression Language


*********************************************************   6.Configuration Properties  ***************************************************************************

@ConfigurationProperties is a sepcific Annotation related to Configuration and pull the properties from the Configuration File.
This is sepcifically used when we have a group of Configuration Values that we want to pull up at once and make it available throughout the Application.
Consider the case we have define some properties in the Configuration File.
All the properties are prefix with db.

	db.driver=OracleDriver
	db.username=system
	db.password=bhaumik23
	
Create a Class that conatins all the Properties and add the Annotation @ConfigurationProperties("db") to the Class.
Here it will automatically read the propertis from the Properties File.

	@ConfigurationProperties("db")
	@Data
	public class DbDetails 
	{
		private String driver;
		private String username;
		private String password;
	}

Now Autowire the DbDetails ,then we get all the Properties of db at one time.
If we change the type of the property in the properties File then we get an exception at the time of application Start up.

If we want to group the properties and can be used in Multiple Places we use ConfigurationProperties
If we want to use for a Single property we use @Value.

Add the Actuator dependency to see all the Endpoints.
Add the below property in the proprties File.

	management.endpoints.web.exposure.include=*
	
Then Hit the following URL 

	http://localhost:3001/actuator/configprops
	

*********************************************************   7.Yaml Files   *****************************************************************************************

properties file is one way of Configuration and another way of configuration is YAML File.
YAML stand for Yet Another Markup Language or YAML Ain't Markup Language.
It is a Language to store data Elements like Configuration.
YAML has the Syntax of key:value.
YAML has support for different data types.
True benefit of YAML is in its Nesting Structure.
There must be space between keys and values in YAML.

*********************************************************   8.Spring Profiles    ***********************************************************************************

Goals that the MicroService should have in terms of Configuration.

1.Externalized
2.Environment Specific
3.Consistent
4.Version History
5.RealTime Management

With Properties File or YAML we have made the Configuration externalized.
If we seperate the Properties File from the Jar then we get environment Specific Configuration.
Here the drawback is it is outside the Source Control.
It also needs a Manual Maangement across different Environments.

we can specify environment specific Configuration usig Spring Profiles.
When we run the Application without Profiles we get No Active Profile Set in the Console and falls back to default Profile.
Profile is nothing but a set of Configuration Values that is applicable to specific environment.
To create a Profile Name we use the below format.

	application-profile.properties
	
To Specify which Configuartion has to pickup by the Spring we need to mention the details in the Configuration File.

	spring:
		  profiles:
			active:
			- test
			
By default Default Profile is active always i.e application.properties or application.yml and 
From the default Profile we specify the Configuration which profile has to pick up.
At any point of time we have Two Active Profiles if we specify the profile.
We have different Profile for different Environments.
If we want to run a Profile for Production Environment

	java -jar jarName --spring.profiles.active=production
	
We can also select the Beans by Profile Name.

	@Repository
	@profile("production")
	public Class ProductionDatasource
	{
	
	}
	
	@Repository
	@profile("local")
	public Class LocalDatasource
	{
	
	}
	
Beans have different instantiation based on Profiles.
If the Profile Annotation is not set for the Bean by Default it takes the default profile.


*********************************************************   9.Environment Object   *********************************************************************************

By Usig @Value and @Configprops we are asking Spring to inject the Configuration Values.
By Using Environment Class we are looking up for the Configuration Values.
We need to Autowire the Environment and look up for the Configuration values.
By Using Environment we can get the Active profiles in our Application.

	@Autowired
	Environment env;	
	
	@GetMapping("/envDetails")
	public String[] getEnvDetails()
	{
		return env.getActiveProfiles();
	}

We should not look up for profiles or properties and better to avoid Environment.


*********************************************************  10.Spring Cloud Config Server   **************************************************************************

we use properties File to Confifure Spring Boot Applications.
Consistency is more important in Configuration in the context of MicroServices.
Consider the Case we have Multiple MicroServices and we need to make sure that all the MicroService refers to the Same Configuration File.
All we need to do is take out the Configuration from all the MicroServices and make it as a Configuration Server.
Here all the MicroServices refer to the same Configuration Server.
Each MicroService can ask the value for the Configuration Server varies i.e at the time of Application Startup etc.
Some of the Technologies to Implement Config as a Service are

1.Apache Zookeeper
2.ETCD -distributed key value store
3.Hashicorp Consul
4.Spring Cloud Configuration Server

Configuration Server stores the Configuration in the Repository.
Here Changes to the Config should happen without a build.
Spring Cloud Config Server can connect to various different data Sources.

********************************************************* 11.Set up Spring Cloud Config Server   ********************************************************************


















 



















