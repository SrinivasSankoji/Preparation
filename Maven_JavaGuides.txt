1.Overview Of Maven													[23-SEP-2021] (Done)
2.Apache Maven Standard Directory Layout                            [23-SEP-2021] ()
3.Getting Started with Maven                                        [23-SEP-2021] ()
4.Maven Dependency Mechanism                                        [23-SEP-2021] (Done)
5.Guide to Maven Repository                                         [23-SEP-2021] (Done)
6.Difference between Ant, Gradle, and Maven                         [24-SEP-2021] (Done)
7.Maven Release to Nexus                                            [23-SEP-2021] ()

8.Guide to Create a Simple Maven Project							[23-SEP-2021] ()
9.Guide to Create a Simple Maven Web Application                    [23-SEP-2021] ()
10.How to Create Maven Multi Module using Command Line              [23-SEP-2021] ()
11.Source Code Quality Checks using PMD Plugin                      [23-SEP-2021] ()
12.Setting the Java Version in Maven Projects                       [23-SEP-2021] ()

13.How to Create a Simple Maven Project in Eclipse					[23-SEP-2021] ()
14.How to Create a Web Project Using Maven in Eclipse               [23-SEP-2021] ()
15.How to Create Multi-Module Maven Project in Eclipse              [23-SEP-2021] ()
16.How to Convert Java Project to Maven Project in Eclipse          [23-SEP-2021] ()

17.Apache Maven Compiler Plugin										[24-SEP-2021] (Done)
18.Maven Surefire Plugin                                            [24-SEP-2021] (Done)
19.Maven Failsafe Plugin                                            [24-SEP-2021] (Done)
20.Apache Maven Assembly Plugin                                     [23-SEP-2021] ()
21.Apache Maven Checkstyle Plugin                                   [23-SEP-2021] ()
22.Apache Maven Dependency Plugin                                   [23-SEP-2021] ()
23.Apache Maven Help Plugin                                         [23-SEP-2021] ()
24.Apache Maven PMD Plugin                                          [23-SEP-2021] ()
25.Apache Maven Resources Plugin                                    [23-SEP-2021] ()
26.Apache Maven Site Plugin                                         [23-SEP-2021] ()
27.Apache Maven Source Plugin                                       [23-SEP-2021] ()
28.Apache Maven Clean Plugin                                        [23-SEP-2021] ()
29.Apache Maven WAR Plugin                                          [23-SEP-2021] ()

***************************************************** 1.Overview Of Maven *************************************************************
1.Introduction :
----------------
To build a Software Project which typically consists of
Creatting the Project Structure
Downloading the dependencies
Adding the external Jars If required
Compile the source code
Running Test Cases
Package the compiled Code into a Artifact ie either War or Jar
Deploy these Artifact into an Application Server or Repository.

Apache Maven automates these tasks by minimizing the risk of human errors while building the software and
seperating the work of compiling and packaging our code from the code Construction.

What is Maven :
---------------
Maven is a project Management Tool which includes Project Obejct Model,Set of Standards,Project Lifecycle,Dependency Management System
and logic for executing PlugIn goals at defined Phases in lifecycle.

What is the Build Tool :
------------------------
Build Tool takes care of everything for building a process.

1.Generates the Source Code
2.Generates the Documentation from the Source Code
3.Compiles the Source Code
4.Packages the Compiled Code
5.Installs the Packaged Code into Local Repository or Remote Repository.

Key features of Maven :
-----------------------
1.Convention over Configuration
Maven knows where the source code is because we followed the configuration.
Maven Compiler places the byte code in target/classes folder and produces Jar file in target folder.
2.Dependecny Management
3.Repository
4.Extnsible via PlugIn's

Apache Maven :
--------------
Maven is declarative ie all we need to do is create the pom.xml file and create the source code in default directory.
Maven has default life cycle methods which will be invoked when we run the command mvn install.
Also Maven executes a default PlugIn goals like compile and creating the Jar.

Project Object Model - Pom.xml :
--------------------------------
The configuration of a Maven project is done via Project Object Model ie pom.xml.
POM describes the Project,manages the dependencies and configures the PlugIns for building the Software.
POM also defines the relationship among other modules.

Project Identifiers :
---------------------
Maven uses a set if identifiers also called as coordinates to uniquely identify the project.
groupId : Unique base name of the company
artifatId : Application Name
version : version of the Project
package : Packaging Method

The first three ie groupId,artifactId and version combine to form the unique Identifier.

Dependencies :
--------------
The external libraries that the project use is called Dependencies.
The Dependecny Management feature in Maven ensures automatic download of those libraries from central Repository.

Repositories :
--------------
A Repository in Maven can be used to hold Artifacts or Dependencies of varying types.
Default Repository is located in .m2/repository.

Properties :
------------
Custom Properties makes the pom.xml file easier to read and maintain.
Consider the scenario of spring boot version.

Build :
-------
Build Section provides the information about the default maven goal ie install
Directory for the compiled project and final name of the Application.

Note :
------
Default output folder for compiled artifacts is "target".

Using Profiles :
----------------
By using profiles we can customize the build for different environment such as development,production etc.
To use the profile we use the command

	mvn clean install -Pdevelopment

***************************************************** 2.Apache Maven Standard Directory Layout ******************************************************


***************************************************** 4.Maven Dependency Mechanism  *****************************************************************
There are two types of dependencies in Maven ie Direct and Transitive.
Direct dependencies are the one which are explicitly included in the project using <dependency> Tag.
Transitive dependencies are the one required by Direct dependencies.

There are 6 dependency scopes available

1.compile :
-----------
This is the default scope when no other scope is provided.
Dependencies with this scope are available on the classpath of the project in all build tasks and 
they are propogated to the dependent projects.

2.provided :
------------
This scope is used to mark the dependencies that should be provided at runtime by JDK or container.
A good usecase will be a web application deployed on container where the container provides some library itself.

	<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>servlet-api</artifactId>
    <version>2.5</version>
    <scope>provided</scope>
	</dependency>

Note:
Provided dependencies are available only at compile-time and in the test classpath of the project. 

3.runtime :
-----------
This scope is used to mark the dependencies required at runtime.
These are the dependencies that are present in the runtime and test classpath but will be missing from compile classpath.

	<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>6.0.6</version>
    <scope>runtime</scope>
	</dependency>

4.test :
--------
This scope is used to mark the dependencies that are required at standard runtime of the Application but is only used for Test purpose.

	<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.12</version>
    <scope>test</scope>
	</dependency>

5.system :
----------
System scope is similar to provided scope.
Main difference is that we need to directly point to a specific jar on the system.

6.import :
----------


           
***************************************************** 5.Guide to Maven Repository  ******************************************************************
Maven Repository is a directory which contains packaged jar files with pom.xml files.
There are three types of Maven Repositories and Maven Searches for the dependencies in the following order.

1.Local Repository
2.Central Repository
3.Remote Repository
             
***************************************************** 6.Difference between Ant, Gradle, and Maven ***************************************************
Apache Ant :
------------
In the beginning Make was the only build Automation Tool.
Apache ANT is the Java library used for automating build process for Java Applications.
Additionally ANT can also be used for building Non Java Applications.
ANT build files are written in XML and by convention they are called build.xml.
Different phases of build process are called "targets".
To run the build.xml we use the command

	ant compile

Main benefit of ANT is flexibility and It does not impose any coding conventions or project structures.
ANT requires developers to write all the commands by themselves and leads to huge build.xml file.
ANT has no built in support for Dependecny Management.
To acheive this Apache Ivy was developed as sub project of Apache ANT.
Due to huge and unmanageable build.xml and no built in support for dependency management leads to the creation of Apache Maven.

Apache Maven :
--------------
Apache Maven is a Dependecny Management and Build Automation Tool primarily used for Java Applications.
Maven continues to use XML files in much more manageable way.
Maven is said to be convention over configuration.

ANT gives flexibility and requires to be written from scratch where as Maven relies on Convention over Configuration.
Maven Configuration which consists of build and Dependency Management instrcutions is called pom.xml.
Also Maven describes a strict project structure where as ANT provides flexibility.
To compile the code we use the command
	
	mvn compile
	
Maven can be considered as PlugIn executable framework since all the work is done by PlugIns.

Gradle :
--------
Gradle is a Dependecny Management and Build Automation tool which is similar to Maven.
Gradle doesn't use xml like ANT or Maven and relies on Domain Specific Language.
Gradle Configuration file by convention called as build.gradle in Groovy.

ANT -- Target
Maven -- Phases
Gradle -- Tasks	

***************************************************** 7.Maven Release to Nexus  *********************************************************************   


***************************************************** 17.Apache Maven Compiler Plugin ***************************************************************
Compiler PlugIn is used to compile the source code of our project.
Compiler PlugIn has two goals.Both are already bound to their phases in the Maven Lifecycle and are automatically executed during their phase.

compiler:compile
compiler:testcompile 
			              
*****************************************************  18.Maven Surefire Plugin   *******************************************************************
Surefire PlugIn is used during the Test phase of the build lifecycle to execute the Unit Tests of an Application.
It generates the reports in two different formats.
1.Plain Text
2.XML File

Surefire PlugIn has only one goal
surefire:test

Note :
By default Surefire includes all the Test Cases whose name starts with Test or Ends with Test or TestCase.
We can inclued or exclude the Test cases.
We can skip the Test cases using the command

	mvn install -DskipTests or mvn install -Dmaven.test.skip=true

             
*****************************************************  19.Maven Failsafe Plugin  ********************************************************************
Failsafe PlugIn is designed to run Integration Tests where as Surefire PlugIn is designed to run Unit Tests.  
             
*****************************************************  20.Apache Maven Assembly Plugin   ************************************************************  
      
*****************************************************  21.Apache Maven Checkstyle Plugin   *****************************************************   
  
*****************************************************  22.Apache Maven Dependency Plugin  *****************************************************   
    
*****************************************************  23.Apache Maven Help Plugin  *****************************************************      
       
*****************************************************  24.Apache Maven PMD Plugin    *****************************************************   
        
*****************************************************  25.Apache Maven Resources Plugin  *****************************************************  
     
*****************************************************  26.Apache Maven Site Plugin   *****************************************************  
         
*****************************************************  27.Apache Maven Source Plugin  *****************************************************  
        
*****************************************************  28.Apache Maven Clean Plugin  *****************************************************  
         
*****************************************************  29.Apache Maven WAR Plugin  *****************************************************             