1.Docker File Build Commands					  									(stackify)					[12-MAR-2021]  (Done)
2.Docker File Build Commands														(odewahn)					[12-MAR-2021]  (Done)
2.DockerFile To Build Your Own Docker Images	  									(LearnITGuide Tutorials)    [12-MAR-2021]  ()
3.Build Own Private Docker Hub Registry on Linux  									(LearnITGuide Tutorials)    [12-MAR-2021]  ()
4.Spring Boot with Docker Container				  									(Simple Programming)        [12-MAR-2021]  (Done)
5.Spring Boot with Docker Container				  									(Play Java)                 [12-MAR-2021]  (Done)
6.Spring Boot with Docker Container				  									(Tech Primers)              [12-MAR-2021]  ()
7.Build and Run a Spring Boot Application with Docker								(thepracticaldeveloper)		[12-MAR-2021]  ()
8.Dockerizing using Maven						  									(stackabuse)				[12-MAR-2021]  ()
9.Docker CMD vs ENTRYPOINT															()							[12-MAR-2021]  ()	
10.Docker Spring Boot MySql															(Techno Town Techie)		[18-MAR-2021]  (Done)
11.Docker Spring Boot MySql															(Tech Primers)				[12-MAR-2021]  ()
12.Docker Spring Boot MySql															(Techies on The Go)			[12-MAR-2021]  ()	
13.Create Docker images with Spring Boot 2.3.0 M1									(Techno Town Techie)		[18-MAR-2021]  ()
14.Create Layered Docker Jars and Layered Docker Images Spring Boot 2.3				(Techno Town Techie)		[18-MAR-2021]  ()



*********************************************************  0.Command to Build the Docker File   ********************************************************* 

FROM  openjdk:8
EXPOSE 9102
ADD ./target/SpringBootDockerImage.jar SpringBootDockerImage.jar
ENTRYPOINT ["java", "-jar", "/SpringBootDockerImage.jar"]

docker build -f SpringBootDockerImage.jar .
docker build -t SpringBootDockerImage.jar:latest .
docker build -f SpringBootDockerImage .
docker build -f Dockerfile -t SpringBootDockerImage .


********************************************************* 1.Docker File Build Commands(stackify)  ********************************************************

Dockerfile is a text file that contains the commands to build an image.

Dockerignore :
Always keep the Docker Image as lean as possible.Package only what the Application needs to run.
Source code usually contains other files and directories such as .git,.gitignore etc.
These are essential for our development workflow but won't stop the app from running.
It is best practice not to have them in our image and that's what .dockerignore is for.
create a file name with .dockerignore at the root folder with the Content.

	.git
	.gitignore
	node_modules
	npm-debug.log
	Dockerfile
	docker-compose*
	README.md
	LICENSE
	.vscode
	
Base Image :
Dockerfile usually starts with the base image and is the starting point for the Dockerfile.
We add the base image to the Dockerfile using FROM command followed by these image.

	FROM openjdk:latest
	
Copying Source Code :
First we need to set the working directory using the command WORKDIR and copy the files using COPY command.
First argument to the COPY command is source path and the second argument is destination path of the image file system.


	COPY package*.json
	RUN npm install
	
Here we are copying package*.json and install our project dependencies using npm install.
Docker images are made up of Layers.
They are created based on the output generated from each Command.

Copying the files that define our app dependencies and install them immideately enables us to take advantage of the Docker Cache.
Main Advantage here is quicker build time.

Exposing a PORT :
Expose informs the Docker on which port the Container is listening at runtime.

	EXPOSE 8600
	
Docker CMD :
CMD command tells the Docker how to run the Application that we packaged into the image when the Container Starts.

	CMD ["java","-jar","/springboot-mysql.jar"]

Tagging a Docker image:	
To push the Docker image into the Repository we need to tag the image using the commad 

	docker tag springboot-mysql:1.0 srinivassankoji/springboot-mysql:1.0
	
Pushing a Docker image to Docker repository	:
To push the image to the Docker Hub using the command 

	docker push srinivassankoji/springboot-mysql:1.0

********************************************************* 3.Docker File Build Commands(odewahn)  ********************************************************

ADD 					: copies files from host system on to the Container.
CMD/ ENTRYPOINT 		: CMD tells the Docker that how to run the Application that we packaged into an Image when the Container starts.
ENV 					: Sets an Environment variable in the new Container.
EXPOSE 					: EXPOSE informs the Docker on which port the Container is listening at runtime.
FROM 					: Add the Base Image to the Dockerfile and must be the first command in the Dockerfile.
MAINTAINER 				: Optional value for the MAINTAINER of the Script.
 

*********************************************************  4.Spring Boot with Docker Container (Simple Programming)  *************************************

To Containerize a Spring Boot Application we need a Docker File.
Docker File is a text file that contains instructions to build the Docker Image.

Note :
To build the jar file in target folder of Spring Boot Application run the Maven Command :

	clean install.

Dockerfile :
FROM openjdk:latest
COPY ./target/springboot-docker-0.0.1-SNAPSHOT.jar springboot-docker.jar
WORKDIR F:/DockerImages
ENTRYPOINT [ "java","-jar","/springboot-docker.jar" ]
EXPOSE 8080

To build the Docker image navigate to the Directory where the Dockerfile is present i.e  F:\DevOps\springboot-docker
Then run the command 

	docker build -t springboot-docker:1.0 .
	
To run the docker image we use the command 

	docker run -p 8090:8080 springboot-docker:1.0
	
Here the Application is running in the same Docker Console.
If we want the application to run as background process i.e in detached mode we use the command -d

	docker run -d -p 8090:8080 springboot-docker:1.0
	
To check whether the Application is running or not

	http://localhost:8090/docker
	
To push the Docker image into the Repository we need to retag the image using the username.

	docker tag springboot-docker:1.0 srinivassankoji/springboot-docker:1.0
	
Then push the image to the Docker Hub using the command 

	docker push srinivassankoji/springboot-docker:1.0
	
********************************************************* 5.Spring Boot with Docker Container (Play Java)   *********************************************************

Note: To customize the name of the jar file we use the command <finalName> in pom.xml

	<finalName>springboot-docker</finalName>
	
Create the Repository in DockerHub

	srinivassankoji/javadeveloper

Then save the image to the DockerHub.
To push the Docker image into the Repository we need to tag the image using the commad 

	docker tag springboot-docker:1.0 srinivassankoji/springboot-docker:1.0
	
Then push the image to the Docker Hub using the command 

	docker push srinivassankoji/springboot-docker:1.0
	
To run the Application using the image which we stored in the DockerHub Repository,First remove the images locally.
Then run the command 

	docker run -d -p 8090:8080 srinivassankoji/springboot-docker:1.0


********************************************************* 6.Spring Boot with Docker Container(Tech Primers)  *********************************************************






********************************************************* 10.Docker Spring Boot MySql(Techno Town Techie) ************************************************************

Pull the MySql image from the Docker Hub.

	docker pull MySql:5.7
		
Create the Controller,Entity and JpaRepository.
Add the Database driver details in the properties file.	

spring:
    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://mysql-container:3306/test?allowPublicKeyRetrieval=true&useSSL=false
        username: testuser
        password: testuser@123
        hikari:
            initialization-fail-timeout: 0        
    jpa:
        database-platform: org.hibernate.dialect.MySQL5Dialect
        generate-ddl: true
        show-sql: true
        hibernate:
            ddl-auto: create

Here localhost should be the My Sql Container Name.
Then Craete the Docker file for the Spring Boot Application.

Note :
Ignore the Junit Test cases by adding the <exclusion> in the pom.xml.

	<plugin>
		    <artifactId>maven-surefire-plugin</artifactId>
		    <version>2.22.1</version>
		    <configuration>
		        <includes>
		            <include>TestFail.java</include>
		        </includes>
		        <testFailureIgnore>true</testFailureIgnore>
		    </configuration>
	</plugin>
	

Build the Docker image for the Spring Boot Application.

	docker build -t springboot-mysql:1.0 .


First Approach (Docker Networking) :
------------------------------------
	
Now create the MySql Container and then attach the MySql Container to the Springboot-mySql Container.

Note :
Without attaching MySql Container to the springboot-mysql Container is it possible to provie communication between the Containers.
Answer is yes because of Docker Networking.
Docker Networking allows us to attach as many Containers as you like.
Docker takes care of Networking aspects.

Create the Network for the communication between MySql and springboot-mysql Container.

	docker network create user-mysql
	
Run the Container for mysql by attaching to the user-mysql network 

	docker run --network user-mysql --name mysql-container -e MYSQL_ROOT_PASSWORD=admin123 -e MYSQL_DATABASE=test -e MYSQL_USER=testuser -e MYSQL_PASSWORD=testuser@123 -d mysql:latest 
	
Run the springboot-mysql Container by adding it to the user-mysql network

	docker run --network user-mysql --name springboot-mysql -p 8601:8600 -d springboot-mysql:1.0
	
Issues:

Here we will get the "public key retrieval is not allowed " while connecting to the My Sql Database.To resolve this add the paramer "allowPublicKeyRetrieval=true" to the url.

	 url: jdbc:mysql://mysql-container:3306/test?allowPublicKeyRetrieval=true&useSSL=false

To check the logs 

	docker logs -f springboot-mysql
	
To show the data in the MySql Container

	docker exec -t -i [ContainerId] /bin/bash
	
To log in to te mysql 

	>mysql -u testuser -p
	
enter the password.

To show the databases in mysql

	show databases;
	
To connect/change to the database 

	>use test;
	
To show the tables 

	>show tables;
	

Second Approach (Docker Linking) :
----------------------------------
Change the my sql Container name

	 url: jdbc:mysql://mysql-container-second:3306/test?allowPublicKeyRetrieval=true&useSSL=false
	 
then build the springboot-mysql application.

		docker build -t springboot-mysql-second:2.0 .

Build the My Sql Container with the environment parameters.

	docker run --name mysql-container-second -e MYSQL_ROOT_PASSWORD=admin123 -e MYSQL_DATABASE=test -e MYSQL_USER=testuser -e MYSQL_PASSWORD=testuser@123 -d mysql:latest

Now create the Container for the Spring Boot Application by manually linking to the My Sql Container(Change the Port No)

	docker run -p 8602:8600 --name springboot-mysql-second --link  mysql-container-second -d springboot-mysql:2.0
	
Hit the briwser with the URL 

	http://localhost:8602/users
	
Now Springboot-mysql-second will be communicating with my sql Container.


Third Approach (Docker Compose) :
---------------------------------
Create the docker-compose.yml file

version: '3'

services :
  mysql-container :
    image : mysql:latest
    environment :
    - MYSQL_ROOT_PASSWORD=admin123 
    - MYSQL_DATABASE=test 
    - MYSQL_USER=testuser 
    - MYSQL_PASSWORD=testuser@123
    
  springboot-mysql :
     image : springboot-mysql:1.0
     ports :
      - 8603:8600
     build:
       context: ./
       dockerfile: Dockerfile
     depends_on:
       - mysql-container
     
Note :
Make sure the images are already present and using docker-compse we create the Containers from those images.

