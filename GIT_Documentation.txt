GIT is a Distributed Version Control System Tool and was developed by Linus Torvards.
VCS(Version Control System) is a software that helps software developers to work together and maintain complete history of their work.
GIT does not allow overwriting each others code.

Types of VCS are
Centralized Version Control System(SVN)
Distributed Version Control System (GIT)

Centralized Version Control System uses a Central Server to Store all the files and enables Team Collabaration.
But the main drawback here is that it is a single point of failure i.e 
If the Central Server fails No one can collabarate and even in the worst case If the proper backup is not taken we will lose the entire history of the project.

Advantages of GIT -8
-------------------
1.Open Source.
2.Fast and Small.
3.Implicit Backup.
4.Security.
5.No Need of Powerful Hardware.
6.Easier Branching.

2.Fast and Small :
Most of the operations are performed locally and it gives a huge benefit interms of speed as it does not rely on the Central Server.
Though GIT mirrors entire Repository,size of the data in the Local System(Client Side) is small.

3.Implicit Backup :
The Chances of loosing data is very rare because of multiple copies of data is present in Local System.
Data Present at Client Side mirrors the remote Repository.

4.Security :
GIT Uses a Common Cryptographic Hash Function Called Secure Hash Function(SHA1) to name and Identify Objects within Database.
It is Impossible to Change File data and Commit Message and Any other Database without Knowing GIT.

5.No Need of Powerful Hardware :
In Centralized Version Control System, The Central Server needs to be powerful enough to Serve the Requets.
In Distributed Version Control System ,Developers dont interact with Server untill and unless they need to pull or push the Changes.
Most of the Operations are performed at Client Side.

6.Easier Branching :
Centralized Version Control System uses a copy mechanism for branching.
If we Create a New Branch,it Copies all the data into the newly created Branch and it is time Consuming.
Deletion and Merging of Branches in Centralized Version Control System is complex and time Consuming.
But Branch Management with GIT is very simple and It takes only few Seconds to create,delete and Merge Branches.

Distributed Version Control System (DVCS) Terminologies :
---------------------------------------------------------
1.Local Repository 
2.Working Directory or Staging Area or Index
3.Blobs
4.Trees
5.Commits
6.Branches
7.Tags
8.Clone
9.Pull
10.Push
11.Head
12.Revision
13.URL

1.Local Repository :
Every Version Control System provides private workspace as a Local Repository.
GIT gives private workspace as a whole repository where user can add,remove,rename files and commit changes.
Developers make changes in their Local Repository and after commit those changes will become part of Working Directory.

2.Working Directory or Staging Area or Index :
Working Directory is the place where all the files are checked out.
In Other CVCS developers generally make modifications and commmit their Changes directly to the remote repository.
But in GIT ,Whenever we Push an operation GIT Looks for the file present in Staging Area 
and only files present in the Staging area are Considered for Push and not all the modified files.

Lets see the basic Workflow of GIT :

  A.modify a file in the Local Repository.
  B.Add the files to the Staging Area i.e After performing ADD and commit Operation.
  C.After push Operation GIT Stores the changes permanently to the GIT Repository.
  
3.Blobs :
BLOB Stands For Binary Large Object.
Each version of a file is represented as a BLOB in GIT .
BLOB Contains the File data but it doesnot contain the MetaDeta about the File.
In GIT Files are not Addressed By Names and are Content Addressed.

4.Trees :
Tree is an Object which represents a Directory.
It holds BLOB as well as other SubDirectories.
A Tree is a Binary File that Stores References to BLOBS.

5.Commits:
Commit holds the Current State of the Repository and considers the commited Object as a HEAD Node of the Linked List.
Every Commited Object has a pointer to the Parent Commit Object.

6.Branches :
Branches are used to create a new line of Developement.
By Default GIT has a Master Branch and which is same as Trunk in SubVersion.
Usually A Branch is created to work on a new Feature and once the feature is Completed It is merged with Master Branch and is deleted.
Every Branch is referenced by HEAD which points to the latest Commit.
When we make a Commit Head is updated with the latest Commit.

7.Tags :
Tag assigns a meaningful name with a Specific Version in the Repository.
Tags are Simmilar to Branches but the difference is that tags are Immutable.
Once Tag is created for a particular commit we cannot modify them.
Usually we create Tag for Production Releases.

8.Clone :
Clone Operation creates the instance of the Repository.
Clone Operation not only checks out the Working Directory but It also Mirrors the complete Repository.
User can perform any operation with this Repository.

9.Pull:
Pull Operation Copies the Changes from Remote Repository Instance to the Local Repository Instance.
Pull Operation is used for Synchronization between Two Repository Instances.
It is Similar to Update Operation in SubVersion.

10.Push :
Push Operation Copies all Changes from Local Repository Instance to Remote Repository Instance.
This is used to Store the Changes permanently in the GIT Repository.
This is same as Commit Operation in SubVersion.

11.HEAD :
Head is a Pointer which always points to the latest Commit in the Branch.
Whenever we make a Commit,Head is updated with the latest Commit.
Heads are stored in .git/refs/heads

12.Revision :
Revision represents the Version of the Source Code and Revision in GIT is represented by Commits.

13.URL:
URL Represnts the Location of the GIT Repository.

GIT LifeCycle  :
----------------
1.Clone the GIT repository as Working Copy.
2.Modify the Working Copy by adding and editing the Files.
3.If Possible we can modify the Working Copy by taking Some Other Developers Code.Then Review the Code.
4.Commit the Code and everything is fine Push the Code to GIT Repository.
5.After Pushing the Code to GIT ,If Somethinng Goes Wrong then Correct the latest Commit and Push the Changes.

