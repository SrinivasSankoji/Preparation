1.Forms										[14-APR-2020]  (Done)
2.Template Driven Forms                     [14-APR-2020]  (Done)
3.Setting Up Project                        [14-APR-2020]  (Done)
4.Adding Form to HTML                       [14-APR-2020]  (Done)
5.Binding Data with ngForm                  [14-APR-2020]  (Done)
6.Binding Data to Model                     [14-APR-2020]  (Done)
7.Tracking State and Validity               [14-APR-2020]  (Done)
8.Validation with Visual Feedback           [15-APR-2020]  (Done)
9.Displaying Error Messages                 [15-APR-2020]  (Done)
10.Select Control validation                [15-APR-2020]  (Done)
11.Form Validation                          [15-APR-2020]  (Done)
12.Submitting Form Data                     [15-APR-2020]  (Done)

13.Express Server to recieve Form Data      [16-APR-2020]  ()
14.Error Handling                           [16-APR-2020]  ()
15.TDF and Reactive Approach                [16-APR-2020]  ()

***********************************************   1.Forms	******************************************************************************************

Forms are vital part of any Business Application.
We use forms to Register,Login,Submit a Request,Place an Order,Schedule an Appointment and perform other Countless Tasks.
While Designing Forms it is Important to create an experience that guides the User Efficiently and Effectively trough out the Workflow.
As a Developer we need to Handle 

Data Binding,
Change Tracking,
Validation,
Visual Feedback,
Error Messages and 
Form Submission.

The Component Template Contains the HTML to Collect the User Data.
The Component Class Handles Data Binding.
The Collected Data is sent to the Server using Service.
To achieve this Angular Provides Two Ways.

1.Template Driven
2.Reactive Forms

In Template Driven Most of the Code is Written in HTML Template where as In Case of Reactive Forms or Model Driven Forms
Most of the Code is written in Component Class.


***********************************************  2.Template Driven Forms	******************************************************************************************

As the name Indicates Most of the Code is written inside HTML Template.
Easy to use and is Similar to Angular JS Forms.
In This Approach we heavily rely on Two Way Data Binding i.e ngModel.
We dont have to keep track of the Input Field values and react to the Change in Input Field Values.
Angular Takes care of this by Using ngModel Directive.
As a Result we have Bulky HTML Code and Minimal Component Code.
In Template Driven Form Approach Angular also Provides ngForm Directive along with ngModel Directive which keeps track the Form and 
Form Elements State and Validity.

Drawback of Template Driven Approach is when it comes to Unit Testing.
Form Validation Logic cannot be Unit Tested.
The Only way to perform and End to End Test is by Using Browser.
Another drawback is in case of Handling Complex Forms.
As we add More and More Validations to a Field then Readablity of the Form Decreases to a Great Extent.
We should go For Template Driven Forms

1.Simple Form with Unit Testing that can be Handled through Browser.
2.For Complex Forms with Complex Validation where Unit Testig is Mandatory Then go For Reactive Forms.

Concepts in Template Driven Form Appraoch are

Genarate the Project
Add Form to the HTML
Binding the Data
Tracking State and Validity
Providing Visual Feedback
Display Error Messages
Submitting the Data to the Server


***********************************************   3.Setting Up Project	*******************************************************************************************

To Check the Version

	ng -v 
	
To Install Angular CLI

	npm install -g @angular/cli@latest
	
To Update the Version of angular CLI

	npm install -g @angular/cli@latest
	
	npm cache verify
	
	npm cache clean
	
	npm install -g @angular/cli@latestx
	
To Generate the Project
	
	ng new TemplateForm
	
To run the Project

	ng serve
	
First Step is to add Bootstrap Styling to our Project.
Bootstrap is a CSS Framework that gives a variety of classes that can be applied to make the HTML better.
To add Bootstrap CSS

https://getbootstrap.com/  --> Click on Get Started -->  and Copy the CSS Path.

Add the Path in index.html at the End of the <HEAD>.


***********************************************  4.Adding Form to HTML	**********************************************************************************************

		<div class="form-group">
           <label>Name</label> 
           <input type="text" class="form-control">
        </div>
        <div class="form-group">
            <label>Email</label> 
            <input type="email" class="form-control">
         </div>
         <div class="form-group">
            <label>Phone</label> 
            <input type="tel" class="form-control">
         </div>
		 
To create a dropdown Create an Array of elements in test.component.ts.

	topics =['Angular','Javascript','Forms'];
	
	 <div class="form-group">
            <select class="custom-select">
                <option selected>Iam Interested In </option>
                <option *ngFor="let topic of topics">{{topic}}</option>
            </select>
         </div>

 <button class="btn btn-primary" type="submit">Submit</button>

***********************************************   5.Binding Data with ngForm	**************************************************************************************

The First Step to work with Anguar Form is to import Forms Modules and add it to the import Array.
In app.module.ts 

	import {FormsModule} from '@angular/forms'
	
Anytime If we use the <Form> ,Angular attaches <ng-form> directive  to <Form> which gives the valuable information about the <form>
It Tells what the values of different form-control are and whether the values are valid or not.
We get the Reference of the whole <form> using Template Reference Variable.
	
	<form #userForm="ngForm">
	
Here ngForm directive exports itself as String ngForm and by assigning it to a Template Reference Variable and we have reference to the directive itself.
ngForm Directive gives us Access to the value of the Form-Control by using value property.

Here Angular does not track the value of Form Control on its own.
we need to tell angular which of the form control has to be tracked. i.e done by using ngModel directive.
Place ngModel directive to each of the Form Control and ngModel works only with name attribute.
In Addition to ngModel,Angular also provides ngModelGroup directive If we would like to group together or creat a subgroup in the Form.
Consider the case of Address and address can contain street,city,state and Postal Code.
We can group all of those into an address object using ngModelGroup directive.
In Template Driven Forms we have 3 directives i.e ngForm,ngModel,ngModelGroup

Here We are binding the data using ngModel directive and we can send the data to the server using userForm.value.
Although it works Fine The better approach is to bind the data to the Model and send the Model to Save.


***********************************************  6.Binding Data to Model	******************************************************************************************

To creat a Model 

	ng g clsss user
	
	export class User 
	{
    constructor(
        public userName:string,
        public email:string,
        public phone:string,
        public topic:string,
        public timePreference:string,
        public subscribe:string
    ){}
	}
	
Next step is to creat an insatnce of the Model in test.component.ts.

	 userModel=new User('Bhaumik','bcs@gmail.com','7718973681','','Morning',true);
	 
After having this data it is Possible to bind the userModel data to the enrollment Form.
Consider the Scenario of editing or updating the data that is already saved.
When we have the requiremnet of form to be prefilled to update with the existing data.
We need to bind the userModel to the Enrollment Form and that can be done by using property binding.

	 {{userModel |json}}
	 

		<div class="form-group">
           <label>Name</label> 
           <input type="text" class="form-control" name="userName" [ngModel]="userModel.userName">
        </div>
		
Here Angular Form Module is now same as User Module.
But when we change the value in the Text Angular Form will get the Update Value where as userModel is not Updating and Still Contains the Old Value.
The Reason is we are using Property Data Binding which is one way Data Binding i.e
Data is flown form the View to the Class but Not from the Class to the View.
When we are working with forms we need to have Two way Data Binding.


***********************************************  7.Tracking State and Validity  	**********************************************************************************

Before Sending the Data to the Server we need to perform Client Side Validation and Provide the Visual Feedback to the User.
Angular helps us to perform the Form Validation by tracking the state of the Form Control by applying Appropriate Classes.
What Class is applied to form control bassed on its state and validity.
At any point of Time Angular applies 3 classes to the Form Control based on its state and Validity.

1.User has visited the Form Control or Not 
when we load the class for the First Time Angular Applies the Class ng-untouched
If we click on the Form Control Either By Switching or Tab Out Angular Applies the Class ng-touched
Here the key point is that class will change only on Blur and we have to navigate away from the Form Control.

2.Form Control Value has Changed or Not
For the First Time Angular Aplies the Class ng-pristine
If the Form Control value has Changed Then Angular Applies the Class ng-dirty

3.Form Control Value is Valid or Not
If the Form Control Value is Valid then Angular applies the Class ng-valid 
or else Applies the Class ng-invalid
For Example If the Input Field Contain a required Attribute It Implies that a Value has to be Entered.
If the Values is Missing ng-invalid is going to be Applied.


	<div class="form-group">
           <label>Name</label> 
           <input type="text" #name class="form-control" name="userName" [(ngModel)]="userModel.userName">
        </div>
	
    {{name.className}}
	
To test the ng-valid we need to add the required attribute to the input Element.
Although These Classes helps us to Provide the Visual Feedback Angular also provides an Alternative.
For each of the Classes Angular Provides its associated Property on ngModel Directive.
The properties are the same but with the removal of ng.

we can acces the properties of the ngModel directive by creating the reference of the ngModel Directive.
#name Template refernec variable points to the Input Element in the DOM.
By assigning a Value of ngModel reference variable to name ,Now name points to the ngModel of this Particular Form Control.

	#name="ngModel"
	
	{{name.untouched}}
	

***********************************************  8.Validation with Visual Feedback   	**************************************************************************

A Good User Experience when filling out forms is to visually indicate to the user,If a Form Field is invalid as and when they enter the Details.
In Angular we apply validation to the Form Fields by applying some of the Classes to Visually indicate the User that the Form is invalid.
There are Two approaches .
We can use own Class with the Necessary Styles that has to be applied to the Form Control or
We can use the Validation Classes that has been provided by CSS Framework.
For invalid state the Class provided by Bootstrap is is-Invalid.
We have to apply the Class Conditionally i.e only when the Form Control is invalid.
The Class provided by the Bootstrap for invalid state is is-Invalid.

	input type="text" #name="ngModel"  required class="form-control is-invalid" name="userName" [(ngModel)]="userModel.userName">    

But it will be applied on the page Load itself.	
we have to make this when the form is invalid.
For that we make use of ngModel properties coupled with class binding.

	[class.is-invalid]="name.is-invalid"
	
	<input type="text" required #name="ngModel" [class.is-invalid]="name.invalid"  class="form-control" name="userName" [(ngModel)]="userModel.userName">

apply the Class is-invalied when the name form control is invalid.

Consider the Case where the Form is Not Prefilled with Data.
In this Case On Page load itself It wiil perform validation on the page Load itself.
In addition to check whether the form controlis invalid we also need to check whether the user has visited the form or not.

	[class.is-invalid]="name.invalid && name.touched"
	
we can also perform the pattern matching validation for the form fields.
we can add any basic regular expression we want to add to and create a pattern that the form field must satisfy.
Consider password must be between 8 to 15 Characters with one Special Character.
Pin Code,Phone Number in Specific format and so on.

We apply the Regular Expression for the Phone Number.
First thing is to get the reference to the ngModel directive.
Then add the Pattern attribute with the Regular Expression.

<input type="tel" #phone="ngModel" pattern="^\d{10}$"  [class.is-invalid]="phone.invalid && phone.touched"
            class="form-control" name="phone" [(ngModel)]="userModel.phone">

However when the from field is invalid we need to display an appropriate Error Message.


***********************************************  9.Displaying Error Messages   	**********************************************************************************

Here we are going to display the Error Messages when the Form Field is invalid.
In the Test.component.html add the small Tag.

	 <small>Name is required</small>
	 
This Message has to be Displayed only when the Form Field is invalid.
Here we can use Either ngIf or Class Binding.
For Class Binding we will use the class d-none which is a Bootstrap Class for setting the display property to None.

	<small [class.d-none]="name.valid || name.untouched">Name is required</small>
	
Do Not Show the Error Message when the Name Form Control is valid or untouched.
To Make the Message appaear like an Error Message we use the Class text-danger

	<small class="text-danger" [class.d-none]="name.valid || name.untouched">Name is required</small>
	
we might getthe scenario where we have more than one validation for the same Field.

	<small class="text-danger" [class.d-none]="phone.valid || phone.untouched">Phone Number is required and Should Have 10 Digits</small>
	
We can also display the Error Messages based on error Properties of the ngModel.
Comment the existing Error Messages.
Add the <div> and this <div> will be conditionally rendered based on whether the phone Number is valid or Not.
Here we use ngIf Directive along with ngModel Properties.

	<div *ngIf="phone.errors && (phone.invalid || phone.touched)">
            <small class="text-danger" *ngIf="phone.errors.required">Phone Number is Required</small>
            <small class="text-danger" *ngIf="phone.errors.pattern">Phone Number Must be 10 Digits</small>
    </div> 


***********************************************  10.Select Control validation  	**********************************************************************************

Here we perform Validation on Select Control Field.
Topic Should be Any other Value except Iam Interested in.

If the User Intercats with Select Control and Leaves the Option then we should provide an Error Message Please Choose the Topic.
Simpleset way to perform select Control Validation is make use of required attribute.
Create a reference of ngModel so that we can make use of ngModel Properties to appply a Class to the Select Element and also display the Error Messages. 

	<small class="text-danger" [class.d-none]="topic.valid || topic.untouched">Please Choose the Topic</small>
	
This works only when the Value is Empty i.e 

	 <option value="">Iam Interested In </option>
	 
If we have the Default Value then the Validation Fails.
Here we need to provide the custom Validation for the Select Control.
we listen to the blur event and change event of the select Control and In the Event Handler we are going to check the value.
If the value is the default value then set an Error Flag to true.
we use this error flag to conditionally apply the Classes.

	(blur)="validateTopic(topic.value)" (change)="validateTopic(topic.value)"
	
passing the Selected value to the events.

	 [class.is-invalid]="topicHasError && topic.touched"
	 
If the topicHasError and is touched then Display the Error Message.

	[class.d-none]="!topicHasError || topic.untouched">
	
If there is No Error and Topic has not Touched then Display the None class to the Error Message.

Finally remove the Required attribute to work with the Functionlaity.

***********************************************  11.Form Validation   	******************************************************************************************

So Far we have seen individual Form Control.
Angular also helps us to do the Form Level Validation.
whenever we use the <form> element in the HTML Angular automatically attaches the ngForm Directive to the Form Tag.
we can get the reference of the ngForm Tag with the Template Reference Variable.
Like wise we have properties on ngModel Directive we have the same properties on ngForm Directive.

	{{userForm.form.valid}}
	
This can be used to disable the Submit Button untill the Form is valid.
To the Button add the disabled Property and bind it to the invalid state of the Form.

	<button [disabled]="userForm.form.invalid" class="btn btn-primary" type="submit">Submit</button>
	
This works fine if we dont have any custom validations that ngForm is not Tracking.
But in our Case we have custom select validation and If we click on submit Button check the value of the Selected Field
and then proceed with submitting the form.
To the Disbaled property of Button add one more condition.

	<button [disabled]="userForm.form.invalid || topicHasError" class="btn btn-primary" type="submit">Submit</button>
	
Button gets disabled when the form is invalid or Topic has Error.

***********************************************  12.Submitting Form Data   	**************************************************************************************

Here we are going to submit the Form data to the Server.
First step is to add the novalidate attribute to the form tag.
This will prevent Browser validation kicking in when we Click on Submit Button.

	<form #userForm="ngForm" novalidate>
	
Next Step is to bind the ngSubmit Event which gets emitted when we click on submit Button.

	 <form #userForm="ngForm" (ngSubmit)="onSubmit()" novalidate>
	 
Now to send the Data to the Service we need to create a Service.

	ng g s enrollment
	
Then import the HttpClient and inject it to the constructor.
we also need to add the HttpClient in the imports Array.
Now we are in a Position to make Http Request.
create a Method in enrollment service that accepts the user and submit the Post Request with url and User.

	 public enroll(user:User)
	{
    this._http.post<any>(this._url,user);
	}

Call the enroll Srevice from the onSubmit() in test.component.ts

	public onSubmit()
	{
    this.enrollmentService.enroll(this.userModel)
    .subscribe(data => console.log('Success!',data),
               error => console.log('Error!',error)
    );
	}


***********************************************  13.Express Server to recieve Form Data   	**********************************************************************

Here we are goint to set up a basic express server that is going to recieve form Data.
Create a Folder named server in the Folder Angular.
Open the Folder server in the command Prompt

	npm init --yes
	npm install --save express body-parser cors
	
Express is a Web Server
Body Parser is a Middleware to handle form Data.
cors is a package to make request across different ports.

Now the Dependencies are installed in the server Folder i.e package.json

	"dependencies": {
    "body-parser": "^1.19.0",
    "cors": "^2.8.5",
    "express": "^4.17.1"
	}
	
Now craete a New File named server.js and within this File begin with the packages that we have installed.

	const express = require('express');
	const bodyParser = require('body-parser');
	const cors = require('cors');
	
Create a Port that the express server will run on.

	const PORT=3000;
	
create an instance of an express 

	const app=express();
	
Specify the body parser to handle json Data

	app.use(bodyParser.json);
	
Also specify the cors package
	
	app.use(cors());

Now add the Code to Test a Get Request

	app.get('/',function(req,res)
	{
    res.send('Hello from Server');
	});
	
Finally we listen to the Request on the Specified Port.

	app.listen(PORT,function()
	{
    console.log("Server Running on Local Host : "+PORT);
	});
	
Now the basic Express Server is Ready.






***********************************************  14.Error Handling  	******************************************************************************************

When we submit the Form and if some thing goes wrong and the Server will respond with an Error.
Here we need to handle the errors after the Form Submission.

In the Enrollment Service we will be catching the error from the Server and throwing it to the subscribed Component.
we need the help of rx js.


***********************************************  15.TDF and Reactive Approach   	******************************************************************************

In case of Template Driven Form approach ngForm Directive gives the entire information about the enrollment Form.
To the ngSubmit event pass the reference variabe of the ngForm as parameter.

	 <form #userForm="ngForm" (ngSubmit)="onSubmit(userForm)" novalidate>
	 
	public onSubmit(userForm)
	{
    console.log(userForm);
	}
	
If we see the log in the console an object ngForm is Displayed.
we see lot of properties of ngForm.
value property contains the values of the different form fields.








