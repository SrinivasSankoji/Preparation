1.Why Reactive Programming Part One						[08-JAN-2020]  (Done)
2.Why Reactive Programming Part Two						[08-JAN-2020]  (Done)
3.What is Reactive Programming							[08-JAN-2020]  (Done)
4.Reactive Stream Specification							[15-JAN-2020]  (Done)
5.Reactive Libraries									[15-JAN-2020]  (Done)
6.Project Reactor										[15-JAN-2020]  (Done)
7.Reactor Types 										[15-JAN-2020]  (Done)
8.Project Setup											[15-JAN-2020]  (Done)
9.Flux How it Works										[15-JAN-2020]  (Done)
10.Flux Junit											[15-JAN-2020]  (Done)
11.Mono	Junit											[15-JAN-2020]  (Done)
12.Spring Boot 2										[23-JAN-2020]  (Done)
13.Non Blocking API Flux								[23-JAN-2020]  (Done)
14.Non Blocking API Mono								[23-JAN-2020]  (Done)
15.Functional Web										[28-JAN-2020]  (Done)
16.Handler and Routines									[28-JAN-2020]  (Done)

17.Test Reactive API Using WebTest Client				[28-JAN-2020]  ()
18.Infinite Non Blocking WebTest Client					[28-JAN-2020]  ()
19.Junit For Functional EndPoint using WebTestClient	[28-JAN-2020]  ()
20.What is Spring Web Flux and When to Use It			[28-JAN-2020]  (Done)


Examples :
----------
21.Create non-blocking REST API with Spring Web flux
22.

Notes :
-------
Configuration --> GetConnection --> 


**************************************************** 1.Why Reactive Programming Part One : ****************************************************

In The Past we Build Monolith Applications and it runs on Application Server.
This Model does not Support Distributed System at All.
Today We Build Micro Services using the Cloud InfraStructure and it Supports the Distributed System.
The Application we build is spitted into Micro Applications and Interact with Each Other For Business Needs.

The Expectations of The Application Now a Days are 
1.Scale Based on Load
If the Number of Users are Increased than the Expected Value,Then The Application Should Scale its Resources to Handle the Load
and there should not be any downtime.
2.Use the Resources Efficiently
When we make a call to the Database or an External API,we have to wait for the Response.
Waiting For some thing is not an effective Resource Utilization.
3.Latency 
Response Time Should be Fast to Meet The User Requirement.

In Case of Spring MVC or any Web Application,Request Comes to the Servlet Container and For Each HTTP Request it Creates a Thread.
This Model is called Thread Per Request Model. 
Here The Back End can be an External API ,Database or Can be Both.

Handling Concurrent Requests :
------------------------------
In Case of Thread Per Request Model,Threads Can be Extended to a Value of N(200 For Tomcat)
Thread Pool Size Defines the Number of Concurrent Users can access at any given point of Time.
We Can increase or decrease the Thread Pool Size by Using the Property in application.properties File
server.tomcat.max-threads=300

Increase in Thread Pool Size is not an Ideal Solution.
Each Thread Takes Some Memory.
Common Stack Size is 1 MB.
Higher the Thread Pool Size Higher the Memory Consumption.
If we have a Larger Thread Pool,Leaves very Less memory for the Application Processing which 
eventually means The Application will perform very Poor.

There are Many ways to Handle the Load of the Application.One of them is Horizontal Scaling i.e
Spin Up More Instances of the Application based on Load.
If The Load Balancer Expects 3 Times More than the expected Value,Then It Spin Ups the Application 3 Times.
This Solution can be Achieved in Kubernetes or Some Container Orchestration.
Spinning Up More Instances of the Application Leads to Increase in Cost of The Application.
Most of the Cases we have a Limitation on Handling Many Concurrent Users.
Ideal Solution is to Move away from Thread Per Request Model.

**************************************************** Why Reactive Programming Part Two ****************************************************

In Traditional API,We Write The Code in Imperative Style.
Execution goes from Top Down Approach.
Imperative Style is Synchronous and Blocking.
After We Make the Call to the database,It Goes into Blocking State and we have to wait for the Response.
Imperative Style of Coding Leads to Inefficient use of Resources.

We Need to Make These Calls Asynchronous and in Java we have two Options.

Callbacks  i.e Back Pressure using Non Blocking Client and Drivers.
Futures   i.e submit the Task in ExecutorService using Callable Interface.

In case of Future It is Hard to Compose Multiple Asynchronous Operations.
Another Option to achieve Asynchronous Operations is Completable Future.

If we get the Huge Number of Records In Traditional API,then there is delay in Response.
There is No Control on Result from the Data.
Back Pressure Support Can be Achieved by Using Reactive API.

Better API Design is :
Asynchronous and Non Blocking
Move Away from thread Per Request Model
Use Fewer Threads
Back Pressure Compatibility

**************************************************** 3.What is Reactive Programming ****************************************************

New Programming Paradigm
Asynchronous and Non Blocking
Data is Flown in the form of Event/Message Driven Stream
Functional Programming
Supports Back Pressure on Event Driven Data Streams

In Case of Reactive Programming Data is Flown as an Event or Message for every Result from a DataSource.
Here DataSource Can be :
Database
External Service
File etc

Once all the Data is event out to the Caller Then We are Going to receive the Completion Event.
If there is an Error while Receiving the Data we get Error Event.

Scenarios In DataFlow from Database :
1.Invokes the Database and the Result is Flown as Stream and Once Complete Data is Sent it Will Send OnComplete Event.
2.In case of Any Error While Reading the Data form Database,Here It Will Send the Error Event and Handle this Error Event.
3.In case of Empty Result It Will Send the OnComplete Event.
4.In Case of Save,If it is Successful It Will Send the OnComplete Event and in Case Of Failure It Will Send the Error Event.

Three Things to be Considered in Reactive Programming are
1.OnNext(Item)
2.OnComplete()
3.OnError()


****************************************************  4.Reactive Stream Specification ****************************************************

Reactive Stream Specification is Nothing but Rules for a Reactive Stream.
Specification is created by Pivotal,Netflix,LghtBend,twitter etc.
Reactive Specification Defines 4 Interfaces and all of these Interfaces Communicate with Each Other for the Whole Stream to Flow.

1.Publisher
2.Subscriber
3.Subscription
4.Processor

1.Publisher :
-------------
Publisher is the Data Producer or Data Emitter.For Example Database or Any File System.
This Interface Contains One Method that Accepts the Subscriber.

		public interface Publisher<T>
		{
			public void subscribe(Subscriber<? super T> subscriber);
		}

By Making this call Subscriber subscribes the Publisher.
Here Subscriber is Synonymous to Consumer.
Publisher is Synonymous to Producer.

2.Subscriber :
--------------
Subscriber Reads the Data From the Publisher and is Synonymous to Consumer.
This Interface Contains 4 Methods. 


		public interface Subscriber<T>
		{
			public void onSubscribe(Subscription subscription);
			public void onNext(T t);
			public void onError(Throwable t);
			public void onComplete();
		}

OnNext() is nothing but the Data stream.
OnComplete() is Signal for No More Data.
OnError() is a Signal that Error has Occurred.


3.Subscription :
----------------
This Interface defines two Methods.

		public interface Subscription
		{
			public void request(long n);
			public void cancel();
		}
		
4.Processor  :
--------------
This Interface is a Combination of Both Publisher and Subscriber and it Does not have any Methods.
From The Above 3 Interfaces Flow will be like below :

Step 1 : Subscriber invokes the subscribe() of the Publisher by Passing the Instance of the Subscriber as an Input.
Step 2 : Publisher Sends the Subscription Object to the Subscriber Saying that Subscription has been Done.
Step 3 :
Subscription interface has two Methods  request() and cancel().
By Default request() Requests for all the Data from the Publisher.
Consider Publisher is the Database and It is Going to return 100 Records.
In this Case there will be 100 onNext() Events with each Representing a Row.
Once all the Events are Done,It will Call the OnComplete Event and Send to the Subscriber.
There is an Option for the Subscriber to provide a Number to the Subscriber asking for the Specific Number of Data.
request(number) and this Scenario is Called Back Pressure.
Subscriber has a Control on how much Data It Needs From the Publisher.
If there is any Error in the Work flow we will Receive an OnError Event.
Step 4: 
Subscriber calls the Publisher using the subscribe() of the Publisher.
Publisher then Sends the Subscription object to the Subscriber Saying that Subscription has been Done.
Here Subscription Interface has two Methods i.e request() and cancel()
Publisher uses the request() to Connect to the Subscriber.
Subscriber has an Option to call the cancel() in the Subscription that is Received form the Publisher.
Once the cancel() has been Called,Then Publisher doesn't Send any Event to the Subscriber.

  
**************************************************** 5.Reactive Libraries **************************************************** 

Reactive Libraries is Nothing but an Implementation of Reactive Stream Specification i.e Implementation of Below Interfaces.

Publisher
Subscriber
Subscription
Processor

Different Kind of Reactive Libraries are :
Rx Java
Reactor or Project Reactor
Flow Class in JDK 9

Here We are Going to Use Reactor or Project Reactor and is Maintained by Pivotal.
Recommended Library to Work with Spring Boot and Comes in Built with Spring Boot.
  
**************************************************** 6.Project Reactor	****************************************************

Different Modules that are Available in the Project Reactor are 
Reactor Core 
Reactor Test
Reactor Netty and so on.

These 3 Modules are Necessary to Built Non Blocking Reactive Restful API.


****************************************************  7.Reactor Types  ****************************************************

Reactor Core is a Core Library for Project Reactor
It has an Implementation of Reactive Stream Specification.
Supported Version is Java 8
Flux and Mono are the Two Classes which are the Implementation of Reactive Stream Specification.
Flux and Mono are the Reactor Types for the Project Reactor.
Flux Represents 0 to N Elements.
Mono Represents 0 to 1 Element.


Flux :
------
Consider the Scenario where we have Stream of Integers i.e from 1 t 100.
Here the Data is Flown from Left to Right 1,2,3,4 ..... 100.
When We Use Flux to read the Data,It Streams the Data one by one.
Stream the Number 1 and Pass it to the Operation.
Here Operation is a kind of Transformation on Data.
and Transformed Data is Sent as a Response. 
Streaming is done for all the Elements and Once it is Done It Sends OnComplete Event.
While Streaming the Data ,If there is any Error,It Sends OnError Event.

Example :
---------
Flux.just("Spring","Spring Boot","Reactive Spring Boot").map(s->s.concat("flux")).subscribe(System.out::println);
In Practical We Get the Data form Database.
Here all the Elements are Sent one by one.

				https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html

Will Contains all the Methods Defined by the Flux.


Mono :
------
Mono Represents 0 to 1 Element.
When ever we Get Only One Object as Response then we use Mono.

Example :
---------
 Mono.just("Spring Boot").map(s -> s.concat("flux")).subscribe(System.out::println);

**************************************************** 8.Project Setup And 9.Flux How it Works  ****************************************************

Use the Dependencies Reactive Web,Embedded Mongo DB and Reactive Mongo Database.
Write the Test Case to Implement Flux.

		Flux<String> stringFlux=Flux.just("Spring","Spring Boot","MicroServices");

The only way to access the elements of the Flux is by Subscribing.
when we subscribe the Flux i.e actually attaching the Subscriber to read the Elements inside the Publisher and Publisher Starts emitting all the 
Elements of the Flux.
Subscriber Requests the Publisher for the Unbounded Value i.e Max Value of the Publisher.

		stringFlux.log().subscribe(System.out::println);

In Case of Error subscribe() has an overload Version that accepts the Exception.
In this case add the Error Method with Flux.
Once the Error has occurred,Flux does not Emmit the Elements to the Subscriber.

		Flux<String> stringFlux=Flux.just("Spring","Spring Boot","MicroServices")
				.concatWith(Flux.error(new RuntimeException("Error Occurred")));
				
		stringFlux.log().subscribe(System.out::println,(e)-> System.err.println(e));


In Case of Success subscribe() has an overload Version that accepts the OnComplete Event.

		stringFlux.log().subscribe(System.out::println,(e)-> System.err.println(e),(e)-> System.out.println("Completed"));

**************************************************** 10.Flux Junit	****************************************************

To Test the Elements inside the Flux and the order in which the Elements are subscribing to the Subscriber 
we use the Project Reactor Test.
Reactor Test has a Class StepVerifier.
Create an Instance of StepVerifier by passing the Flux as Parameter i.e StepVerifier.create(stringFlux);

			Flux<String> stringFlux = Flux.just("Spring", "Spring Boot", "MicroServices").log();
			StepVerifier.create(stringFlux)
			.expectNext("Spring")
			.expectNext("Spring Boot")
			.expectNext("MicroServices")
			.verifyComplete();
			
Since onComplete Event will be the Last Event we need to use verifyComplete(). 
If we Change the Order of expectNext() then the Test Case Fails.
Flux does not pass the Elements until we call verifyComplete().
When we call the verifyComplete() on StepVerifier then the Data Flows From Flux to the Subscriber.
verifyComplete() works similar to subscribe()


		Flux<String> stringFlux = Flux.just("Spring", "Spring Boot", "MicroServices")
		.concatWith(Flux.error(new RuntimeException("Error Occured")))
		.log();
		
		StepVerifier.create(stringFlux)
		.expectNext("Spring")
		.expectNext("Spring Boot")
		.expectNext("MicroServices")
		.expectError(RuntimeException.class)
		.verify();

Since onError Event will be the Last Event we need to use verify()
There will be an overloaded version of expectError().

If we want to Validate the Number of Elements that the Flux Emmit we use expectNextCount(number)

		Flux<String> stringFlux = Flux.just("Spring", "Spring Boot", "MicroServices")
		.log();
		
		StepVerifier.create(stringFlux)
		.expectNextCount(3)
		.verifyComplete();

**************************************************** 11.Mono Junit	****************************************************

		Mono<String> stringMono=Mono.just("Spring");
		StepVerifier.create(stringMono.log())
		.expectNext("Spring")
		.verifyComplete();
		
		StepVerifier.create(Mono.error(new RuntimeException("Exception Occurred")).log())
		.expectError(RuntimeException.class)
		.verify();

*********************************** 12.Spring Boot 2 -- 13.Non Blocking API Flux -- 16.Non Blocking API Mono ************

In Spring Boot 2.0 We Have Reactive Stack and Servlet Stack.
Spring Web Flux is a Non Blocking Web .
Non Blocking Web Refers to the Non Blocking Way of Communication Over the Network.
To Facilitating this we Need Non Blocking Servers Such as Netty ,Servlet 3.1 or Above Containers.

In Reactive Stack There is No Place For Servlet Because We are Going to Have Non Blocking Interactions over the Network.
We are Going to Use Reactive Stream Adapters.
Even the Security Layer Should be Reactive.
We Have Spring Web Flux which has Annotated Controller and the Functional Web End Points to Handle the HTTP Requests.
In Order to Interact with Databases in a Non Blocking Way we Have Dedicated Reactive Modules For Mongo,Cassandra,Redis and Couch base.


		https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux
		
We Can Build Non Blocking API using Spring WebFlux in two ways i.e by Using Rest Controller and Functional Web.

	@GetMapping("/returnFlux")
	public Flux<IntStream> returnFlux()
	{
		return Flux.just(IntStream.range(1, 100));
	}
	
Spring Web Flux Internally Uses Netty as Default Server to achieve Non Blocking Communication.
In Order to Differentiate the Response We need Delay for Some Seconds.
Here Response will be Returned as J son and Browser will wait Until all the Elements are Returned and Displays the Result.
By Default Browser is a Blocking Client and it does not care about Flux or Mono.
To get the Data as Stream we use MediaType.APPLICATION_STREAM_JSON_VALUE

	@GetMapping(value = "/returnFluxStream",produces = MediaType.APPLICATION_STREAM_JSON_VALUE)
	public Flux<Integer> returnFluxStream()
	{
		return Flux.just(1,2,3,4)
				.delayElements(Duration.ofSeconds(3))
				.log();
	}

****************************************************  15.Functional Web & 16.Handler and Routines **************************************************** 	

The Idea behind the Functional Web is Functions to handle the Incoming Request and Response.
Functional Web Consists of Two Modules i.e Router Function and Handler Function.

Client Sent the Request to the Server and Server Forwards the Request to the Router Function.
If the Router Function has an Appropriate Mapping then it Forwards the Request to the Handler Function.
Handler Function is the one which performs Complete Processing i.e  Reading the Request,
Processing the Request and Sending the Response back to the Server.

Router Function is used to Route the Incoming Request.
Router Function is Similar to @RequestMapping Annotation.

Handler Function Handles the Request and Response.
Handler Function is Similar to the Body of @RequestMapping Annotation.
Handler Function has two New Classes i.e ServerRequest and ServerResponse

ServerRequest represents the HttpRequest and the ServerResponse represents the HTTPResponse.

Create the HandlerController Class and Annotate with @Component.
Here We are not Using Traditional @RestController
	
		public Mono<ServerResponse> handlerFlux(ServerRequest serverRequest)
		{
		return ServerResponse.OK().body(Flux.just(1,2,3,4).log(),Integer.class);
		}


Create a RouterConfiguration Class and Annotate with @Configuration so that it behaves as a Router Configuration.
Define a Bean that Accepts the HandlerFicntion and Returns the RouterFunction with ServerResponse as Type.


		@Bean
		public RouterFunction<ServerResponse> route(HandlerController handlerController)
		{
			return RouterFunctions
					.route(RequestPredicates.GET("/functional/handlerFlux")
					.and(RequestPredicates.accept(MediaType.APPLICATION_JSON)), handlerController::handlerFlux);
		}


****************************************************  17.Test Reactive API Using WebTest Client *******************************************************


**************************************************** 18.Infinite Non Blocking WebTest Client	*******************************************************


****************************************************  19.Junit For Functional EndPoint using WebTestClient ********************************************



**************************************************** 20.What is Spring Web Flux and When to Use It ****************************************************

The Below Code is Compared in two Perspective i.e Thread and Code Perspective.

		@RestController
		public Class MyRestController 
		{
			@Autowired
			private UserRepository userRepository;
			
			@getMapping("/get/user/{id}")
			public User getUser(@PathVariable String id)
			{
				return userRepository.findByUser(id);
			}
		}
		
Thread Perspective :
--------------------
Here Database call is an I/O Operation between our Web Server and Database.
During this Period Thread goes into Waiting State until Database Driver Fetches the Data from Database and return the data back to the Thread.
Similar is the Process for Another Request.
Consider there are Concurrent Requests for the Application and if we are Using Server Like Tomcat there would be a Thread Pool Size of 200.
After Some Period of Time there wont be any Threads to Handle the Request.

Ideal Solution is Whenever Any Request is Sent to the Server,
Thread is assigned to the Request,performs some Processing and 
Instead of Waiting for the I/O Operation to Complete and will ask the Database Driver saying that will not Wait for the Database Operation 
to be Completed and Instead what i Want to do is Call me Once the Data is Ready.
Here Thread goes Back and Start Serving the Next Request i.e Thread is Immediately Freed.

Once the Database Driver is Ready and Fetches the Data from the Database it will make the Call Back.
Here Same Thread or Another Thread which is Free will Send the Data Back to the User as a Response.
This is the Mechanism where we are going to use Thread into Waiting State or Blocking State.


Here Thread Calling to a Database is an Event and this Mechanism is Called Event Based Mechanism.
Thread Sent an Event to a Database Driver to Provide the Data and Database driver sent an Event Back saying that Data is Ready.

In Event Based Mechanism None of the Threads Goes into Blocking State.
More Efficient of CPU and can Handle More Number of Concurrent Requests.

In Case of Traditional Web Application If we have a Quad Core Processor,
Each request is Treated as One Thread and once the processing is Done 
and Response is returned back to the User then Thread will be Removed form the Thread Pool. 
In case if the Request is taking Time,Thread goes into Waiting State and at the Same Time Operating System Scheduler Schedules Another Thread on it.
Here Switching of Threads is done by Thread Scheduler.

In case of Event Loop Mechanism and If we have 4 Cores where each thread Running on One Core all the Time and No Thread is Blocking.
Her it use Events and the Underlying Framework has to deal with which I/O has to Sent to which Request/User adds a Layer of Complexity to our Framework.
This Scales More Concurrent Requests and Less Number of Threads.
Here the Complexity is Handled by Spring Web Flux.

Spring Web Flux is a Project which Handles End to End Reactive or Event Loop Based Mechanism so that we Have Less Number of Threads,Higher CPU Usage and
Higher Scalability.

Spring Web Flux Achieves this by Using 

Servlet 3.0 and 3.1
Java NIO
MongoDB,Cassandra,Redis and CouchBase.(Repositories for the Database Drivers)

It is Important that During the Data Flow Everything is Non Blocking.
To Enable this Non Blocking for the Entire Flow,Project Spring Web Flux takes care of Every thing that is Non Blocking about Servlet.
Spring Team also Implemented Some Reactive Repositories for Back End for the Entire Flow to be Non Blocking.

Code Perspective :
------------------
	
	userRepository.findByUser(id);
	
The Above Code is A Blocking Call because we are Waiting for the User to Retrieve from the Database.
For this to be Non Blocking we May Change the Return Type to Future<User>.
In this case Also if the Data is Not Present then future.get() will also goes into Blocking State.
Better Option is to Use CompletableFuture.
CompletableFuture in Java 8 allows us to Use Truly Asynchronous Operations and use thenApply()

In Spring WebFlux Similar to Completable Future is Flux and Mono.
This Type of Feature Cab be used as a Live Source of Data.
 
The Other Components of Spring Web Flux are 
@Controller
Functional API
Combinators
WebClient
BackPressure
Schedulers

We Can Use Spring WebFlux when we want to Achieve
Scalability
Efficient CPU Utilization
Streaming Use cases
Back Pressure

To Achieve Spring Web Flux
Different Programming Model
End to End Reactive Required
Not Too Useful for CPU Bound Flows
Hard to Debug
Hard to Write Test Case

There will be a Different Log Mechanism For Event Based Architecture.


******************************************************************************************************************************************************









