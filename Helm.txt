1.What is Helm in Kubernetes 						(Thetips4you)     		[18-JUL-2024]  (Done)
2.Install Helm                                      (Thetips4you)     		[15-JUL-2024]  (Done)
3.App Deployment in Kubernets using Helm            (Thetips4you)     		[15-JUL-2024]  (InProgress)
4.Helm introduction 								(ChatGPT)     		    [06-SEP-2024]  (Done)
5.Kubernetes Applications without Helm				(ChatGPT)     		    [06-SEP-2024]  (Done)
6.Kubernetes Applications with Helm					(ChatGPT)     		    [06-SEP-2024]  (Done)


################################################### 1.What is Helm in Kubernetes (Thetips4you)  ###################################################

Helm is a package manager for Kubernetes which simplifies the deployment and management of applications. 
If we want to deploy an application in Kubernetes, we can package it as a Helm chart and then install it in a Kubernetes cluster. 
Helm helps in streamline the installation, upgrade, and rollback of Kubernetes applications by using a packaging format called Charts.
Chart is nothing but a bundle of pre-configured Kubernetes resources. 
A chart defines all the components of the application, including deployments, services, config maps and more.
Helm makes easy to manage complex Kubernetes applications in a standardized and reusable way.

Consider the scenario where we deploy single Application in Kubernetes.
To deploy an Application we need multipe configuration files.
Deployment manifest file,Secrets,ConfigMaps,Service manifest file etc.

We have the different configuration files for different Applications and package them into Chart called Helm Charts.
Now all the Configuration files are present in one Helm Chart and once we run the Helm Chart it will create the Application.
Next if we want to update the configuration,install the new version of the configuration and run the Helm Chart.

Helm Chart is a collection of files that describe a related set of Kubernetes resources.
Here resources can be deployment,services,configmaps,secret configuration file etc.
Helm Charts are simply Kubernetes manifest files that are combined into a single package that can be advertised to the Kubernetes Cluster.

A Single Helm Chart can be used to deploy a Simple Application like nginx pod.
A Single Helm Chart can also be used to deploy a Complex App like Full Web Application with HTTP Servers,Databases etc.
Helm Chart helps us to define,install and upgrade the most complex Kubernetes Application.

Helm Chart Structure :
----------------------
Chart Name

	-- chart.yml
	-- values.yml
	-- charts
	-- templates
	
chart.yml contains the meta information about the chart like name of the Application,version number etc.

values.yml contains the values for the Template files.
For example in the Template we mention the Deployment Name,Container Name, Pod Name etc.
The problem here is we cannot keep update these names in every Configuration file.

Charts :
If the Charts dependson another Charts then we need to mention the Chart information here.

Templates :
Template is the place where we put the actual manifest files that we want to deploy as part of Helm Chart.

Helm Commands :
---------------
Helm install   - To install an existing Chart
helm search    - To search for the Chart in the Repository
Helm List      - To view the list of all deployed resources
Helm upgrade   - To upgrade the releases with the new versions
Helm delete    - To delete the deployed resources


###################################################  2.Install Helm (Thetips4you) ################################################### 

Step 1 :
--------
To download the helm 

	https://helm.sh/docs/intro/install/  --> Download your desired version
	
Step 2 :
--------
To set up the Helm 

	https://phoenixnap.com/kb/install-helm
	
Download and Extract windows-amd64 -- set the path to the System Environment Variable.

Step 3 :
--------
Run the Command helm
It will show the messge "The Kubernetes package manager".

################################################### 3.App Deployment in Kubernets using Helm (Thetips4you) ###########################

Step 1 :
--------

To login to the hlem repository

	helm registry login https://artifacthub.io/
	
Enter the Username and password.

Step 2 :
--------
To search for the helm chart in the Artifact hub

	helm search hun nginx

Step 3 :
--------
To install the wordpress --> Navigate to Helm Repository and search for Wordpress.

	https://artifacthub.io/packages/helm/bitnami/wordpress
	
Copy the command to install the WordPress

	helm install wordpress oci://registry-1.docker.io/bitnamicharts/wordpress
	
If we run the below command, will show 2 pods
	
	kubectl get pods
	kubectl get deployment
	kubectl get service
	
To see the History of the helm
	
	helm history my-release
	
When we run the command helm install,it will create the revision for that helm.
Later if we update any of the configuration,it will update the revision number.
If we want to access the wordpress using browser

	minikube service my-release-wordpress
	
To update the Helm Chart

	helm upgrade my-releae --set service.type=clusterIp bitnami/wordpress
	
################################################### 4.Helm with Kubernetes Application (ChatGPT) ###################################################

Helm simplifies Kubernetes application management by providing a way to define, install, and upgrade even the most complex Kubernetes applications. 
It does this by using Helm Charts, which are packages of pre-configured Kubernetes resources.

Below ate the key ways Helm Simplifies Kubernetes Applications.

Templating : 
Helm allows you to define reusable templates for Kubernetes manifests (YAML files). 
This reduces duplication and simplifies managing different environments (e.g., dev, staging, prod) through a single chart.

Versioning and Rollbacks: 
Helm charts can be versioned and provide a built-in mechanism for upgrading and rolling back releases. 
This makes it easy to deploy new versions and revert to previous versions if something goes wrong.

Release Management : 
Helm manages "releases," which are instances of a chart running in a Kubernetes cluster. 
Each release has a unique version and history, making it simple to track and manage different instances of an application.

Chart Repository : 
Helm allows you to store and distribute charts via a chart repository, enabling easy sharing and deployment of Kubernetes applications across teams.

################################################### 5.Kubernetes Introduction (ChatGPT) ###################################################

Deploying and managing a Kubernetes application without Helm means manually handling the creation, modification, and updating of each Kubernetes resource 
For example Deployments, Services, ConfigMaps, Secrets. 
While possible, it adds complexity and requires more manual effort, especially as the application grows. 
Let’s break down the difference using the same school application use case, and explore how Kubernetes management changes without Helm.

Challenges of Managing Kubernetes Applications Without Helm.

Manual Creation and Management of YAML Files: 
Without Helm, you need to manually create YAML files for each Kubernetes resource. 
For a microservice-based application like the school app (with services like student-service, teacher-service, and attendance-service), 
each service will require individual YAML files for

Deployment
Service
ConfigMap (for environment variables)
Secret (for sensitive information like passwords)
PersistentVolumeClaim (for storage)
Ingress (for routing traffic)
For an environment with multiple services, this results in a large number of YAML files that you have to maintain separately.

Environment-Specific Customization : 
When deploying to different environments (e.g., dev, staging, production), you need to manage different configurations. 
Without Helm, you have to duplicate YAML files for each environment and manually modify the required fields (like resource limits, image tags, or replicas). 
This introduces a lot of boilerplate and increases the likelihood of human error when managing configurations across environments.

Lack of Templating : Without Helm’s templating system, you don't have an easy way to reuse parts of your Kubernetes configurations across different services. 
For example, if you need to set common labels, annotations, or environment variables across microservices.
you’ll have to define these in each YAML file manually, increasing maintenance overhead.

Upgrade and Rollback Complexity : Managing upgrades or rollbacks without Helm is cumbersome. 
You would have to manually edit the YAML files, apply changes via kubectl apply, and track the versions of those changes manually. 
If something goes wrong, rolling back to a previous configuration is not as seamless as with Helm (which allows version tracking and rollback in one command).

Managing Dependencies Manually : In Kubernetes, your school application may rely on other components like databases (MySQL or PostgreSQL) or ingress controllers (NGINX).
 Without Helm, you need to manage the lifecycle of these dependencies yourself. 
 For example, deploying a MySQL database requires manually creating its Deployment, Service, PersistentVolume, and ConfigMap. Handling dependencies becomes complex, especially if multiple components need to be coordinated.

No Versioning for Releases : Kubernetes does not natively provide the concept of releases like Helm does.
This means you need to manually track and manage the versions of different deployments. 
If you deploy an updated version of a microservice and need to roll back later, there’s no built-in mechanism to easily revert to the previous version of that deployment.

What Managing the Same School Application Looks Like Without Helm:
1. For Each Microservice:
Student Service:
Deployment YAML
Service YAML
ConfigMap YAML
Secret YAML
Ingress YAML
The same pattern is repeated for teacher-service, attendance-service, etc. 
If the application grows to include more microservices, each one will require similar sets of YAML files. 
This leads to a lot of redundancy and makes it harder to scale and maintain.

2. Handling Environment Variables:
Instead of using templating, you might need to create separate sets of YAML files for dev, staging, and production environments. For example:

student-service-dev.yaml
student-service-prod.yaml
Any change to configuration across environments (such as updating a database URL or image tag) needs to be manually applied to each set of files.

3. Upgrading and Rolling Back:
To upgrade attendance-service to a new version, you would need to:

Manually update the container image tag in the Deployment YAML.
Apply the updated YAML using kubectl apply.
If the upgrade fails, reverting to the previous version requires manually modifying the YAML again and reapplying it, which introduces more overhead and risk.

4. Dependency Management:
Without Helm, if your application depends on a MySQL database, you need to:

Create YAML files for the MySQL Deployment, Service, PersistentVolume, and ConfigMap.
Apply them manually using kubectl.
Coordinating upgrades between the database and your microservices becomes difficult, especially if both need to be updated together.

	
################################################### 6.Kubernetes Applications with Helm	(ChatGPT) ###################################################

Suppose you are developing a school application using a Kubernetes-based microservices architecture. 
This application consists of various services like student-service, teacher-service, attendance-service, and each of these services has its own database and backend logic.

Here’s how Helm simplifies this scenario:

Helm Chart for the School Application:  You can create a single Helm chart that describes the Kubernetes resources needed for the entire application. 
This includes the Deployment, Service, ConfigMaps, Secrets, and Ingress for each microservice (e.g., student-service, teacher-service).

Environment Management : For different environments, like development and production, you can use Helm’s templating engine to customize parameters 
(e.g., different resource limits or image tags) without having to maintain separate Kubernetes YAML files. 
Helm allows you to define different values.yaml files for each environment.

Easily Managing Updates: If you need to update the attendance-service (for example, adding a new feature), you just need to update its part of the Helm chart. 
Helm will handle the upgrade process, ensuring the new version is deployed seamlessly. If something breaks, 
you can easily roll back to a previous version using a single command (helm rollback).

Scaling the Application: Suppose there’s an increase in traffic during exam periods, and you need to scale the student-service. 
Helm allows you to update the service’s resource requirements (e.g., CPU and memory limits) and redeploy the changes to Kubernetes efficiently.

Managing Dependencies: If your application depends on other charts (e.g., a database like MySQL or an Ingress controller), 
Helm allows you to define these as dependencies within your main chart. It will automatically manage and install these dependencies when deploying the application.

Overall, Helm abstracts much of the complexity of Kubernetes by packaging and templating your resources, 
managing upgrades and rollbacks, and streamlining environment customization. 
This is particularly useful for complex applications in environments like the one you are planning to develop, which involve numerous services and dependencies.


  school-app/
  ├── charts/               		  # For any subcharts (dependencies)
  ├── templates/            		  # Kubernetes YAML templates for all services
  │   ├── _helpers.tpl      		  # Template helper functions (like labels, annotations)
  │   ├── student-deployment.yaml     # Deployment for student service
  │   ├── teacher-deployment.yaml     # Deployment for teacher service
  │   ├── attendance-deployment.yaml  # Deployment for attendance service
  │   ├── service.yaml      		  # Generic Service template for all services
  │   ├── configmap.yaml    		  # Generic ConfigMap for all services
  │   ├── secret.yaml                 # Generic Secret template for sensitive information
  │   ├── ingress.yaml      		  # Ingress for routing external traffic
  ├── values.yaml           		  # Default values for all services
  ├── values-dev.yaml       		  # Dev-specific values
  ├── values-prod.yaml      		  # Prod-specific values
  ├── Chart.yaml            		  # Chart metadata (name, version, description)
  ├── requirements.yaml     		  # Define dependencies (e.g., MySQL, Redis)




	
	
	
   










 