1.Constructor Basics 							(SCJP)     	[13-DEC-2020]  	(Done)
2.


*******************************************************************  1.Constructor Basics(SCJP)  *******************************************************************

		Class Student
		{
			String name;
			int rollno;
		}

If we are not perfroming initialization then JVM provides the default values.
Then within the class Student,all the names will have the default values null and rollno as 0.
Object creation is not enough and we need to perfrom initialization then only object is in a position to provide the proper response.

If we perform initialization at the time of declaration, then all the objects have the same values.
If we perfrom initialization inside the instance block then all the objects have the same values.
If we perfrom initialization seperately for each block then length of the code will be increased and is not reccomended.

Whenver we are creating an object some peice of code will be executed to perform initialization.
Peice of code is nothing but Constructor.
Main objective of constructor is to perform initialization of an object.
For every object creation instance block and constructor will be executed.

Difference between instance block and Constructor :
---------------------------------------------------
Main purpose of Constructor is to perfrom initialization of an Object.
Other than initialization activity If we want to perfrom any other activity then we need to define inside static block.
For every Object creation both static block and constructor will be executed but static block first followed by contructor.

Both Constructor and instance block will have different purpose.
Replacing one concept with another concept is not possible.

public class ConstructorDemo {

	static int count = 0;
	{
		count++;
	}

	ConstructorDemo() {
		System.out.println("Default Constructor");
	}

	ConstructorDemo(int i) {
		System.out.println("Integer Constructor");
	}

	public static void main(String[] args) {
		ConstructorDemo demo = new ConstructorDemo();
		ConstructorDemo demo1 = new ConstructorDemo(1);
		System.out.println(count);//2
	}
}

For example If we write count in constructor,sometimes to create a Single Object we need to execute more than one Constructor.

Rules for Writing Constructor :
-------------------------------
Name of the Constructor and Name of the Class should be same.
Return Type concept is not applicable for Constructor even void also.
Whenever we are giving return type to the Constructor,Compiler treats as a Method and does not give any Compile time Error.
We can also have a method name whose name is same as Class Name but not according to the naming convention.
The only applicable modifiers for the Constructor are private,default,protected,public.

Default Constructor :
---------------------
Every Class in Java including abstract class should contain Constructor.
It may be explicitly provided by the programmer or generated by the Compiler.
If we are not writing any constructor then only compiler will generate the default Constructor.
If we are writing atleast one constructor then compiler won't generate the default constructor.

Prototype of default Constructor :
----------------------------------

Class Test{

}

Class Test { 
 Test()    // Default Constructor
 {
 super();  
 }
}

If we are not writing any constructor then only compiler will generate the default constructor.
Prototype of default constructor is always no argument constructor.
Access modifier of default constructor is same as Class Modifier but this rule is applicable only for public and default.
Default Constructor contains one line i.e super() .
It is a No Argument call to the Super class Constructor.

Compiler verfies whether the Constructor has written properly or not.
Compiler also verifies whether the first line inside every constructor should be either super() or this().
If we don't write anything compiler generates super() for us.

Note :
------
We can use super() or this() only in the first line.If we are using it in other than first line we get compile time error.
We can use either super() or this() in default constructor but not both.
We can use super() or this() only in constructor.If we are trying outside we get compile time error.


Difference between super(),this() and super,this :
--------------------------------------------------
super(),this():
---------------
super() and this() are used to call super class and current class constructors directly.
We can use super() and this() only inside constructor.

super,this :
------------
super and this are applicable only for instance variables.
These are the keywords used to refer super class and current class instance variables.
we can use super and this keywords anywhere except static area.

Overloaded Constructor :
------------------------
A Class can have any number of constructors.
All these constructors can have same name but different argument types.
Overloading concept is applicable for Constructors.

Every Class in Java including abstract class contains constructor but interface cannot contain constructor.
Abstract Class constructor will be executed whenever we are creating child class object.

Note :
------
Constrcutor is applicable only to that class to perform initialization.
Parent Class Constructor is not avaialbale to Child Class Constructor.
Inheritance and overriding concept is not applicable for Constructors.

Note :
------ 
Recursive Method Invocation gives Runtime Exception where as Recursive Constructor invocation gives Compile Time Error.

Note :
------
Functionality of super() is to call No Argument Constructor in the Parent Class.
Whenever we are writing any argument Constructor,it is highly recomended to write No Argument Constructor also.

Constrcutor w.r.t Exception Handling :
--------------------------------------
If a Child class Constructor throws checked Exception then the Parent Class Constructor should throw the same Checked Exception or its Parent.