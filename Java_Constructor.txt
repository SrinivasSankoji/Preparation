1.Constructor Basics 									(SCJP)     				[13-DEC-2020]  	(Done)
2.Copy Constructor in Java								(scaler)     			[10-SEP-2023]  	(Done)
3.Constructor Overloading                               (geeksforgeeks)     	[09-DEC-2021]  	()
4.Constructor Chaining                                  (geeksforgeeks)     	[09-DEC-2021]  	(Done)
5.Private Constructors and Singleton Class              (scaler)     			[10-SEP-2023]  	(Done)

*******************************************************************  1.Constructor Basics(SCJP)  **********************************************************

		Class Student
		{
			String name;
			int rollno;
		}

If we are not perfroming any initialization then JVM provides the default values.
Then within the Student class,all the names will have the default values null and rollno as 0.
Object creation is not enough and we need to perfrom initialization then only object is in a position to provide the proper response.

If we perform initialization at the time of declaration, then all the objects will have the same values.
If we perfrom initialization inside the instance block then all the objects will have the same values.
If we perfrom initialization seperately for each block then length of the code will be increased and is not reccomended.

Whenver we are creating an object some peice of code needs to be executed to perform initialization.
Peice of code is nothing but Constructor.
Main objective of constructor is to perform initialization of an object.
For every object creation first instance block and constructor will be executed.

Difference between instance block and Constructor :
---------------------------------------------------
Main objective of Constructor is to perfrom initialization of an Object.
Other than initialization activity If we want to perfrom any other activity then we need to define inside Static block.
Static block will be executed only once i.e. when the first time class is loaded into memory.
For every Object creation both static block and constructor will be executed but static block first followed by contructor.

Both Constructor and instance block will have different purpose.
Replacing one concept with another concept is not possible.

public class ConstructorDemo {

	static int count = 0;
	{
		count++;
	}

	ConstructorDemo() {
		System.out.println("Default Constructor");
	}

	ConstructorDemo(int i) {
		System.out.println("Integer Constructor");
	}

	public static void main(String[] args) {
		ConstructorDemo demo = new ConstructorDemo();
		ConstructorDemo demo1 = new ConstructorDemo(1);
		System.out.println(count);//2
	}
}

For example If we write count in constructor,sometimes to create a Single Object we need to execute more than one Constructor.

Rules for Writing Constructor :
-------------------------------
Name of the Constructor and Name of the Class should be same.
Return Type concept is not applicable for Constructor even void also.
Whenever we are giving return type to a Constructor,Compiler treats as a method and does not give any Compile time Error.
We can also have a method name whose name is same as Class Name but not according to the naming convention.
The only applicable modifiers for the Constructor are private,default,protected,public.

Default Constructor :
---------------------
Every Class in Java including abstract class should contain Constructor.
It may be explicitly provided by the programmer or generated by the Compiler.
If we are not writing any constructor then compiler will generate the default Constructor.
If we are writing atleast one constructor then compiler won't generate the default constructor.

Prototype of default Constructor :
----------------------------------

Class Test{

}

Class Test { 
 Test()    // Default Constructor
 {
	super();  
 }
}

If we are not writing any constructor then only compiler will generate the default constructor.
Prototype of default constructor is always no argument constructor.
Access modifier of default constructor is same as Class Modifier but this rule is applicable only for public and default.
Default Constructor contains one line i.e super() .
It is a No Argument call to the Super class Constructor.

Compiler verfies whether the Constructor has written properly or not.
Compiler also verifies whether the first line inside every constructor should be either super() or this().
If we don't write anything compiler generates super() for us.

Note :
------
We can use either super() or this() only in the first line.If we are using it in other than first line we get compile time error.
We can use either super() or this() in default constructor but not both.
We can use super() or this() only in constructor.If we are trying outside we get compile time error.


Difference between super(),this() and super,this :
--------------------------------------------------
super(),this():
---------------
super() and this() can be used to call super class and current class constructors directly.
We can use super() and this() only inside constructor.

super,this :
------------
super and this are applicable only for instance variables.
These are the keywords that can be used to refer the super class and current class instance variables.
we can use super and this keywords anywhere except static area.

Overloaded Constructor :
------------------------
A Class can have any number of constructors.
All these constructors can have same name but different argument types.
Overloading concept is applicable for Constructors.

Every Class in Java including abstract class should contain constructor but interface cannot contain constructor.
Abstract Class constructor will be executed whenever we are creating child class object.

Note :
------
Constrcutor is applicable only to class to perform initialization.
Parent Class Constructor is not avaialbale to Child Class Constructor.
Inheritance and overriding concept is not applicable for Constructors.

Note :
------ 
Recursive Method Invocation gives Runtime Exception where as Recursive Constructor invocation gives Compile Time Error.

Note :
------
Functionality of super() is to call the No Argument Constructor in the Parent Class.
Whenever we are writing any argument Constructor,it is highly recomended to write No Argument Constructor also.

Constrcutor w.r.t Exception Handling :
--------------------------------------
If a Child class Constructor throws checked Exception then the Parent Class Constructor should throw the same Checked Exception or its Parent.
If a Child class Constructor throws unchecked Exception then the Parent Class Constructor need not to throw any Exception.


******************************************************* 2.Copy Constructor in Java (scaler)  *********************************************

Copy Constructor in Java allows us to create an exact copy of an existing Object of the same class such changes made to an existing Object
does not affect the new copy.
To create a Copy Constructor we need to pass the existing Object as an argument and initialize the value of the instance variables with the values obtained in the Object.
We can assign the value to the final field but the same cannot be done using clone().

Advantages :
------------
Copy Constrcutor reduces the complexities when dealing Object with several parameters.
If a new field is added to the class, we only need to change the input parameter in the constructor.
No need of typecasting in Copy Constructor.
Copy Construtor in Java allows us to change the fields which are declared as final.
Copy Constrcutor provides completes control over Object Creation.

	public class Student {

    private String firstName;
    private String lastName;
    private int age;

    public Student(String firstName, String lastName, int age) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }

    public Student(Student student) {
        this.firstName = student.firstName;
        this.lastName = student.lastName;
        this.age = student.age;
    }

    public void displayStudent () {
        System.out.println("First Name : " + this.firstName);
        System.out.println("Last Name : " + this.lastName);
        System.out.println("Age : " + this.age);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Student student = (Student) o;
        return age == student.age && Objects.equals(firstName, student.firstName) && Objects.equals(lastName, student.lastName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(firstName, lastName, age);
    }

    public static void main(String[] args) {
        Student s1=new Student("Srinivas","Chary",37);
        Student s2=new Student(s1);
        System.out.println(s1==s2);
        System.out.println(s1.equals(s2));

    }

******************************************************* 4.Constructor Chaining (geeksforgeeks) **************************************************

Constructor chaining is the process of calling one Constrcutor from another Constrcutor with respect to current Object.
Constrcutor chaining can be done in two ways.
1.Within the Same class Constructor chaining can be done by using this().

	public class ConstructorChainingUsingThis {
    /* Default Constructor */
    ConstructorChainingUsingThis(){
        System.out.println("Default Constructor");
    }
    /* Argument Constructor*/
    ConstructorChainingUsingThis(int x){
        this();
        System.out.println("Value of x : "+x);
    }
    /* Parameterized Constructor */
    ConstructorChainingUsingThis(int x,int y){
        this(x);
        System.out.println("Value of x and y : "+x*y);
    }
    public static void main(String[] args) {
        new ConstructorChainingUsingThis(8,10);
    }
	}
	
Output :
--------
Default Constructor
Value of x : 8
Value of x and y : 80

2.From the Base Class Constructor chaining can be done by using super() keyword to call the Constructor from the derived class.
Constructor Chaining occurs through Inheritance.
Sub Class Constructor task is to call Super Class Constructor First.
This ensures the creation of Subclass Object start's with the initialization of data members of the Super class.

	

Why Constructor Chaining :
--------------------------
Constructor Chaining can be used whenever we want to perform multiple tasks in a Single Constructor.
Create a seperate Constructor for each Task and make their chain which makes the program more readable.

Instance Block :
----------------
Whenever certain amount of code has to be executed with every constructor we can place that code inside Instance Block.

******************************************************* 5.Private Constructors and Singleton Class (scaler) *************************************

Private Constructor in Java is a simple Constructor with private keyword.
Private Constrcutor helps in creating the Singleton Classes.
Singleton class is a Class which has to be instantiated only once.
Private variables/methods/constructor can be accessed only within the class.

Aceesing private Constructor outside the class using static Method :
--------------------------------------------------------------------

	public class A {

		private A(){
        System.out.println("Hello World!");
		}

		static A getInstance(){
        return new A();
		}
	}
	
	public class Scaler {
		public static void main(String[] args) {
			//A a=new A();// CTE
			A a=A.getInstance();
		}
	}
	
Rules of Private Constructor :
------------------------------
Prevents sub classing of the class.
Restricts Object creation outside the class.
Complie Time Error when trying to extend a class with a private Constrcutor.
Private Constrcutor in Java is inaccessible from other classes.
Private Constructor is useful when the class has only constants or static methods.
Private Contructor can be used to control the Object initialization through public functions.
Private Constrcutor in Java ensures only one Instance returned when Object is already initialized.










