1.Introduction															[16-DEC-2020]  (Done)
2.RuntimeStack Mechanism                                                [16-DEC-2020]  (Done)
3.Default Exception Handling in Java                                    [16-DEC-2020]  (Done)
4.Exception Hierarchy                                                   [16-DEC-2020]  (Done)
5.Exception and Error                                                   [16-DEC-2020]  (Done)
6.Checked and Unchecked Exception                                       [16-DEC-2020]  (Done)
7.Partially Checked Exception                                           [16-DEC-2020]  (Done)
8.Exception Handling using try catch block                              [17-DEC-2020]  (Done)
9.Control flow in try catch block                                       [17-DEC-2020]  (Done)
10.Methods to Print Exception                                           [17-DEC-2020]  (Done)
11.Try with Multiple Catch Block                                        [17-DEC-2020]  (Done)
12.Finally Block                                                        [17-DEC-2020]  (Done)
13.return vs finally                                                    [17-DEC-2020]  (Done)
14.finally,final and finalize                                           [17-DEC-2020]  (Done)
15.Control flow in try catch finally                                    [21-DEC-2020]  (Done)
16.Combination of try catch finally                                     [21-DEC-2020]  (Done)
17.throw keyword                                                        [21-DEC-2020]  (Done)
18.throws keyword                                                       [21-DEC-2020]  (Done)
19.Various CompileTime Errors                                           [21-DEC-2020]  (Done)
20.Customized Exception                                                 [21-DEC-2020]  (Done)
21.Top 10 Exception                                                     [21-DEC-2020]  (Done)
22.Try with Resources                                                   [21-DEC-2020]  (Done)
23.Multi Catch Block                                                    [21-DEC-2020]  (Done)
24.Interview Questions													[21-DEC-2020]  (Done)

******************************************************************** 1.Introduction  ***************************************************************************

Abnormal termination of the program is the result of an Exception.
An unwanted or unexpected event that disturbs the normal flow of execution of the program is nothing but Exception.
Main purpose of Exception Handling is graceful termination of the program.

Scenario 1:
-----------
My program has to read the data from the remote file and at runtime remote file is not available.we get FileNotFoundException.
It is highly recomended to handle the Exception.
We have to provide the local File to continue to rest of the program normally.

Scenario 2 :
------------
Opened the database and while reading the data from the database SQLException is raised.
Here program terminates abnormally without closing the connection.
If 10 connections are opened and program terminates the program without closing the connection,resources are wasted.
Eventhough program terminates abnormally,close the DB connection and stop the program.

Exception Handling does not mean repairing an Exception i.e we have to provide an alternative way to continue to the rest of the program normally.
This way of providing alternative is nothing but Exception Handling.

******************************************************************** 2.RuntimeStack Mechanism   ********************************************************************

Every Java program contains one Thread.
For every Thread JVM will create a seperate Runtime Stack.
For every Method call performed by the Thread one entry will be stored inside the corresponding Stack.
Each Entry in the Stack is called Activation Record or Stack Frame.
After completing the Method corresponding entry from the Stack will be removed.
After completing all the Methods Stack will be empty.
Just before terminating the program,empty stack will be destroyed by the JVM.

******************************************************************** 3.Default Exception Handling in Java  *********************************************************

If anywhere an Exception is raised inside a Method,the Method in which an Exception is raised is responsible to create an Exception object including

Name of the Exception
Description of the Exception
Location of the Exception

public class ExceptionDemoOne {
	public static void main(String[] args) {
		doStuff();
	}
	public static void doStuff()
	{
		doMoreStuff();
		System.out.println(10/0); // Creates an Exception Object and handovers to the JVM
	}
	public static void doMoreStuff()
	{
		System.out.println("Hello");
	}
}

Output :
--------
Hello
Exception in thread "main" java.lang.ArithmeticException: / by zero

After creating an Exception object by the Method,This Method hand overs the Exception object to the JVM.
JVM will check in which method problem raises,This Method has Exception Handling code or not.
If Not JVM terminates the program abnormally and removes the method from the Satck.
JVM handovers the responsibility of Exception Handling to the Default ExceptionHandler which is a part of JVM.

Note :
------
In our program If one method terminates abnormally,then the program termination is always abnormal termination.
If all the methods are terminated normally then only program will be terminated normally.

********************************************************************  4.Exception Hierarchy  ***********************************************************************

Throwable Class acts as a Root Class for Java Exception Hierarchy.
It contains following two Child Classes.

											Exception                                        								Error
RuntimeException   			IOException 			InterruptedException  	RemoteException  				VirtualMachineError StackOverflowError
ArithematicException		FileNotFoundException
NullPointerException		EOFException
ClassCastException			InterruptedIOException
IllegalArgumentException 
IndexOutOfBoundException
 
********************************************************************  5.Exception and Error ***************************************************************************

Most of the times Exceptions are caused by programmers and are recoverable.
If our program requirement is to read the data from the remote file and at runtime remote file is not available we get compile time error saying FileNotFoundException.
If FileNotFoundException occurs we can provide local file so that rest of the program will be continued normally.

Most of the times Errors are caused by lack of system resources and are not recoverable.
If OutOfMemory occurs as a programmer we cannot do anything and the program will be terminated abnormally.

******************************************************************** 6.Checked and Unchecked Exception  **************************************************************

Each and every Exception occurs at Runtime.
The Exceptions which are checked by the compiler for the smooth execution of the program at Runtime is called CheckedException.
In our program sometimes there may be a chance of getting an Exception at Runtime.
Compiler verifies whether we are handling that Exception or not.i.e writing catch block or not is the only requirement of the compiler.

Example :FileNotFoundException

There are some Exceptions which are not checked by the compiler.These type of Exception are called UncheckedException.

Example :
ArithematicException
NullPointerException

RuntimeException and its Child Classes and Error and its Child Classes are Unchecked Exception.Remaining are Checked Exception.

Note :
------
Whether the Exception is Checked or Unchecked compulsory it should occur at Runtime only.There is no chance of Exception occurig at Compile Time.

******************************************************************** 7.Partially Checked Exception  ********************************************************************

A Checked Exception is said to be fully Checked Exception If all of its Child Classes are Checked.
Example :
IOException
InterruptedException

A Checked Exception is said to be partially Checked Exception If some of its Child classes are unchecked.
Example :
Throwable
Exception

Only possible Partial Checked Exception are
Throwable
Exception

******************************************************************** 8.Exception Handling using try catch block  ********************************************************

We can make the program as graceful terminataion of the program by using try catch block.
The code which makes the program termination is called risky code and should be placed inside try catch block.
 
	public class ExceptionDemoTwo {
	public static void main(String[] args) {
		System.out.println("Statement 1");
		try {
			System.out.println(10 / 0);
		} catch (Exception e) {
			System.out.println(10 / 2);
		}
		System.out.println("Statement 3");
	}
	}
	
Output:
Statement 1
5
Statement 3
	
******************************************************************** 9.Control flow in try catch block  ******************************************************************

1.Within the try block If any where an exception is raised,rest of the try block won't be executed even though we handled the exception.
Hence within the try block we have to take only risky code and lenth of the risky code should be as less as possible.
2.There may be a chance of getting an Exception in catch and finally block also in addition to try block.
3.If any satetment which is not part of try block raising an exception,then it is always abnormal termination of the program.

******************************************************************** 10.Methods to Print Exception  **********************************************************************

Throwable Class defines the following methods to print Exception information on the console.

e.getMessage()  	 - Description
e.toString()    	 - Name of the Exception : Description
e.printStacktrace()  - Name of the Exception : Description : StackTrace

******************************************************************** 11.Try with Multiple Catch Block  *******************************************************************

The way of Handling the Exception varies from Exception to Exception.
For every Exception it is recomended to take seperate catch block.
Try with Multiple Catch block is recomended to use.

Within the try block at any point of time there may be a chance of getting only one Exception at a time.
But we cannot expect exactly which Exception is going to raise.

If within the try block NullPointer Exception raises,JVM verifies in the catch block is there any object to handle that Exception.
If we are writing try with multiple catch block,order of catch block is important .i.e form Child to Parent.
 
******************************************************************** 12.Finally Block   *********************************************************************************

It is never recomended to write clean up code within the try block because there is no gaurantee of exeucting each and every statement.
It is not recomended to write the clean up the code within the catch block because there is no gaurantee of execution.
We required a place to maintain the clean up code which should be executed always irrespective of whether the exception is raised or not or exception is handled or not.
such type of place is nothing but finally block.
Main purpose of finally block is to maintain clean up code which should be executed always.

	public class FinallyDemoOne {
	public static void main(String[] args) {
		try {
			System.out.println("Try");
			System.out.println(10/0);
		}
		catch (Exception e) {
			System.out.println("Catch");
		}
		finally {
			System.out.println("Finally");
		}
	}
	}
	
Output :
Try
Catch
Finally

********************************************************************  13.return vs finally  *****************************************************************************

finally block dominates the return statement also.
If there is any return statement present inside try or catch block,finally block will be executed then return statement will be executed.

	public class FinallyDemoTwo {
	public static void main(String[] args) {
		try {
			System.out.println("Try");
			return;
		}
		catch (Exception e) {
			System.out.println("Catch");
		}
		finally {
			System.out.println("Finally");
		}
	}
	}
	
Output :
Try
Finally

Special Case :
--------------
System.exit(0); dominates finally block.
There is only one situation where finally block won't be executed i.e System.exit(0);
Here JVM itself is going to shutdown and finally block won't be executed.

System.exit(0);

Number represents the Status code of JVM 
0 represents Normal termination of the JVM
Non Zero means abnormal termination of the JVM.
whether it is Zero or Non Zero Programmer or program has no effect at all and going to be used by JVM.

	public class FinallyDemoTwo {
	public static void main(String[] args) {
		try {
			System.out.println("Try");
			System.exit(0);
			return;
		}
		catch (Exception e) {
			System.out.println("Catch");
		}
		finally {
			System.out.println("Finally");
		}
	}
	}
	
Output : Try

********************************************************************  14.finally,final and finalize   ********************************************************************
final :
-------
It is a modifier applicable for variables,methods and classes.
For final class inheritance is not Applicable
If a Method is declared as final we cannot overridden that method.
If a variable is declared as final we cannot perform reassignment for that variable.

finally :
---------
It is a block always associated with try and catch to maintain clean up code.
Speciality of finally block is it will be executed always irrespective of whether the exception is raised or not and whether it is handled or not.

finalize() :
------------
It is a method that will be executed by Garbage collector just before destroying the object to perform clean up activities.
Once finalize() completes the execution Garbage collector destroys the object Automatically.
When compared to finalize() finally block is always recomended to perform claen up activities.

******************************************************************** 15.Control flow in try catch finally  ****************************************************************

Nested try catch finally is possible.
If the control enters into the try block then only finally block will be executed.
If the control won't enter into the try block then finally block won't be executed.

	public class FinallyDemoThree {
	public static void main(String[] args) {
		System.out.println(10/0);
		try {
			System.out.println("Try Block");
		}
		catch (Exception e) {
			System.out.println("Catch Block");
		}
		finally {
			System.out.println("Finally Block");
		}
	}
	}
	
Output :
Exception in thread "main" java.lang.ArithmeticException: / by zero
	
Note :
------
At any point of time DefaultExceptionHandler can handle only one Exception at a time i.e most recently raised exception.

********************************************************************  16.Combination of try catch finally  ***************************************************************

1.try catch finally order is important.
2.We cannot take try without catch or finally.
3.catch without try is invalid.
4.finally without try is invalid.
5.when we are taking try compulsory we have to take either catch or finally.
6.Nesting of try catch finally is possible.

******************************************************************** 17.throw keyword  ***********************************************************************************

Exception object is thrown by the program or method and handovers the exception object to the JVM.
The method in which an Exception is raised is responsible to create an Exception object and handovers the Exception object to the JVM.
JVM verifies is there any try catch block defined inside the method or not otherwise handovers the Exception object to the Default Exception Handler.

	public class ThrowDemoOne {
	public static void main(String[] args) {
		System.out.println(10/0);
	}
	}
	
	public class ThrowDemoTwo {
	public static void main(String[] args) {
		throw new ArithmeticException("Divided by Zero");
		}
	}
 
In program One main() is responsible to create an Exception object and handover to the JVM.
In program Two programmer is responsible to create an Exception object and handover to the JVM.

To handover our own created Exception object to the JVM manually we use throw keyword.
Here JVM identifies our own created Exception object and verifies is there any try catch block defined or not.
If not found handovers the Exception object to the Default Exception handler which is a part of JVM.

Note :
------
usually we use throw keyword for Customized Exceptions and not for pre defined Exceptions.

	public class ThrowDemoFour {
	static ArithmeticException exception=new ArithmeticException();
	public static void main(String[] args) {
		throw exception;
	}
	}
	
Here we get RuntimeException.

	public class ThrowDemoFive {
	static ArithmeticException exception;
	public static void main(String[] args) {
		throw exception;
	}
	}
	
Here we get NullPointerException because exception refers to null.

	public class ThrowDemoOne {
	public static void main(String[] args) {
		System.out.println(10/0);
		System.out.println("Hai");
	}
	}
	
Here we get RuntimeException.

	public class ThrowDemoSix {
	public static void main(String[] args) {
		throw new ArithmeticException("Divided by Zero");
		//System.out.println("Hai");  CTE 
	}
	}

Here we get Compile Time Error saying unreachable code.


Note : 
------
we can use throw keyword only for throwable types and not for normal java objects.

	public class ThrowableDemoSeven {
	public static void main(String[] args) {
		throw new ThrowableDemoSeven();
	}
	}
	
Here we get Compile Time Error and can be resolved by adding

	public class ThrowableDemoSeven extends RuntimeException
	
********************************************************************  18.throws keyword  ************************************************************************

In our program If there is any chance of raising checked Exception,compulsory we should handle that checked Exception.
Other wise we get Compile Time Error saying unreported Exception must be caught or declared to be thrown.

	public class ThrowsDemoOne {
	public static void main(String[] args) {
		PrintWriter writer=new PrintWriter("abc.txt"); // CTE saying Unhandled exception type FileNotFoundException
		writer.println("Hello");
	}
	}

	public class ThrowsDemoTwo {
	public static void main(String[] args) {
		Thread.sleep(1000);
	}
	}

Here Thread enters into the sleeping state and other Thread have the chance of Interrupting the Thread.
We get CTE saying Unhandled exception type FileNotFoundException.

We can handle Compile Time Errors either by using Try Catch block or by using throws keyword.
Responsibility of throws keyword is to delegate the responsibility of handling the exception to the caller method and 
caller method is responsible to hand over the Exception object to the JVM.

Note :
------
usage of throws keyword does not prevent the abnormal termination of the program and required only to convince the compiler.

Scenario One :
--------------
	public class ThrowsDemoThree {
	public static void main(String[] args) {
		doStuff();
	}
	public static void doStuff()
	{
		doMoreStuff();
	}
	public static void doMoreStuff()
	{
		Thread.sleep(1000);
	}
	}
	
Here we get the CTE because we are not delegating the Exception to the main().

Note :
------
We can use throws keyword only for Throwable types other wise we get CTE saying incompatible types.
We can use throws keyword only for methods and constructors and not for classes and blocks.
	
	public class ThrowsDemoFour {
	public static void main(String[] args) {
		throw new Exception(); //CTE
	}
	}

Here we get CTE because checked Exception must be handled.

	public class ThrowsDemoFour {
	public static void main(String[] args) {
		throw new Error();
	}
	}
	
Here we get RTE because Error is an unchecked Exception.

Note :
------
Within the try block if there is no chance of raising an Exception,catch block won't be executed and we get CTE.
This rule is applicable only for fully checked Exception.

	public class ThrowsDemoFive {
	public static void main(String[] args) {
		try {
			System.out.println("Hello");
		}
		catch (InterruptedException e) {
		}
	}
	}

Output :
Hello
	
Exception Handling keyword summary :
------------------------------------
try : To maintain risky code
catch : To maintain Exception Handling code
finally : To maintain clean up code
throw : To hand over our own created Exception object to the JVM.
throws : To delegate the responsibility of ExceptionHandling to the caller.

******************************************************************** 19.Various CompileTime Errors ********************************************************************

unreprted Exception must be declared or thrown :  For checked Exception
Exception has already been caught : order of catch block
Exception is never thrown : Within try blcok if there is no chance of raising an Exception
unreachable statement : after throw keyword
incompatible types : using for non throwable types 

********************************************************************  20.Customized Exception   **********************************************************************

sometimes to meet programmer requirement we have to create our own Exception which is called customized Exception or user defined Exception.

	public class TooYoungException  extends RuntimeException{
	private static final long serialVersionUID = 1L;
	public TooYoungException(String message) {
		super(message);
	}
	}
	
public class TooYoungException extends RuntimeException

Here If it is Checked Exception i.e extends Exception we get CTE because it has to be handled.
It is highly recomended to define our own exception as unchecked i.e extends RTE and not Exception.

Note :
------
Best use of throw keyword is for customized Exception and not for predefined Exception.

***************************************************************** 21.Top 10 Exception  *******************************************************************************

Exceptions are divided into two types

1.JVM Exception
2.Programatic Exception

JVM Exception :
---------------
Exceptions which are automatically raised by the JVM whenever a particular event occurs are called JVM Exception.
Example : NPE,AE,AIOBE etc.

Programatic Exception :
-----------------------
Exceptions which are raised by the programmer to indicate something went wrong is called Programatic Exception.
Example : IllegalArgumentException,TooYoungException etc.

Exception propogation :
-----------------------
Inside a method If an Exception raises and If we are not handling that exception,then the exception will be propogated to the caller method.
Here caller method is responsible to handle that exception.
This process is called Exception Propogation.

***************************************************************** 22.Try with Resources ****************************************************************************

If we are opening the resources in the try block then it should be closed in the finally block.
Here we need to write finally block and length of the code will be increased and reduces readability.
Upto 1.6 version it is highly recomended to write finally block to close all the resources which are opened as a part of try block.
To overcome this we use try with resources.
Main advantage of try with resources is that Resources which are opened as a part of try block will be closed automatically once the control reaches to the end of thr try block
either normally or abnormally.
Here we are not required to close explicitly.

Note :
------
1.We can take any number of resources and should be seperated with ,.
2.Resources whatever we are taking are Autoclosable Resources i.e corresponding Class implements AutoClosable interface.
3.Resource reference variable should be declared as final so that we cannot perform reassignment for that variable.
4.untill 1.6 try should be associated with catch or finally but from 1.7 we can only have try with Autoclosable interface.

*************************************************************** 23.Multi Catch Block  *********************************************************************************

Untill 1.6 for different Exceptions we have same Exception Handling code.
Compulsory we have to write seperate catch block for every Exception Type.
Problem in this approach is it increases the length of the code and reduces readability.
We can resolve this problem by using Multicatch block.

Note :
------
In Multicatch block there should not be any relationship between Exception Types i.e parent to child or child to parent or same type otherwise we get CTE.

***************************************************************   24.Interview Questions  ****************************************************************************

We cannot handle unchecked Exception either by catching or throwing it in Java.
If we are throwing any checked Exception compulsory we need to handle it either by using try catch block or by using throws keyword.

throw keyword :
---------------
throw keyword is used to throw an exception in java.
throw is used inside a method.
throw is followed by an instance of an Exception
throw can be used to throw only one exception at a time.

throws :
--------
throws keyword is used to delegate the responsibility of Exception Handling to the caller method.
throws is used as a method declaration.
throws is followed by the name of the Exception.
throws can be used to throw Multiple Exceptions.

1.If the Super Class method does not throw any Exception then subclass method can throw any unchecked Exception.
2.If the Super Class method does not throw any Exception then subclass method cannot throw any CheckedException.
3.If the Super Class method throws any checked Exception then sub class method can throw the same exception or its subclass.
4.If the super class method throws any Unchecked Exception then subclass method cannot throw any Exception.

finally block :
---------------
Whenever Exception is occured in try block and corresponding catch and finally block has the return statement,then finally block return statement will be executed.

 


