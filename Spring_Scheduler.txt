Spring Boot uses @Scheduled Annotation to Schedule the Tasks.
It Internally uses the TaskScheduler interface for Scheduling the Annotated Methods For Execution.

Simple Rules that need to be followed to annotate a Method with @Scheduled are 
1.Method Should have void return type.
2.Method Should not Accept any Parameters

To Enable Support For Scheduling we use @EnableScheduling at Configuration Level.

	@EnableScheduling
	public class SpringConfig {
    ...
	}

Schedule a Task at Fixed Rate :
-------------------------------

	@Scheduled(fixedRate=1000)
	public void scheduledFixedRateTask()
	{
	
	}

FixedRate is used when each Execution of the Task is independent.
Scheduled Tasks don't run in Parallel by Default.
So If we used Fixed Task, Next Task wont be Invoked until previous one is Done.
If we want to Achieve the parallel behavior in scheduled Tasks we need to add @Async Annotation.
To use @Async Annotation we need to define @EnableAsync at Class Level.

	@EnableAsync
	public class ScheduledFixedRateExample 
	{
		@Async
		@Scheduled(fixedRate = 1000)
		public void scheduleFixedRateTaskAsync()
		{
			
		}
	}

Fixed Rate vs Fixed Delay :
---------------------------
FixedDelay property makes sure that there is a delay of n MilliSeconds between the Finish Time and execution of a Task and Start time of the next execution of the Task.
If we want the Fixed delay between the last Execution and Start of the next Execution we use fixedDelay.
Consider the scenario where the Task is taking 3 Seconds to execute and we want the delay of 2 Seconds we need to define fixedDely of 5 Seconds. 
This Property is specifically useful when we need to make Sure that only one Instance of the Task runs all the Time.
FixedRate Property runs the Scheduled Task at every n MilliSecond and It does not check for previous execution of the Task.

Schedule a Task with Initial Delay :
------------------------------------
The Task will be Executed for the First Time after the initialDelay Value and 
will be executed according to the fixedRate or fixedDelay.


Parameterizing the Schedule :
-----------------------------
We can make use of Spring Expressions to externalize the Configuration of the Tasks.
we store these Configuration in  properties File.

	@Scheduled(fixedDelayString = "${}")
	
















