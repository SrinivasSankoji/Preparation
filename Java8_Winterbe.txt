WINTERBE :
**********
Streams are Monads thus Playing a Big Part in Bringing Functional Programming to Java.
Stream Represents a Sequence of Elements and Supports Different Kind of Operations to Perform Computation on Those Elements.
Stream Operations are Either Intermediate or Terminal.
Intermediate Operations returns a Stream So that We Can Chain Multiple Intermediate Operations Without Using Semi Colon.
Where as Terminal Operations Either Return Void or Non Stream Result.
Filter,Map and Sorted are Intermediate Operation Where as ForEach is Terminal Operations.
Most Stream Operations accept some kind of Lambda Expression Parameter,
A Functional Interface Specifying the Exact Behavior of the Operation.
Most of these Operations must be Non Interfering ans stateless.

Non Interfering :
-----------------


Stateless :
-----------



Different kind of streams :
---------------------------
Streams Can be Created Form Various Sources Like Collection.
List and Set supports new Methods Like stream() and paralellStream() to Create Sequential Stream and Parallel Stream.
Parallel Streams are Capable of Operating on Multiple Threads.
We Have Special Kind of Streams to work with Primitive Data Types like int,long,double.
Those are IntStream,LongStream and DoubleStream.
Primitive Streams support the Additional Aggregation Operations like average() and sum().
SomeTimes it is useful to transform a Regular Object Stream to Primitive Stream or vice Versa.
Here we use mapToInt,mapToLong,mapToDouble.

Processing Order In Streams :
-----------------------------
An Important Characteristic of Intermediate Operation is Laziness.
An Intermediate Operation will only be Executed When a Terminal Operation is Present.
In Native Approach Elements would be Executed One After Other.

Why Order Matters :
-------------------
User Filter First and Then Map.
Filter will always be Executed if Doesn't Match the Condition also.
If We are Using any Stateless Operation like sorted 
Then The Order would be  Filter,Sorted,Map and then The Terminal Operation.

Reusing Streams :
-----------------
Java 8 Streams Cannot Be Reused and Closed Once We Call the Terminal Operation.
To Overcome This we have to Create a New Stream Chain For Every Terminal Operation.
We Have to Create a Stream Supplier to Construct a New Stream with all Intermediate Operations already Set Up.

collect :
---------



FlatMap :
---------


Reduce :
--------














