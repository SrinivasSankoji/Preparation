WINTERBE :
**********
Streams are Monads thus Playing a Big Part in Bringing Functional Programming to Java.
Stream Represents a Sequence of Elements and Supports Different Kind of Operations to Perform Computation on Those Elements.
Stream Operations are Either Intermediate or Terminal.
Intermediate Operations returns a Stream So that We Can Chain Multiple Intermediate Operations Without Using Semi Colon.
Where as Terminal Operations Either Return Void or Non Stream Result.
Filter,Map and Sorted are Intermediate Operation Where as ForEach is Terminal Operations.
Most Stream Operations accept some kind of Lambda Expression Parameter,
A Functional Interface Specifying the Exact Behavior of the Operation.
Most of these Operations must be Non Interfering ans stateless.

Non Interfering :
-----------------


Stateless :
-----------



Different kind of streams :
---------------------------
Streams Can be Created Form Various Sources Like Collection.
List and Set supports new Methods Like stream() and paralellStream() to Create Sequential Stream and Parallel Stream.
Parallel Streams are Capable of Operating on Multiple Threads.
We Have Special Kind of Streams to work with Primitive Data Types like int,long,double.
Those are IntStream,LongStream and DoubleStream.
Primitive Streams support the Additional Aggregation Operations like average() and sum().
SomeTimes it is useful to transform a Regular Object Stream to Primitive Stream or vice Versa.
Here we use mapToInt,mapToLong,mapToDouble.

Processing Order In Streams :
-----------------------------
An Important Characteristic of Intermediate Operation is Laziness.
An Intermediate Operation will only be Executed When a Terminal Operation is Present.
In Native Approach Elements would be Executed One After Other.

Why Order Matters :
-------------------
User Filter First and Then Map.
Filter will always be Executed if Doesn't Match the Condition also.
If We are Using any Stateless Operation like sorted 
Then The Order would be  Filter,Sorted,Map and then The Terminal Operation.

Reusing Streams :
-----------------
Java 8 Streams Cannot Be Reused and Closed Once We Call the Terminal Operation.
To Overcome This we have to Create a New Stream Chain For Every Terminal Operation.
We Have to Create a Stream Supplier to Construct a New Stream with all Intermediate Operations already Set Up.

collect :
---------
Collect is an Extremely Useful Terminal Operation to Transform the Elements of the Stream into Differnet Kind of Result.
Collect accepts Four different Operations i.e Supplier,accumulator,combiner and Finisher.
collect accepts Collectors or three arguments as supplier,accumulator and combiner.
collect is used to Perform Many Operations Like Summation,Grouping,Joining etc.

FlatMap :
---------
Map Can Be Used to Transform the Objects of a Stream into another Type Of Objects.
Map is Limited Because Because Object Can Only Be Mapped to exactly Another Object.
We USe FlatMap to Transform One Object into Multiple Others or None at All.
FaltMap Transforms Each Element of The Stream into a Stream of Other Objects.

Reduce :
--------
Reduce Operation Combines all the Elements of The Stream into a Single Result i.e 
Reducing all the ELements of The Stream to Exactly One.

Java 8 Supports 3 Different Kind of Reduce() Methods.

First :
First Reduce Method accepts a Binary Operator Accumulator Function i.e BiFunction where Both Operands Share The Same Type.
BiFunctions are Like Functions But Accept Two Arguments.

Second :
Second Reduce Method accepts Both an Identity Value and a Binary Operator Accumulator.
This Way Can be Used to Construct a New Object from the Other Objects of the Stream.

Third:
Third Reduce Method Accepts Three Parameters i.e Combiner Type Binary Operator,Identity Operator
and Binary Operator Accumulator Function.
Here Identity Value Type is Not Restricted to Particular Object.




























