1.Resilience Introduction 
2.Design Patterns to Ensure Service Resiliency
3.Circuit Breaker Pattern											(Defog Tech)          [04-JUL-2024]  ()
4.Bulk Head Pattern													(Defog Tech)          [04-JUL-2024]  (Done)
5.Timeout Pattern													(TechPrimers)         [04-JUL-2024]  ()
6.Retry Pattern 													(JavaTechie)          [04-JUL-2024]  ()

############################################################### 1.Introduction ###############################################################

In case of Monolith Application single error has the potential of bringing the entire application down.
This can be resolved by making each functionality as an independent deployable modules which won't effect the entire System.
This doesn't mean that Micro services are resilient.
While developing Micro Service application we should assume that failures will happen and design them for resiliency.
In short design your Micro services with failure in mind.

What can go wrong in a Micro service architecture :
---------------------------------------------------
There are number of moving components in Micro services architecture and there will be more chances of failures.
Failures can be caused by variety of reasons.

Why do you need to make services resilient :
--------------------------------------------
Problem with Micro Service communication is that they communicate with each other over the network which is unreliable.
Hence we need to design Micro services in such a way that they must be Fault Tolerant and handle the failures gracefully.
We also need to make sure that if one Micro service goes down then it should not effect the entire application down.

How to Make Your Services Resilient :
-------------------------------------
Design the Micro service in such a way that let them fail and try to recover from the failure.
Then identify the failure scenarios :
Service A is not able to communicate with Service B.
Service B is not able to access Database.
Service B Is down.
Service B response is taking time.
Server is down.

Avoid Cascading Failures :
--------------------------
When we have Service dependencies built in our architecture,make sure that One service does not effect the entire chain down.
i.e Do not hammer a Service with additional request If it is already down and give the time for service to recover.

Avoid single point of failure :
-------------------------------
Design the Micro service in such a way that there is no single point of failure.
We should be able to handle the Client request all the time.
Hence ensuring the availability across the Micro services eco system is critical.

Resilience in Micro services refers to the ability of a system to handle and recover from failures and continue to function correctly.
This ensures overall system remains functional even when some of the components fails.
This is cruicial because Micro services Architecture involves multiple services that communicate with each other over the network.
This makes more suspectible to various types of failures.
Implementing Resilience in MicroServices is cruicial to ensure high availability, reliability and better user experience.
Some of the key strategies and patterns used to enhance Resilience in MicroServices Architecture.

1.Fault Tolerance
2.Redundancy

Ways to implement Resilience in Micro services

1.Circuit Breaker Pattern
2.Retry Pattern
3.Bulkhead Pattern
4.Rate Limiting
5.Load Balancing
6.Health Checks and Monitorings
7.Graceful Shutdown
8.Auto Scaling
9.Service Mesh
10.Data Replication and Sharding
11.Timeout Pattern
12.Fallback Pattern


############################################################### 2.Design Patterns to Ensure Service Resiliency ###############################################################

2.Retry Design Pattern :
------------------------
This Pattern Ensures that we can retry a Connection which has Failed Earlier due to an Exception.
This Very Handy in case of Temporary Issues and lot of Times simple Retry can Fix the Issue.
Load Balancer Might Point to a Different Healthy Server on retry and at that Time our Service call might be a Success.

3.Timeout Design Pattern :
--------------------------
Time Out Design pattern ensures that we should not wait for the Service response for an indefinite amount of time and throw an Exception instead of waiting too Long.
Once the Timeout period is met Thread is freed up. 

############################################################### 3.Circuit Breaker Pattern (Defog Tech) #########################################################

If there are any failures in the Micro service eco system we need to fail fast by opening the Circuit.
This ensures that no additional calls are made to the failing service once the Circuit Breaker is open and return an exception immediately.
This also monitors the system for failures and once things are normal the Circuit is closed to perform normal functionality.
This is very common cascading Pattern to avoid cascade failures in Micro service eco system.
Most popular third party libraries to implement Circuit Breaker Pattern are Polly and Hystrix.

############################################################### 4.Bulk Head Pattern (Defog Tech) ###############################################################

Bulk Head pattern is a Micro services architectural pattern that helps to improove the resilience of a system by isolating different parts of services.
This isolation prevents a failure in one part of the system cascading to other parts of the system.
Consider the scenario where we have set of Micro services.

Order service
Payment service
Cart service
Inventory service

Here Order service communicates with all the services to complete the flow.
For each request based on the type Order service communicates with the other services.

Consider the Order service is built using Spring boot which internally uses Tomcat.
Tomcat will have a Servlet Thread pool with size of Maximum 200.
On every request a Thread will be assigned to serve the Request.
Responsibility of the Thread is to call the other service based on the type.
Once the response is recieved from the other service, the Thread is freed in Servlet Thread pool and can serve another request.

Since the Servlet Thread pool size is 200 it can serve as many requests.
Consider the scenario where the Payment service is taking time to execute and there are frequent request for other services also.
After some time request reaches to the size of the Servlet Thread pool.
Then there will be no resources to handle the new request.

To ensure that slowness in one service does not effect any other dependency we have to rouhly divide the Thread pool into the number of services we have.
Consider the pool size is 9 and we need to ensure Order service can take upto 3 requests from the Thread pool.
This can be implemented by using Decorator pattern

Instead of custom implementation for BulkHead we can use the ResilienceJ library or Hystrix.
We docorate the service with the Bulk Head Logic and this can be done by using Decorator design pattern.

############################################################### 5.Timeout Pattern (TechPrimers)  ###################################################################

https://vinsguru.medium.com/resilient-microservice-design-with-spring-boot-timeout-pattern-72b5f5174d2a

https://medium.com/@zaidali753/timeout-strategies-in-microservices-architecture-an-overview-a811a3aff8b2














