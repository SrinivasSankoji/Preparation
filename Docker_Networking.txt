1.Docker Networking	Part One														(IntelliQ IT Trainings)		[12-MAR-2021]  (Done)
2.Docker Networking																	(aquasec)					[15-MAR-2021]  (Done)
3.Docker Networking																	(edureka)					[12-MAR-2021]  ()
4.Host and NONE Network																(AWS HandsOn)				[26-MAR-2021]  (Done)
5.Macvlan Network																	(Srinivas Makam)			[12-MAR-2021]  ()
6.Overlay Network																	(SysTechInfra Solutions)	[12-MAR-2021]  ()
7.Deploying Multiple Spring Boot Microservices using Docker Networking				(javainuse)					[16-MAR-2021]  (Done)
8.Docker Networking																	(Developers Thought)		[16-MAR-2021]  ()


********************************************************* 1.Docker Networking (IntelliQ IT Trainings) ***************************************************************

Docker has the following type of Networks 

1.Bridge
2.Host or Host Only
3.null or NONE
4.Macvlan   (Used in legacy systems)
5.Overlay	(Used in Container Orcchestration tools like Docker Swarm)

When Multiple Containers are running on the Single Machine or Single Host,the default network used by Docker is Bridge Network.
Consider the case we have created Multiple Containers in the Single Host ie Ubuntu Container,Tomcat Container,PHP Container etc.
All these Containers are connected using Bridge Network and can communicate with each other.

Here --link tag is deprecated because of Bridge Network.

How we can create a Multi Container Architecture where different containers can communicate with each other.
Consider the scenario where 

Wordpress Container can communicate with MySql Container
Ghost Container (Blogging Software) can communicate with MySql Container.

Here we are creating two different architecture for two different Projects.
Problem with this approach is all these containers are running on the same machine via Bridge Network and can communicate with each other.
Problem to the solution is we want to restrict certain Containers to communicate among themselves.
This can be done by creating virtual bridge networks(Docker Networking).

Create 2 Bride Networks named Bridge1 and Bridge2.
Create 3 Busy Box Containers named C1,C2 and C3.

Scenario One :
Instead of C1,C2,C3 allowing to run on the default Bridge Network,we put C1 and C2 on the Bridge1 and C3 on Bridge 2.
Here C1 and C2 can communicate with each Other where as C3 cannot Communicate with C1 and C2.

To craete a Docker Network 

	docker network create --driver bridge Bridge1
	docker network create --driver bridge Bridge2
	
To view the networks 

	docker network ls
	
Run the BusyBox Container C1 and C2 in the Bridge Network Bridge1 and Container C3 in Bridge Network2

	docker run --name C1 -it --network Bridge1 busybox
	docker run --name C2 -it --network Bridge1 busybox
	docker run --name C3 -it --network Bridge2 busybox

Note 1 :
To come out of the container without exiting and stopping it we use te command

	CTRL+P CTRL+Q
	
Note 2 :
To attach to the Container we use the command

		docker attach C2

To identify the IP Address of the container 

	docker inspect C1
	
	172.18.0.2	(Bridge1)
	
	docker inspect C2
	
	172.18.0.3   (Bridge1)
	
	dokcer inspect C3
	
	172.19.0.2   (Bridge2)
	
Scenario Two :
Single Container can run paralelly on multiple Networks.
To make the C2 Container can run on Bridge1 as well as Bridge2 we use the command

	docker network connect Bridge2 C2

To check whether C2 is connected to Bridge2 inspecct the Container
	
	docker inspect C2
	
We can also check that the Network is attached to how many Conatiners by using the command

	docker network inspect Bridge2
	
Note :
Default Network used by Docker when Multiple Containers running on the same Machine is Bridge Network. 

******************************************************************* 2.Docker Networking(aquasec)  *********************************************************************

For Docker Containers to communicate with each other and outside the world via host machine,there has to be a layer of networking involved.
Docker supports different types of networks each fit for certain use case.

For example Building an Application which runs on a Single Docker Container will have different Network Setup compared to
Building a Web Application with a cluster of databases,application,load balancers etc.

Docker Default Networking :
---------------------------
When Docker is installed,default Bridge network named docker0 is created.
Newly added Container is automatically attached to this network unless custom network is specified.
Besides docker0 two other networks got created automatically by Docker i.e host and none

Host :
------ 
Host Network removes the Network isolation between the Docker Host and Docker containers to use the Host's Network directly.
With this we will not be able to run multiple web Containers on the same host,on the same port as the port is now common to all the containers on the network.
To the outside world they are on the same network.

NONE : 
------
In this kind of network,Containers are not attached to any network and do not have access to the external network or other Containers.
This network can be used whenever we want to completely disable the networking stack on a Container and only create a loop back device.

Docker Networking Types :
-------------------------
Docker comes with network drivers geared towards different usecases.
Most Common Network types are 

Bridge
Overlay
Macvlan

Bridge :
--------
Bridge network is the most common Network Type.
It is limited to containers within a Single host running the Docker Engine.
Bridge network are easy to create,manage and troubleshoot.

For the Containers on Bridge network to communicate with each other or to be reachable from outside world,port mapping needs to be configured.
Consider the case we have Docker Container running the Web Service on port 80.
Because this Container is attached to the Bridge Network on a private subnet,
port on host system like 8500 needs to be mapped to port 80 on the Container for the outside traffic to reach the Web Service.

To create a Bridge network named Bridge3 pass the argument bridge to the -d parameter.

	docker network create -d bridge Bridge3
	
In case of Bridge Network all the Containers get an Internal IP Address and these Containers can access each other using the Internal IP.
Bridge Networks are usually used when our Application runs in Stand alone Containers that needs to Communicate.

	
Overlay :
---------
After Docker Swarm

Macvlan :
---------
After Docker Swarm

Container discovery on docker0 network (DNS resolution) :
---------------------------------------------------------
Different network provides different communication patterns between the containers depending on the network type whether it is default docker network or user defined network.

Docker will assign name and hostName to each Container created on the default docker0 network unless different name/hostName is specified by the user.
Docker then keeps mapping of each name/hostName against the Container's IP Address.
This mapping allows pinging each Container by name as opposed to IP Address.

Example :
After DNS Video


Directly linking containers :
-----------------------------
It is possible to directly link one Container to the another using the --link option when starting the Container.
This allows Containers to discover each other and securely tarnsfer information about One Container with other Container.
However Docker has deprecated this feature and recomended to use user defined network instead.

Example :
After LInking Video


Exposing Port and Forwarding Traffic :
---------------------------------------
Docker network uses private subnet that cannot be accessed from the outside world.
To allow requests from the internet to reach to the Container,we need to map the port on the Container to the port on the Container Host.

	-p 8500:80

Containers Connected to Multiple Networks :
-------------------------------------------
By default each Container will be attached to single network.
More networks can be attached to a Container by connecting to the Network.

	docker network create --driver bridge Bridge1 

Then run the Container using the run command ie

	docker run 

and the Container to the network using the command 
 
	docker network connect Bridge1 C1

How IPv6 Works on Docker :
--------------------------
By default Docker configures the Container networks for IPv4 only.
To enable the IPv4/IPv6 dual stack  --ipv6 flag needs to be applied when starting the Docker Daemon.
Then the docker0 bridge will get an IPv6 link -loacal address.

To assign globally IPv6 address to all the Containers assign the flag  --fixed-cidr-v6 followed by IPv6 Address.

Common Operations :
-------------------
To insepct a network  						:  docker network inspect 
To list all the networks   					:  docker network ls
To create a network							:  docker network create
To connect the Container to the network 	:  docker network connect Bridge1 C1
To disconnect the Container to the network	:  docker network disconect Bridge1 C1
To remove the network 						:  docker network rm Bridge1

Docker Networking with Multiple Hosts :
---------------------------------------
After Docker Swarm



*************************************** 4.Host and NONE Network	(AWS HandsOn) **************************************************************************************

Host Network :
--------------
With Host Network Container is able to share the same Network Namespace as our host where the Container is running.
It is not best practice to run the Containers in the Host Network from security point of view.

To see the Ip Address in Linux 

	ip addr show
	
To view only ipaddress we use the command 

	hostname -i
	
When we start the Container in the same Network Namespace as host we get the same Ip Address.
	
	docker run --it --network host centos /bin/bash
	
Now run the Command 

	ip addr show

It will show the same namespace that the host has i.e Container Network namespace and the Host Network namespace will be the same.

None Network :
--------------
When we start any Container by Default it starts with bridge Network.
If we want to start the Container with no Network at all we use the NONE Network.

	docker run --it --network none centos /bin/bash
	
If we run the command 

	ip addr show
	
Then no Network is attached to the Container and shows only the loopback device.
NONE network isolates the Container and No Netwrok inside the Container and Cannot communicate with other Containers running on the host.

Container Communication :
-------------------------
Containers which are running on the same Network namespace can communicate with each other without any special networking needs.
Create the Network named Bridge1 of type bridge.

	docker network create --driver bridge Bridge1
	
Run the Two Containers with the same network namespace

	docker run -it --network Bridge1 centos bin/bash
	
and run the command

	ip addr show
	
Now ping the IP Address of Container One from Container Two.
This shows that Container with the same network  namespace can communicate with each other.

*************************************** 6.Docker Networking	Overlay Network(SysTechInfra Solutions)	  ***************************************************************



*************************************** 7.Deploying Multiple Spring Boot Microservices using Docker Networking (javainuse)  *****************************************

Create two Microservice named 

1.employee-producer  
2.employee-consumer 

Dockerfile and Docker build commands can be used to create a Single service into the Container.
If the requirement is in such a way that we need to deploy multiple microservices into the multiple Docker Container
and each Container has to communicate with each other.
Here employee-producer will be exposing Rest API which will be consumed by the employee-consumer.

Docker has designed in such a way that Docker Container should have only Single running Service.
Here we will be deploying two micro services into two different Containers and and we make them communicate with each other.

After starting the two containers if we hit the url on the browser i.e http://localhost:8500/consumer we won't get any output.
Here we have to make the Containers communicate with each other.
We wil be using Docker networking to allow multiple Containers to communicate with each other.
Here we need to create our own network and add the Containers to the network.

	docker network create producer-consumer

	docker run --network producer-consumer --name producer -d -p 8501:8500 employee-consumer

	docker run --network producer-consumer --name consumer -d -p 8601:8600 employee-producer

To check the logs of the Container

	docker logs [ContainerName]
	
Example :

To run the Consumer Application 
	
	http://localhost:8501/consumer and in the Consumer Application,to call the producer Application 
	
	String baseUrl = "http://producer:8600/employee";  (Pass the Producer Image Name)

To run the producer Application

	http://localhost:8601/employee
	
