1.AWS Free Tier Account												[25-MAY-2021] (Done)
2.Create an Admin User                                              [25-MAY-2021] (Done)
3.AWS Billing Alert                                                 [27-MAY-2021] (Done)
4.Install AWS CLI                                                   [01-JUN-2021] (Done)
5.Launching EC2 instance                                            [28-MAY-2021] (Done)
6.Launching EC2 instance using CLI                                  [25-MAY-2021] ()
7.Running Web Server in AWS                                         [25-JUN-2021] ()

8.Configuring Elastic Load Balancer									[19-JUN-2021] ()
9.Configuring AutoScaling Group with ELB                            [19-JUN-2021] ()

10.Elastic Beanstalk Deploy Application                             [19-JUN-2021] ()
11.EB CLI for Elastic Beanstalk                                     [19-JUN-2021] ()
12.Deploying App in BeanStalk Using EB CLI                          [19-JUN-2021] ()
13.EB CLI Multiple Environments with GIT                            [19-JUN-2021] ()

14.First AWS CodeCommit Repository                                  [19-JUN-2021] ()
15.AWS CodeCommit Repository From CLI 								[19-JUN-2021] ()
16.Code Pipeline Demo using CodeCommit and CodeDeploy               [19-MAY-2021] ()
17.Code Pipeline using S3 and CodeDeploy                            [19-MAY-2021] ()
18.Setup Continuous Deployment to Elastic Beanstalk                 [19-MAY-2021] ()
19.Running a static Website in AWS S3                               [19-MAY-2021] ()
20.Deploy Docker Container in AWS EBS                               [19-MAY-2021] ()
21.Running Jenkins in AWS Part 1                                    [19-MAY-2021] ()
22.Running Jenkins in AWS Part 2                                    [19-JUN-2021] ()
23.
24.
25.
26.
27.
28.Creating VPC in AWS Part 1										[19-JUN-2021] ()
29.Creating VPC in AWS Part 2										[19-JUN-2021] ()
30.Creating VPC in AWS Part 3										[19-JUN-2021] ()
31.Setup VPC Peering in AWS											[19-JUN-2021] ()

***************************************************************  1.AWS Free Tier Account   **********************************************************

Login into  https://aws.amazon.com/
Select the Region -- Asia Pacific Mumbai.

*************************************************************** 2.Create an Admin User **************************************************************

If we access the AWS account using Email then that will be the Root Account.
Root Account has an access to everything including Billing Information.
Here we need to create an Additional User and start using that User to create the Resources.
Newly created User does not have an access to Billing but has full admin Access.

To create a New User

	Services --> IAM --> Select User --> Add User 
	Enter UserName
	Enter Custom Password
	Attach the Permission Policy
	Select Admin
	Select Access Key and Access Token
	Review and Close.
	
Copy the URL and Login as IAM User.
Now we can see all the services which are similar to Admin User.


***************************************************************  3.AWS Billing Alert  *************************************************************** 

Login as Root User
Billing Dashboard  --> Biling preferences --> Select the Recieve Free Tier Usage Alerts and Recieve Billing Alerts 
Then Select the Manage Billing Alerts Link

Billing Alerts can be done using CloudWatch.
Select the Billing --> Create an Alarm --> Select the Threshold Type --> Static,Greater and 5 USD  --> Next
Select In Alarm, Create a New Topic --> Topic Name and Mail Id --> Click on Create Topic.
Confirm the Alarm for the given MailId.


*************************************************************** 4.Install AWS CLI  ******************************************************************

We can install AWS CLI in multiple ways

1.using pip
2.using virtual Environment
3.using bundled scheduler

Install the python-pip package on your Ubuntu system

	sudo apt install python3-pip

To check whether the python has installed or not we use the below command and It will show the installation folder.

	python3 --version   (will show the python version)
	which python3

To check whethet pip has installed or not we use the command

	which pip
	pip --version
	
To install the awscli we use the command

	sudo apt install awscli
	
When we install AWSCLI it will be installed in bin directory.
To interact with AWS Accountb we need to configure the AWS CLI.
We need to provide the access key,secret key and which region it has to login by default etc.
Command to configure awscli is

	aws configure
	
AKIAQL2FP5VBVVTMYYEK
INF2zeJb4BEaLqH/lDLI+2Eec0qzGR9EyP0ZjQx1
ap-south-1

To check the configuration detaills

To see the list of services that we can communicate with AWS CLI we run the command

	aws help

To know the commands which are required for a particular service we use the command

	aws command help  ie aws ec2 help
	
To view the number of instances in AWS from cli we use the commad

	aws ec2 describe-instances

*************************************************************** 5.Launching EC2 instance ************************************************************
Default VPC :
-------------
Whenever we create an AWS Account,AWS will create a default VPC and we need to place the resources in that VPC.
Here Subnet will be created for each Availability Zone and Region and is attached to the Internet Gateway.
Internet Gateway allows the User to make the Subnet public by providing a Route to the Internet.

Security Group :
----------------
AWS comes with the default Security Group.
Security Group are like firewalls.Inbound Traffic is allowed only for Machines which are in the Security Group.
We attach the Security Group to an EC2 instance.
We can also attach Multiple Security Groups to an EC2 instance.
We can also define which Machines can connect to our Machine on which port etc.
To do this We have to open the Port on our Machine.

Note:
Any machines which are in the same Security Group can communicate with Each Other.

Once we launch the Virtual Machine or an EC2 instance we are going to connect via SSH from our Host Machine.
To connect to the Machine We need to open the Port on our Machine.

Requirement to create an EC2 instance are
1.In which VPC we are going to depoly that
2.Which Subnet
3.Which Availability Zone
4.What Security Group we want to put in that Instance
5.Whether we need a Public IP for that Instance
6.Finally we need to have a SSH key pair to access the EC2 Instance

Step 1:
Create the KeyPair
It will be proviiding a .pem file
Whenever the Machine is launched AWS keeps the public key inside the EC2 instance.
AWS does not store the private key and this is the last chance to store private key. 

Note:
We can also create the new key pair if required.

Step 2 :
Select the instances --> Launch the Instance --> Select the AMI --> 
Herw we can have our own AMI's,community AMI's etc.

Select Amazon Linux -->
Her the root device type is EBS.
Default image includes AWS CLI,Python,Ruby,PERL,Java Repositories include Docker,PHP,MySql,PostgreeSql etc.
Select t2 micro instance --> Depending on what we select we get the CPU,Storage,Memory and so on  --> Next
Select the Number of Instances  ie 1
Selct the Network ie VPC where we want to deploy our EC2 instance and select the default VPC.
Select the subnet as default 
Select Auto Assign Public IP as Subnet City i.e enable Public IP
Select the Enable Terminate Option i.e we cannot terminate the instance by default.
If we enter the Commands in the Advanced Configuration --> User Data --> then those commands will be executed at the time of EC2 instance launch.

Step 3 :
Click on Next Add Storage -->
By default delete on termination is checked ie if we terminate the EC2 instance EBS will also be deleted.
As of now Let it be checked

Step 4 :
Click on Add Tags --> env and web
We can add upto 50 Tags

Step 5 :
Configure the Security Group
Here we can create the New Security Group or use the existing Security Group.
Default Security Group des not have any inbound Rules.
Create the Security Group --> 
Type : SSH
Protocol : TCP
Port : 22
Source : From the Dropdown Select MyIP .Here if we select the Custom IP then it is publicly Available although it has SSH key value Pair.
Finally Review and Luanch.

Step 6:
Here it will ask the Key value pair.
Selct the existing key value pair and launch the Instance.

Step 7:
View the Instances
Here we can create the Alarms but it is cost effective.
If the CPU percent is above 90 percent in an Hour we can raise an Alarm.
Select the Volume --> Here EBS Volume got created.
New Security Group got created.
New Key Pairs got created

Step 8:
Select the Instances --> Copy the IP Address 

Step 9 :
Now Open the Terminal --> Select the pem file
Default user for AWS instance ec2-user@Public IP Address
Run the command user-r

Note:
Whenever we create a Machine we can configure it and we can make the machine into an Image.

Note :
We have an option to enable or disable Auto Assign Public IP.
If we want to create a Virtual Machine or an Instance that does not need an external access (or)
If we don't want to log into those machines from Internet thne disable Auto Assign Public IP.
If we disable those Machines and we only get the private IP Address but not public IP Address.
Machine will not be reachable from the Internet.

Usecase :
Consider the case of Web Two Tier Architecture.
We have Web Tier and Databse Tier.
We put the Database Tier on the Private Subnet so that Database Server cannot be accessed directly.
Web Server will be in the Public Subnet because that needs to be exposed to the public.
Private Subnet needs to be accessed from the Public Subnet.

Finally 
Delete the Instance
Delete the Key Pair
Delete the Security Group

To connect to the EC2 instance from Ubuntu
Navigate to the Folder where the pem file is present
Run the command

	chmod 400 /path to the .pem file
	ssh -i /path to the .pemfile ubuntu@IpAddress
	

*************************************************************** 6.Launching EC2 instance using CLI  *************************************************



 
