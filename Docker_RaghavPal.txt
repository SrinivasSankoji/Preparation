1.What is Docker                               [02-OCT-2019]  ()
2.How Docker Works							   [02-OCT-2019]  ()	
3.Docker Benefits							   [02-OCT-2019]  ()
4.Docker Installation						   [02-OCT-2019]  (Done)
5.Docker Basic Commands						   [02-OCT-2019]  (Done)
6.Docker Images								   [11-MAR-2021]  (Done)			      
7.Docker Containers							   [11-MAR-2021]  (Done)
8.Run Jenkins on Docker Container			   [12-MAR-2021]  ()
9.Docker File								   [12-MAR-2021]  (Done)
10.Docker Compose                              [13-MAR-2021]  (Done)
11.Docker Volume                               [17-MAR-2021]  (Done)
12.Docker Swarm                                [26-MAR-2021]  ()


******************************************************   1.What is Docker :   **************************************************************************** 


******************************************************   2.How Docker Works :  ***************************************************************************


******************************************************   3.Docker Benefits :  ****************************************************************************


******************************************************   4.Docker Installation :  ************************************************************************

If we install the Docker Tool box on Windows Machine,installer automatically installs Oracle Virtual Box to run the Docker Virtual Machine.
Here Docker will be running  inside the Virtual Machine and we interact with Docker Server using Docker Client.
To install Docker we ensure that we have 64 Bit OS and Windows 7 or Higher.

https://docs.docker.com/v17.09/docker-for-windows/install/ -->  Select Install Docker For Windows -->
Get Docker for windows  --> File will be downloaded --> run the installer.

******************************************************  5.Docker Basic Commands :  ***************************************************************************

docker version        		:  To Check the Docker Client,Docker Server(Docker Engine) and so on
docker -v :           		:  To Check the Docker Version
docker --version      		:  To Check the Docker Version
docker info           		:  To get detailed information about the Docker like Number of Containers Running,Paused,Stopped etc
docker --help        		:  To Get information on any other Commands Example : docker images --help
docker login          		:  To Login to the Docker Hub
docker logout         		:  To Logout from the Docker Hub

docker images         		: To see the List of Images
docker pull ubuntu   		: To pull the image form Docker Hub (Sign In to Docker Hub --> Explore --> Search for the Image (Example ubuntu))
docker images -q      		: To get the Docker Image Id
docker rmi [ImageId]    	: To remove the Docker image  based on Image Id before that check there is no Container running for that Image.

docker ps             		: To See the List of Active Containers
docker ps -a 		 		: To See the List of Containers i.e active,closed etc.
docker run ubuntu     		: First It Will check for the Image Locally and If It is Not Found Then it will pull from DockerHub and Start the Container and and will be closed.
docker run -it ubuntu 		: First It Will check for the Image Locally and If It is Not Found Then it will pull from DockerHub and Start the Container in interactive Mode.
docker start [ContainerID]  : To Start the Container
docker stop  [ContainerID]  : To Stop the Container
docker rm [ContainerID]  	: To remove the Docker Container

docker stats 		  		: Memory and Usage Details of Container
docker system df 	  		: Local Disk Usage for Container
docker system prune	  		: To delete all the Unused Images which are not associated with any Network
docker search imageName     : To Search for the Image in the DockerHub

******************************************************  6.Docker Images :  ****************************************************************************************

To pull the image we use the command and it will pull the latest version

	docker pull imageName
	
To pull the image using version

	docker pull ubuntu:18.04

Docker will build an image by reading the instructions inside the Docker File.
Docker images are the templates that can be used to create the Docker Containers.
Container is a running instance of an image.
Single Docker image can be used to create multiple containers.
Docker images can be stored at Local or Remote Registries.

Dangling Images :
-----------------
These are the images that are not tagged with any container or running container.

docker images         					: To see the List of Images	
docker images -q      					: To get the Docker Image Id
docker images -f "dangling=false"		: To get the Images that are not tagged with any container or running container.
docker images -f "dangling=false" -q	: To get the ImageId that are not tagged with any container or running container.

docker run ubuntu								: To start the container from the image
docker run --name MyUbuntu -it ubuntu bash 		: To start the container from the image in an intercative mode and tagging the name to the container
docker inspect 									: To inspect the Docker image
docker rmi ImageId    							: To remove the Docker image based on Image Id before that check there is no Container running for that Image.

******************************************************  7.Docker Containers :  ************************************************************************************

Container is a light weight,stand alone and executable package of a peice of software that includes every thing to to run it.
It contains code,runtime,system tools,system libraries etc.
Containers run on the Machine sharing the same OS Kernel.

Docker Containers are the running instances of Docker Images.
In the Docker Architecture we have a Docker Client,Docker Host(Docker Server) and the Docker Registry.
Dokcer Client is the place where we run the Docker Commands.
Docker Host can be available at our Local System and it contain Dockers Containers and Docker Images.

When we run the command 

	docker pull ubuntu

It actually goes to the Docker Registry and fetches the image and saves it into the Docker Host.
Again we run the command

	docker run ubuntu
	
It actually checks for the image into the local system and If it is available creates the container from the Image.
If it is not available then it pulls the image from the Docker Registry and creates the Container from the Image.

Note : Docker build can be used to create the Docker image using Docker file.

docker build .					: To create the Docker image using Docker file.
docker run hello-world   		: Checks the image in the Docker Server and if not found get it from the Docker Hub and runs the Docker Container.
docker ps -a 		 	 		: To See the List of Containers i.e active,closed etc.
docker pause   [ContainerID] 	: To pause the Container
docker unpause [ContainerID] 	: To unpause the Container
docker stop    [ContainerID] 	: To stop the running Container
docker rm 	   [ContainerID]	: To remove  the Container
docker top 	   [ContainerID]    : To view the top process of the running Container
docker stats   [ContainerID]    : To view the statistics of the running Container
docker attach  [ContainerID]	: To attach to the running Container.(Open ubuntu in the attach mode)
docker kill    [ContainerID]    : To kill the Container
docker history [Image Name]     : To check the history of the Image.

******************************************************  8.Run Jenkins on Docker Container :   *********************************************************************





******************************************************  9.Docker File :  *******************************************************************************************

Docker File is a simple text file which contains an instructions to build an image.
Create a file named Dockerfile.
When we run docker build command,Docker searches for the file named Dockerfile.

mkdir DockerFiles
nul>Dockerfile

DockerFile starts with the instruction FROM
If we want to get the base image from ubuntu

	FROM ubuntu
	
Note : we can also add the empty image to the Dockerfile and add the instructions to the Empty Image.

	FROM scratch
	
We can also add the Author Details to the Dockerfile.

	MAINTAINER srinivas.sankoji<Srinivaschary.chary@gmail.com>
	
To run the Command on the image

	RUN apt-get update
	
If we want to display something on the commad line during Container creation

	CMD ["echo","First Docker Image"]

Note :
------
RUN gets executed during the build of an image where as CMD gets executed during the container creation.

To see the content of DockerFile in CommandPrompt

	type DockerFile
	
To build the image,navigate to the location where the DockerFile is present or . (Current Directory)

	docker build .
	
we can also tag the image using -t .

	docker build -t FirstImage:1.0 .
	
To run the image 

	docker run [imageid]
	
Reference Sites :

https://github.com/wsargent/docker-cheat-sheet#dockerfile

https://docs.docker.com/engine/reference/builder/#environment-replacement

******************************************************  10.Docker Compose :  **************************************************************************************

Docker Compose is a tool for defining and running multi container Applications.
Here we use yaml file i.e docker-compose.yml to configure Application Services.
We can start all the services with a single command  : docker compose up	
we can stop all the services with a single command : docker compose down
We can scale up selected services when required.

In real world we need to create different services that has to comunicate with each other.
Best suitable example is MicroServices.
We have different services like 

Account Service
Product Service
Cart Service
Order Service

In MicroServices each Application will have seperate Service i.e seperate database and seperate Server.
Whenever we make change in one module then it won't reflect the other module.
Scaling up is very efficient.
We can also increase the capacity of the services based on requirement.
This kind of Architecture can be implemented by using Docker Compose.

Step 1:
To check whether the docker compse is installed or not

	docker compose -v
	
Step 2:
create dockoer compose file in any location 

	docker-compose.yml
	
Requirement is to create a basic Web Application.
For that we need basic WebServer and the Database.

Step 3:
To check the validity of the file using the command

	docker-compose config
	
version : '2'

services :

  web:
    image: nginx
  database:
    image: redis

Step 4:
Run the docker compose by using the command in the detached mode

	docker-compose up -d

To stop the services

	docker-compose down
	
Step 5:
To expose the web server 

	 ports:
   -"9090:80"
   
Expose the port 80 of the nginx web server to the 9090 port of Application Service.
 
version : '3.3'
services :
  web: 
    image: nginx
    ports:
        - "9090:80"
  database:
    image: redis
	
In the Browser http://localhost:9090/ NGinx is up and running.

Step 6 :
To scale the services 

	docker-compose up -d --scale database=4

****************************************************** 11.Docker Volume **************************************************************

Whenever we create a Container there has to be some place where the data inside the Container will be stored.
If we are not providing any explicit data store then it gets stored within the Container. 
If we delete the Container then the data stored inside the Container will be also be deleted.
Default volume of Container is associated with Docker Container Life Cycle.
When the Container is created it creates the File sytem similary when the Container is deleted it deletes the File system.
This behavior is suitable for stateless Applications like web Applications and not suitable for stateful applications like Database Applications.
Even If the Container is deleted we want to retain the data so that we can spin up the new Container where the previous Container is left.
Whenever we work in any Enterprise Application we actually doesn't want to delete the data inside the Container when the Conatiner is deleted.
We may also require more Containers that can share the same data.

Advantages of Volumes :
-----------------------
Volumes can be used to decouple the Container from the storage.
Share Volume among different Containers.
Attach Volume to the Container.
On Deleting Container,Volume does not delete the Data.

docker volume create    					: To create docker volume  VOL1
docker volume ls							: To see the List of volume
docker volume inspect [voluemName]			: To insepect the Docker Volume
docker volume rm [voluemName]				: To remove the Docker Volume
docker volume prune 						: To remove the unused Volumes which are not used by any Container

Example :
---------
To create the volume VOL1

	docker volume create  VOL1
	
Note :
Newly created Volume is stored inside /var/lib/docker/volumes/
Default volume is created inside /var/lib/docker/volumes/4a22c4eba931010edc6e081129791065e3aab81969f9ca9a057c5dc41fcb9270/_data
	
To inspect the volume 

	docker volume inspect VOL1

Pull the Jenkins Image and run it with the Docker Volume VOL1

	docker run --name myjenkins -p 8081:8080 -d -v VOL1:/var/jenkins_home jenkins/jenkins
	
Now create the new Job in Jenkins
	
	TestJob
	
Now start another instance of the Jenkins by attaching the same Volume
	
	docker run --name myjenkins1 -p 8082:8080 -d -v VOL1:/var/jenkins_home jenkins/jenkins
	
and login with Admin and passowrd in the Jenkins Console.
Here the volume is shared between the Two Containers.

Note :
------
Volume drivers allows us to store Volumes on remote hosts or cloud providers.
We can also use the BindMount i.e a File or directory on the Host Machine is mounted into a Container.

In case of Bind Mount we use a Physical Location instead of Volume.

	docker run --name myjenkins2 -p 8083:8080 -d -v /media/bhaumik/PERSONAL/DockerVolumes:/var/jenkins_home jenkins/jenkins
	

******************************************************   12.Docker Swarm :  ***************************************************************************************

Docker Swarm is a group of Machines that are running Docker.Group of Machines can be considered as Cluster.
In case of Docker swarm we have multiple Nodes and One Node is the Swarm Manager and the other Nodes are worker Nodes.
We can have this kind of Architecture where we have multiple Machines that are running Docker and are Connected with each other.
We can manage all these nodes from a Single Machine.
Consider the scenario where we have a swarm Manager and 3 worker nodes.
we create the services in the worker nodes and all the services are managed by the single machine which is a swarm  manager.

Docker swarm is a tool for Container Orchestration.
Consider the scenario where we have 100 Containers

1.Health check for every Container
2.Ensure all the Containers are up on every system
3.scaling the Containers up or down based on the load
4.Adding updates/changes to all the Containers

All the above tasks are tedious if we do it manually.
Orchestration is nothing but managing and controlling multiple Docker Containers as a Single service.
Other Orchestration tools available are Kubernetes,Apache Mesos.

Set up the Docker Machine :
---------------------------











	






