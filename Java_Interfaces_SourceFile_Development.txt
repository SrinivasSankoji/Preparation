1.Introduction										[24-DEC-2020]  (Done)
2.interface methods                                 [24-DEC-2020]  (Done)
3.interface naming conflicts                        [24-DEC-2020]  (Done)
4.Marker interface                                  [24-DEC-2020]  (Done)
5.adaptor classes                                   [24-DEC-2020]  (Done)
6.Java source file structure                        [24-DEC-2020]  (Done)
7.import statement                                  [24-DEC-2020]  (Done)
8.static import                                     [24-DEC-2020]  (Done)
9.extended for loop                                 [24-DEC-2020]  (Done)
10.Classpath                                        [24-DEC-2020]  (Done)
11.Jar file Creation                                [24-DEC-2020]  (Done)
12.System properties                                [24-DEC-2020]  (Done)
13.jar vs war vs ear                                [24-DEC-2020]  (Done)
14.web Application vs Enterprise Application        [24-DEC-2020]  (Done)
15.Web server vs Application Server                 [24-DEC-2020]  (Done)
16.Classpath vs Path                                [24-DEC-2020]  ()
17.JDK vs JRE                                       [24-DEC-2020]  ()
18.Object Creation Ways  (geeksforgeeks)			[25-AUG-2020]  (Done)
19.Class Loaders
20.Abstract Class and Methods(crunchify)

*************************************************************  1.introduction	***************************************************************************************

Any service requirement specification is by default considred as an interface.

Definition One :
----------------
JDBC API acts as a requirement specification to develop database driver.
To develop our own database driver we have to implement JDBC API.

Servlet API acts as a requirement specification to develop web server.
Any web server vendor has to provide implementation to develop web server.

Definition Two :
----------------
Client come up with the set of services.
From the Client point of view,Interface defines the set of services what the Client is expecting where as
From the Service provider point of view Interface defines the set of services what he is offering.

Here Interface acts as a contract between Client and Service.

Definition Three :
------------------
every method present inside interface should be abstract whether we declare it or not.
Hence interface is considered as pure abstract Class.

whenver we are implementing an interface for each and every method we have to provide implementation otherwise declare the class as abstract.
Every method present inside interface is by default public and abstract.

extends vs implements :
-----------------------
Class can extend only only one class at a time.
Class can implement any number of interfaces simultaneously.
interface can extend any number of interfaces simultaneously.
Class can extend only one Class and implement any number of interfaces simultaneously.

*************************************************************  2.interface methods  *******************************************************************************

every method present inside interface is public and abstract.
To make this method available to every implementation class declared the method as public.
Here Child class is responsible to provide implementation.

An interface can contain variable.
Main purpose of interface variables is to define the requirement level constant.
every variable present inside interface is by default public static and final whether we are declaring it or not.
variables present inside interface should perform initialization at the time of declaration only other wise we get CTE.

*************************************************************  3.interface naming conflicts  ********************************************************************

method naming conflicts :
-------------------------
If two interfaces contains a method with same signature and same return type then in the implementation class only one method implementation is enough.
If two interfaces contains a method with same signature but different argment types then in the implementation class we have to provide implementation for two methods.
If two interface contains a method with same signature and different return types, then it is impossible to provide implementation in the same class.
we have to provide different implementation class for the two interfaces.

Note :
------
Java class can implement any number of interfaces simultaneously except interface contains a method with same name but different return types.

variable naming conflicts :
---------------------------
every variable present inside interface is public static final.
If Two interfaces contains a variable with same name then we may get the variable name conflicts.
we can resolve them by using Interface Names.

*************************************************************  4.marker interface  ********************************************************************************

An interface does not contain any method and by implementing that interface if our object gets some ability then it is said to be Marker interface.

SingleThreadedModel interface
RandomAccess interface
Clonable interface
Serializable interface

Marker interface is also known as Marker or Tag or Ability interface.

By implementing Serializable interface we can be able to send the object across the network and we can save the object to the file.
By implementing Clonable interface our object can be able to produce exactly duplicate object.

To send the object across the network 3 to 4 langauges are required and several line of coding is required.
If some one is there to provide the ability to send the object across the network then implementation is not required.
JVM is responsible to provide the ability.
It is also possible to create marker interface but customization of JVM is required.

*************************************************************  5.adaptor classes  **********************************************************************************

Adaptor class is a simple Java class that implements an interface with an empty implementation.
Creating an obejct for Adaptor class is not required and declared them as an abstract.

Note :
------
GenericServlet,HttpServlet are Adaptor Classes in Servlet.

interface vs abstract class :
-----------------------------
interface :
-----------
1.If we don't know about implementation and we have a requirement specification we go for interface.
2.every method present inside interface is by default public and abstract.
3.we cannot declare interface method with other modifiers except public and abstract.
4.every variable present interface is public,static and final.
5.For interface variables we should perform initialization.
6.Inside interface we cannot take instance and static blocks.
7.Inside interface we cannot take constructor.

abstract class :
----------------
1.If we know about implementation but not completely then we go for abstract class.
2.There is no restriction for methods present inside abstract class.
3.we can declare abstract methods with other modifiers.
4.There is no restriction for variables present in abstract class.
5.It is not required to perform initialization for abstract variables.
6.Inside abstract class we can take both static and instance blocks.
7.Inside abstract class we can take constructor.

Note :
------
Abstract class constructor will be executed whenever we are creating child class object to perform initialization of child class object.

*************************************************************  6.Java source file structure  ********************************************************************

A Java program can contain any number of java classes but atmost one class can be declared as public.
If there is a public class then name of the class and name of the program should be same other wise we get CTE.
If there is no public class then we can give any name for the source file and there are no restrictions.

Note :
------
It is highly recomended to write only one class as per source file and name of the program should be same as name of the source file.
Advantage is it increases the readability and maintainability of the program.

*************************************************************  7.import statement  *****************************************************************************

Whenever we are using import statement it is not required to use the fully qualified name of the class and we can use the Class or Interface name directly.
While resolving classname compiler always consider the precedence in the following order 

1.Explicit class import
2.current working directory (same package)
3.implicit class import

Difference between include<stdio.h> and import statement :
----------------------------------------------------------
Whenever we are executing the above line i.e #include<stdio.h> all the header files i.e input and output Header files will be loaded at the time of begining i.e Static Loading.
In case of import that particular .class files will be loaded  i.e Load on Demand.


*************************************************************  8.static import   ******************************************************************************

Whenever we are using static import it is not required to use the class name and we can access the static methods directly.

	public class Test {
	static String name="Bhaumik";
	public static void main(String[] args) {
		System.out.println(Test.name.length());
	}
	}
	
Test is the name of the Class.
name is static variable of type String present in Test Class.
length() is present in String Class.

System.out.println() :
----------------------
System is a class present in java.lang package.
out is a static variable of type printStream present in System class.
println() is a method present in printStream class.

while resolving static members compiler always gives the following precedence.
current class static members
explicit class import
implicit class import

*************************************************************  9.extended for loop  ****************************************************************************

Extended for loop introduced in 1.5 version.
It is the most convenient loop to retreive the elements of Arrays and Collections.

It is not a general purpose loop.
It is applicable only for Collections and Arrays.
By using for each we can retreive all the elements of Arrays and Collections and we cannot retreive particular set of values.

*************************************************************  10.Classpath  ***********************************************************************************

we use javac command to compile a single or group of java source files.

	javac [options] A.java
	
Here the options are 
-d
-version
-cp/-classpath
-source

we use java command to run a single .class file

	java [option] A.class
	
Here Options are
-version
-cp/-classpath
-ea/-da/-esa/-dsa
-D
-verbose
	
We can compile any number of source files where as we can run only one .class file.

Classpath :
-----------
Classpath represents the location where the .class file is present.
javac and JVM will use the classpath to locate required .class files.
By default javac and JVM will look for the .class files in the current working directory.
By setting the classpath we are conveying javac and JVM that required .class files are present in this location.

Various ways for setting Classpath :
------------------------------------

Environment Level :
----------------------
Required whenever we are installing permanent software in our system.
This way of setting Classpath is preserved even when the Syatem restarts also.

Command Prompt Level :
----------------------
From the command prompt we can set the classpath by using the set command

	set classpath="";
	
This way os setting the classpath will be preserved only for that particular command.
Once the Command Prompt closes Classpath will be lost Automatically.

Command Level :
---------------
Once the Command completes the executes then the Classpath will be lost.
By using the command we set the Classpath.

	java -cp """;
	
Note :
------
Once we set the Classpath,JVM will not search for the .class files in the current working directory and 
it searches for the required .class files in the Classpath.

If several dependent .class files are required never recomended to set the classpath individually.
we have to group all the .class files into a single zip file.
zip file is nothing but jar file.
To develop a Servlet all the required dependencies are present in servlet-api.jar file.

*************************************************************  11.Jar file Creation  ******************************************************************

To create a Jar File

	jar -cvf Test.jar A.class
	jar -cvf Test.jar A.class B.class

To extract the Jar File

	jar -xvf Test.jar 
	
To display the contents of the Jar file and not to extract

	jar -tvf Test.jar
	
If the .class file is present in remote machine and has to bes used in cleint machine
1.Send the request to the server machine and get the .class file.
2.Make the jar file available to the Client i.e download the jar file.


	JDK --> JRE --> lib --> ext  --> *.jar

If we place the jar file in the above location we are not required to set the classpath explicitly by default.
It is by default available to the JVM.

************************************************************* 12.System properties  ***************************************************************** 

For every System some persistent information will be maintained in the form of System properties.
These may include OS Version,Java Version,JVM Vendor,URL,User Country etc.
We can also get and set the System Properties.

************************************************************* 13.jar vs war vs ear  *****************************************************************

Jar file contains only .class files.
War file represents a web Application that consists of Servlet,JSP,HTML Pages,JavaScript Files etc.
If the Web Application is present in war file then Project delivery,transportation,deployment will be easy.
Ear file represents any Enterprise Application developed by Java which consists of Servlet,JSP,EJB and JMS Components etc.


*********************************************** 14.web Application vs Enterprise Application  *******************************************************

Web Application contains only web related technologies like Servlet,JSP,HTML,JavaScript etc where as
Enterprise Application can be developed by any technology from Jave i.e 
J2EE,EJB,JMS Component etc.
J2EE compatible Application is Enterprise Application.

*********************************************** 15.Web server vs Application Server  ****************************************************************

Web Server provides an environment to run the Web Application.
Web Server provides only support for web related technologies like Servlet,JSP HTML,JavaScript etc.
Some of the Web Servers are Tomcat,Nginix etc.

Application Server provides an environment to run Enterprise Application.
Application Server provide support for any technology like Servlet,JSP,EJB,JMS etc.
Some of the Application Server are
WebLogic
WebSphere
JBoss
GlassFish etc.

***********************************************  16.Classpath vs Path  *********************************************************************************







***********************************************  17.JDK vs JRE  ****************************************************************************************


	
*********************************************** 18.Object Creation Ways  (geeksforgeeks) ***************************************************************

The no of ways using which we can create Object are

1.new keyword
2.newInstance
3.clone()
4.deserialization
5.newInstance() of Constructor class

2.newInstance() :
-----------------
If we know the name of the Class and It has default Constructor then we can create an Object of the Class using newInstance().
Class.forName actually loads the class but doesn't create the Object.
To create an Object of the Class we use newInstance() method of the Class.

	public class NewInstance {
	String value="hello";
	public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
		Class cls=Class.forName("com.javainterview.objectcreation.NewInstance");
		NewInstance demo=NewInstance.class.newInstance();
		System.out.println(demo.value);
	}
	}
	
3.clone() :
-----------
Whenever clone() is called on any Object,JVM actually creates a new Object by copying all the contents of the previous Object.
Creating an Object usig clone() does not invoke any Constructor.
To use clone() Class must implement Cloneable Interface.

	public class ClonableInstance implements Cloneable {
	protected Object clone() throws CloneNotSupportedException {
		return super.clone();
	}
	public static void main(String[] args) throws CloneNotSupportedException {
		ClonableInstance instanceOne=new ClonableInstance();
		ClonableInstance instanceTwo=(ClonableInstance)instanceOne.clone();
		System.out.println(instanceOne.hashCode());
		System.out.println(instanceTwo.hashCode());
	}
	}

4.deserialization :
-------------------
Whenever we serialize and deSerialize the Object new Object gets created.
While performing deserialization JVM does not use any Constructor to create the Object.
To deSerialize an Object,an Object must implements Serializable interface.

	public class DeSerializableInstance {
	public static void main(String[] args) {
		User user=new User();
		user.setName("Srinivas");
		user.setId(36);
		try {
			FileOutputStream fos=new FileOutputStream("user.ser");
			ObjectOutputStream oos=new ObjectOutputStream(fos);
			oos.writeObject(user);
			oos.close();
			
			FileInputStream fis=new FileInputStream("user.ser");
			ObjectInputStream ois=new ObjectInputStream(fis);
			User user2=(User)ois.readObject();
			ois.close();
			
			System.out.println(user.hashCode());
			System.out.println(user2.hashCode());
		}
		catch (Exception e) {
		}
	}
	}
	
5.newInstance() of Constructor class :
--------------------------------------
This is similar to newInstance() of a Class.
There is one more newInstance() in java.lang.reflect.Constructor class using which we can create new Object.
newInstance() of Class internally uses newInstance() of Constructor class.
Both newInstance() are Reflective ways to create an Object.

	public class ConstructorInstance {
	public static void main(String[] args) throws NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		Constructor constructor=ConstructorInstance.class.getDeclaredConstructor();
		ConstructorInstance instance=(ConstructorInstance) constructor.newInstance();
		System.out.println(instance.hashCode());
	}
	}






 


	

	



