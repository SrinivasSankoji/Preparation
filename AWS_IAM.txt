1.IAM Roles and Policies                               													[22-MAR-2021]  (Done)
2.IAM user Roles with EC2 CLI                         													[22-MAR-2021]  ()
3.AWS IAM and Its Features 									(Prabhu Rajendran)		   					[22-APR-2021]  ()
4.AWS IAM Deep Dive 										(Abhishek Veeramalla)						[01-SEP-2024]  (Read)
5.AWS IAM Roles                     						(spacelift)									[01-SEP-2024]  ()
6.AWS IAM Roles Usecases            						(Nazreen Mohamad)                           [12-SEP-2024]  (Done)
7.Difference Between IAM Roles and Policies in AWS			(Punyakeerthi BL)                           [12-SEP-2024]  (Done)

#####################################################################  1.IAM Roles and Policies   ##############################################

IAM stands for Identity and Access Management which allows the user to define their access and their level of access.
IAM is a part of security.
Consider the scenario we have created an AWS account for a Company and have to do the complete set up.
First thing we are going to look into is IAM.
This is the place where we are going to add the users to have an access to AWS Account and which user have what level of access.

Note :
IAM is not only for how the users get access to do things in AWS but also how we grant machines to talk to each other.

Advantages of IAM :
-------------------
1.Centralized control of AWS Account.
2.Shared access for an AWS Account (Multiple Administrators)
3.Granular permissions (Until what level user can have the specific access.we can also define the specific documnet)
4.Identity Federation
If the company has more than 1000 users it is difficult to add each user in IAM section.
Here we can integrate with the LDAP so that all the users can use the userId and password of the company itself.
We can also do the Identity Federation with Facebook and LinkedIn.

5. MultiFactor Authentication (Two Level Authentication)
6.Provide temporary accss for users/devices and services wherever necessary
As a Company we might get the requirent that we can hire some third party engineer to resolve the issue.
Here he willget the Temporary access until the work is done.

7.Allows us to set up our own password rotation policy.
Password should be case sensitive,atleast contain one capital letter etc.

8.Intergrates with many different AWS Services 
9.Supports PCI DSS Compliance

Terms in IAM :
--------------
Users
Groups
Roles
Policies

Users :
-------
IAM users can access the AWS Management Console to perform tasks interactively.
IAM users can also make programmatic requests to AWS services using the API or CLI when they have appropriate access keys.
An IAM user is created within a single AWS account and is associated with that account only.
An IAM user consists of a username and a password to sign into the AWS Management Console. 
However, the IAM user can also have other security credentials like access keys for programmatic access.
An IAM user can have up to two active access keys at any given time, which can be used for programmatic access via the API or CLI.

Groups :
--------
Collection of users under one set of permissions whcih makes easier to manage users instead of giving individual access.
Any User in the Group automatically will have the permissions that are assigned to the group.
Group is the only way to attach policies to multiple users at a time.

Roles :
-------
Role is an identity with permission policies that determines what I can do and cannot do in AWS.
Role doesn't have any credential associated with it.
User can assume a Role temporarily and can take different permissions for a specific task.
Role can also be assigned to a Federated User who can sign in using third party provider instead of AWS.

We can create Roles and assign them to AWS Resources.
Groups can be assigned to the users where as Roles can be assigned to the services.

Policies :
----------
It is a document that defines one or more permissions.
what kind of permission that a specific User will have,Group will have,Role will have.
Policies i.e. A permission document that can be attached to User,Group,Role.

Consider the scenario where in EC2 we will launch virtual servers and in S3 is a Storage.
If EC2 wants to communicate with S3 in a secured way,provide the Role to EC2.

##################################################### 3.AWS IAM and Its Features (Prabhu Rajendran)  #########################################

Consider the scenario where we don't have IAM.
Here Organization has to create multiple User Accounts and each has it's own billing and subscription to AWS Accounts.
Without IAM we cannot control Tasks that a User can do.
IAM enables the Organization to create multiple Users,each with it's security credentials,controlled and billed to single AWS Account.

1.AWS Account Root User
2.Features of IAM
3.What is IAM users and Why 
4.What is IAM Groups and Why 
5.What is IAM Roles and Why
6.Important Terms associated with IAM Roles
7.IAM Roles and Use Cases
8.Creating IAM Roles 

1.AWS Account Root User :
-------------------------
When we first create an AWS account This identity is called Root User.
This has complete access to all the AWS services and resources.
Root User can also change the password and view the billing Information.

2.Features of IAM :
-------------------
Same as Advantages of IAM.
IAM identities are categorized into three types
IAM Users
IAM Groups
IAM Roles

3.What is IAM users and Why :
-----------------------------
End user who is going to access the AWS Management console for interactive Tasks.
User can make programatic requests to AWS services using the API or CLI.
Each User is associated with one and only one AWS account.
User consists of name and password to sign into AWS Management Console.
User can contain upto two access keys that can be used by API or CLI.

Creating an IAM User (AWS Management Console):
Task to be completed

4.What is IAM Groups and Why :
------------------------------
Collection of Users under one set of permissions whcih makes easier to manage Users instead of giving individual access.
Any User in the group automatically has the permissions that are assigned to the group.

Creating an IAM Group (AWS Management Console) and attache policies required to group.
Task to be completed

5.What is IAM Roles and Why :
-----------------------------
Role is an Identity with permission policies that determines what I can do and cannot do in AWS.
Role doesn't have any credential associated with it.
User can assume a Role temporarily and can take different permissions for a specific task.
Role can also be assigned to a Federated User who can sign in using third party provider instead of AWS.
We can create Roles and assign them to AWS Resources.
Groups can be assigned to the users where as Roles can be assigned to the services.

When to create IAM User or when to Create IAM Role :
Task to be completed

6.Important Terms associated with IAM Roles :
---------------------------------------------
Delegation :
Delegation is the process of granting permissions to the user to access the AWS resources that we control.
Delegation is set up by the trusted Account(who owns the AWS resources) and trusting account (who needs an access to the resources).

Trusted and Trusting are categorized into three types :
1.Same Account.
2.Two differnt Accounts by same Organization.
3.Two different Accounts owned by different Organizations.

Permission Policy :
Grants the User with the Role the needed permissions to carry out the intended tasks.

Trust Policy :
Speicfies which trusted account member is allowed to use this role.

Federation:
process of creating trust relationship between external service provider and AWS.

Permision Boundary :
It is an advanced feature of AWS and limit the maximum permission to the Role that has.
It can be applied to both IAM User and IAM Role.


7.IAM Roles and Use Cases :
---------------------------



8.Creating IAM Roles :
----------------------

##################################################### 4.AWS IAM Deep Dive (Abhishek Veeramalla) #####################################################




#####################################################  6.AWS IAM Roles Usecases (Nazreen Mohamad) ###################################################

IAM Roles and policies are the fundemental building blocks in AWS for managing access and permissions.
IAM Roles are an AWS Identity with the permission policies that determines what the identity can do and cannot do.
Roles does not have long term credentials associated.
When we assume a Role it provides the temporary security credentials.

IAM Policies defines the permissions when attached to an Identity or resource.
Policies defines who can perform which action on what resources.

Consider the scenario of an EC2 instance wants to read the data from the S2 Bucket.
Here we can directly attach a policy to an EC2 instance stating that

	"Allow this EC2 instance to read from this specific S3 bucket".
	
Problem with the above approach is that if the number of EC2 instances increases, managing individual policies becomes cumbersome.
To resolve this we create a Role with the policy that allows to read the data from S3.
This Role can be assumed by an EC2 instance.

Roles and Policies are not mutually exclusive and they are designed to work together.
Policies are the basis for defining permissions where as Roles offers a secure way to grant those permissions to entities like EC2 or Lambda Function.
 
##################################################### 7.Difference Between IAM Roles and Policies in AWS (Punyakeerthi BL) #############################

Advantages :
------------
By using Temporary credentials, the risk of unauthorized access is reduced.
Roles eliminate the need to manage long-term credentials for users and applications.
Roles can be granularly controlled using permissions policies.
Roles can be used to grant access to resources in different AWS accounts.

How IAM Roles Work :
--------------------
An IAM administrator creates a role and attaches necessary permissions policies.
The administrator defines who or what can assume the role using a trust policy.
Requests an Entity (user, application, or service) to assume the role.
AWS generates temporary security credentials (access key ID, secret access key, and security token) for the Entity.
The Entity uses the Temporary credentials to access AWS resources based on the role’s permissions.