Java 8 Concurrency Utilities  :
*******************************
1.BlockingQueue
2.ArrayBlockingQueue
3.DelayQueue
4.LinkedBlockingQueue
5.PriorityBlockingQueue
6.SynchronousQueue
7.BlockingDeque
8.LinkedBlockingDeque
9.ConcurrentMap
10.ConcurrentNavigableMap
11.CountDownLatch
12.CyclicBarrier
13.Exchanger
14.Semaphore
15.Java ExecutorService							[07-AUG-2019]  (Done)
16.Java Callable								[07-AUG-2019]  (Done)
17.Java Future									[07-AUG-2019]  (Done)
18.Thread Pool Executor  						[07-AUG-2019]  (Done)
19.ScheduledExecutorService
20.Java Fork and Join using ForkJoinPool
21.Lock
22.ReadWriteLock
23.AtomicBoolean
24.AtomicInteger
25.AtomicLong
26.AtomicReference
27.AtomicStampedReference
28.AtomicIntegerArray
29.AtomicLongArray
30.AtomicReferenceArray

Callable Controller                           	[05-JAN-2020]  (Done)
Async in Spring Boot							[05-JAN-2020]  ()
Spring Web Flux									[05-JAN-2020]  ()
Reactive Programming							[05-JAN-2020]  ()
Reactive System with Eclipse Vert.X
														
************************************************************  Thread Pool Executor   *********************************************************************

Java Thread Pool Manages the Pool of Worker Threads.
It Contains a Queue(Runnable Threads) that contains tasks waiting to get Executed.
We Can also Use ThreadPoolExecutor to create a Thread Pool in Java.
Worker Threads execute the Runnable Threads from the Queue.
Executors is a Utility Class that Provides useful methods to work with ExecutorService,ScheduledExecutorService,ThreadFactory and
Callable Classes through various Factory Methods.

ExecutorService :
*****************
We Can Create a Fixed Thread Pool By Using Executors Framework i.e 
ExecutorService executor = Executors.newFixedThreadPool(5);

We Can Execute The fixed Thread Pool Using execute Method
execute(runnable).

Executors Class Provide the Simple Implementation of ExecutorService using ThreadPoolExecutor.
ThreadPoolExecutor Provides much more feature than ExecutorService.
By Using ThreadPoolExecutor we can Specify the Number of Threads that will be Alive when We Create.
By Using ThreadPoolExecutor we can also limit the Size of the Thread Pool.

By Using ThreadPoolExecutor we can also Create our Own RejectedExecutionHandler Implementation and override the Method
that can be used to handle the Threads that Cannot Fit in the Worker Queue.

rejectedExecution(Runnable r, ThreadPoolExecutor executor) 

ThreadPoolExecutor have Several Methods that can be used to find out the Current State of the Executor,
Active pool Size,Thread Count ,Task Count and so on.
ExecutorService Provides an Asynchronous Mechanism which is capable of Executing Tasks Simultaneously in the BackGround.


Creation of Executor Service :
------------------------------
ExecutorService executorService=Executors.newFixedThreadPool(5);

The Above Statement Creates a Fixed Thread Pool Size of 5.
Here Each Thread acts as a Worker Threads that accepts Runnable Implementation.

executorService.execute(runnable);
when we call the execute(),current runnable job is submitted to one of the Worker Threads in the Thread Pool.

executorService.shutDown();
removes all the Threads from the Thread Pool.

We can Implement Executors Either By Using ThreadPoolExecutor or ScheduledThreadPoolExecutor.

There are Multiple Ways of Creating ExecutorService.

ExecutorService executor = Executors.newSingleThreadExecutor();
ExecutorService executor = Executors.newFixedThreadPool(5);
ExecutorService executor = Executors.newScheduledThreadPool(5);

1.execute(Runnable) :
---------------------
execute() Accepts the Runnable Object and it executes it asynchronously.
There is no way of obtaining the result of the executed Runnable.We Have to Use Callable to get the Result of Runnable Object.

2.submit(Runnable) :
--------------------
submit() accepts the Runnable Object similar to execute() but returns the Future Object.
By Using Future Object we can check whether Runnable has Finished the Execution or Not.
If the Task has Finished Successfully Then it returns null.

3.submit(Callable) :
--------------------

4.invokeAny(...) :
------------------


5.invokeAll(...)
----------------

Runnable vs. Callable :
***********************
Both Runnable and Callable Interface represents a Task That can be executed Concurrently on a Thread or ExecutorService.
Both Interfaces has only Single Method.

public interface Runnable 
{
		public void run();
}

public interface Callable 
{
  Object call() throws Exception;
}

The Difference here is Callable Interface call() returns an Object and throws an Exception.
If we Submit a Task to the Java ExecutorService and Expect the Result form the Task,then we need to Implement Callable Interface.

shutdown() :
-------------
To terminate the Threads(Worker Threads) inside the Executor Service,we call the shutDown().
shutDown() will not shutDown immediately but it wont accept new Tasks.
All The Tasks will be executed before Calling the shutDown().

    executorService.shutDown();

shutdownNow() :
---------------	
If we want to shutDowm the ExecutorService Immediately,then call the shutdownNow() on the Executor Service.
All the Executing Tasks will e Closed Immediately and there is no Guarantee of Execution of the Tasks.



												
****************************************************  Java Callable Interface  *****************************************************************

Callable Interface Represents a Asynchronous Task Which will be executed on a Separate Thread or Java ExecutorService.
It Contains a Single Method 

interface Callable 
{
  Object call() throws Exception
}

When the Task is Executed Asynchronously ,The Result is Propagated Back to The Caller via Java Future.
Callable Can Also throw the Exception if there is a Failure in Executing the Task.

public MyCallable implements Callable<String>
{
	public String call() throws Exception
	{
		return String.valueOf(System.currentTimeMilliSeconds());
	}
}

****************************************************  Java Future Interface  *****************************************************************

Future Interface Represents the Result of The Asynchronous Task Computation.
When the Task is Executed in the Thread Pool Java Future Object is returned.
Java ExecutorService returns the Java Future Object with some of their Methods.

boolean cancel(boolean mayInterruptIfRunning) :
-----------------------------------------------

V  get():
---------
Java Future Object returns the result of an Asynchronous Task.
To Obtain the result we call either of the two get Methods.
Here get() returns an Object but the Return Type can also be Generic Type and not just an Object.
if we call the get() before the Asynchronous Task has Completed ,get() will block until the Result is Ready.

Object result=future.get();

V  get(long timeout, TimeUnit unit) :
-------------------------------------
This is an Overload version of get() that accepts the timeout Parameter.
If the Asynchronous task has exceeded the Passed time then it will throw TimeOutException.

boolean isCancelled() :
-----------------------
we can check if the Task is Canceled By Using isCancelled()
if(!future.isCancelled())
{
  Object result=future.get();
}

boolean isDone():
-----------------
we can check if the Task is done By Using isDone()
if(future.isDone())
{
  Object result=future.get();
}


*******************************************************  Java Fork and Join using ForkJoinPool  *******************************************************





*******************************************************  Java Memory Model  ***************************************************************************


Spring Web Flux and its Usage  :
********************************









