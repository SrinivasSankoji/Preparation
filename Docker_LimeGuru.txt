1.Introduction  
2.Docker File and Docker Image   
3.Docker Architecture 
4.Open COntainer Initiative											[12-MAR-2021]  ()	

******************************************************** 1.Introduction  ************************************************************

Before going to Start Docker,we need to know to how the Software development takes Place in the IT Industry.
When ever we are going to Start any Application,how the Software Development Life Cycle Will be and 
How Docker Changes the entire Life Cycle of Software Development.


Software Development Life Cycle :
---------------------------------
When ever we Start any Application we first design the Application.
After designing the Application we need to define the dependencies i.e Technologies,Frameworks used to develop the Applications.
Once the Technologies are defined then we Start the Development.
Once the Development is done in Local Environment and then code is moved to Development and to Production Environment.
The Dependencies defined during the Local Development phase Should be available in all Phases of the Environment.
If any Dependency is missed in any of the environment then the Application might not Work and here The dependencies may be Java ,Servers,Frameworks etc.
We might reach the Infrastructure team to set up all the dependencies in all the Environments.
Here adding dependencies is not a one time task and it keep on changes when the Application is in Development.
The above problem can be resolved by using Docker.
Docker provides a solution by keeping all the dependencies at one place and 
it is the responsibility of Docker that all the dependencies will be available in all the Environments.
Here no need to approach any of the infrastructure team to add any new Dependencies.
Add the Dependencies to the Docker and Docker will take care of availability of all the dependencies in all the Environments.

How Docker Works :
------------------
Docker solves the problem of managing all the dependencies like Tools,Libraries,Frameworks Set up etc. by using Containers and will make it available to the Software Program.
Docker is a Containerized Execution i.e 
For Example we require (Java,HttpServer and Tomcat Server) the dependencies to run the Application.
Define these 3 dependencies as a part of Metadata and Docker will create a container inside the Local Server and it will install all the Dependencies inside the Container.
Now the code we have written,deploy it inside the Container along with the dependencies.
The Application will run because all the required dependencies to run the Application are part of Container now.
Now We have another Server for Testing Environment.
Here Docker Will Create the Container in the Testing Server with all the Dependencies and on top of that the Application Code will be moved to Testing Environment.
we need to ensure that we have defined the Metadata Correctly.
Here the Whole Process is automated i.e Creating The Container,Setting up The dependencies,taking it to the Container and Making it available to every One.
Once the Code is available to the Container,It will execute the Application because the required dependencies are available inside the Container.
Docker is a Containerized Execution. i.e Everything in Docker is Containerized.
For Example we have the whole Server and there is only One Container.
We can use Some part of the Configuration to create multiple containers within the same server.Here Each Container runs Independently.
There is No intra Dependency against the Containers and each Container is isolated.
Each Container has its own piece of Code,has its own Set Up.
This is very efficient Way of Utilizing the Server Resources and managing the dependencies.
For example we have 8 GB of server then some part of the Server is used by one container and some part of the Server is used by another container and so on.

Docker Benefits :
-----------------
1.Light Weight :
----------------
Let us Consider a Server and the Server Contains the OS(It may be Linux,Windows etc) and on top of that we have different containers.
Docker is Light weight i.e Container only contains the dependencies which we have defined.
The Process to Set up the Container is Light Weight and it uses the same underlying resources that the server has.
Container does not need much resources to launch its own Daemon Process.
We can spin up the containers very fast and we can also delete the containers when it is not required.

2.Portable :
------------
Once we define the dependencies inside the Container and can be moved from one environment to another Environment.
We Can Deploy The Container from Local Server to Development Server and move The Same Container to Production Server.
Containers can be shipped across the Environments.

3.StateLess Applications:
-------------------------
Docker provides a way to implement Stateless Application i.e The Application within the container should be Stateless.
Let us consider an Application which connects to SQL Server Database.
Two Ways to deploy The Application into The Container.
Approach 1 : Deploy the Application into the Container where the database is hosted some where else.
Approach 2 : Deploy The Application along with Database inside the Container.

After Some time we may destroy the Container then in this case whole data will be Lost.
Docker Recommends to deploy the Stateless application within Containerized Approach.

Different Type Of Servers :
---------------------------
1.Physical Server :
-------------------
In the Legacy System we have a Physical Server of 8 GB RAM and Windows as Operating System(It Can Be Any OS).
This Complete Server is dedicated for Single Application and Application will be deployed into the Physical Server.
Here The whole Hardware is dedicated for Single Application.

2.Virtual Machines :
--------------------
In The Concept of Virtual Machine we have Single OS and on top of that we have VM's.
Here Each Virtual Machine runs on Different OS.
We Can Create different Virtual Machines within the Same Physical Server and On Top of each VM, we can deploy the Applications.
This approach is not resource efficient because we have dedicated resources for each VM.
These are not Light Weight because each VM has its own OS and relies on top Of original OS.
Here Each Virtual Machine needs to be Set Up and its again tactical thing.

3.Docker Container :
--------------------
In the physical server we have OS and once we have OS we don't need any OS.
We can run Docker Containers on top of the underlying OS.We can also run multiple Containers on the same OS.
Here each Container contains an individual Application.

*********************************************************** 2.Docker File and Docker Image  *******************************************
1.Docker File :
---------------
When we create a new Container,things work internally with the help of Docker Files and Docker Images.
Whenever we want to deploy an Application We need to define set of dependencies and it can be any tools,Frameworks,Libraries etc 
and these dependencies can be defined inside Docker File.
The Process to define dependencies to run the Application is Called Docker File.
All the Tasks which has to be executed inside the Container should be defined inside Docker File.
There is a place Called Docker Hub i.e Centralized Repository where all the images are available.
We can use those images as Part of Docker File or We Can also Customize the Docker File based on our requirement.

Example :
---------
From : Python: Python 2.7(Image Name From Docker Hub)(Image Contributed to The Docker Hub)
Run PIP Install Flask   (Run The Command and Install the Flask)
Copy app.py
Run Python app.py

Note : Here app.py should also be available in the Container i.e Copy app.py
Based on the above Script Docker will Set up The Container.Now the Docker File is Created.

Execution of Docker File :
--------------------------
For Example the Docker File is present inside Some Folder.
Then run the Command : docker build.
It Searches for the file in the current directory and starts building the Docker File and converts into an Image.
It is Customized image for an Application to Run.
We can also give the Name to an image  i.e 

	docker build --tag=OccDailyReport
	
All the Images are present in the Local System and We can see all the images by Using the Command  : docker images 
If we want to run the image then use the Command : 

	docker run  OccDailyReport
	
When we run the above Command It will Create a Container with all the dependencies and starat the application inside the Container.
Here Same Docker File is converted into image and is moved across each of the Environment.

***************************************************  3.Docker Architecture   **********************************************************

Docker Architecture :
---------------------
It is primarily based on two things i.e Docker Client and Docker Server.
If we want to build a Docker Image,then we need to run the Command  : 

	docker build --tag==OccReport
	
Similarly If we want to run the Docker Image,we need to run the Command : 

	docker run OccReport
	
The above Commands i.e to build the Docker File and to run the Docker Image are invoked using Docker Client.
Docker Client needs to be installed where we are running these Commands.
When we Install Docker both Docker Client and Docker Server will gets Installed.
Any Docker Command has to run through Docker Client.
Whenever we run the Command i.e  

	docker run OccReport 
	
using Docker Client,It Internally invokes the Docker Server and Docker Server runs the Script inside Docker Image.
It will Launch the Container with all the dependencies defined inside the Docker image.

How Docker Works :
------------------
Docker is mainly used for managing the dependencies and in order to do that we need to define the Docker File.
Once The Docker File is created we need to convert the Docker File into Docker Image using Docker Client.
We can also Tag the Image Name and we can also register the Docker Image.
We can save the Docker image into Docker Hub or Private Hub if Required.
Then We have Docker Server which contains all the Containers i.e
When we run the Command : docker run --tag=OccReport,It Creates Container named OccReport and moved to the Docker Registry.
Docker Server Interacts with Docker Registry with the Name OccReport,
It will Create a Container with all the Dependencies mentioned in the Image,and executes the Application defined inside the Image,Code is Deployed.
If We have defined the port inside the image then it would be accessible externally. 
Anyone Can invoke the application which resides inside the Container.




