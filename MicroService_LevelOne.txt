1.Spring Boot Micro Services 								[04-JUL-2019]  (Done)
2.Why So Many Technologies   								[04-JUL-2019]  (Done)
3.Micro Service vs Service Oriented Architecture  			[04-JUL-2019]  (Done)
4.Application Building  									[04-JUL-2019]  (Done)
5.Designing Simple Micro Service  							[04-JUL-2019]  (Done)
6.Creating Starter Micro Service Project  					[10-JUL-2019]  (Done)
7.Building Movie Catalog Service 							[10-JUL-2019]  (Done)
8.Building Movie Info Service 								[10-JUL-2019]  (Done)
9.Configuring Server Port 									[10-JUL-2019]  (Done)
10.Coding Third Service and Communication 					[10-JUL-2019]  (Done)
11.Using Rest Template to Call an External Micro Service 	[10-JUL-2019]  (Done)
12.Using Bean To Create Rest Template 						[10-JUL-2019]  (Done)
13.Using Web Client to Make Rest API Call 					[11-JUL-2019]  (Done)
14.Making a Call to Ratings API 							[12-JUL-2019]  (Done)
15.Avoiding Returning List In API  							[12-JUL-2019]  (Done)
16.Understanding Service Discovery 							[13-JUL-2019]  (Done)
17.Introducing Eureka 										[13-JUL-2019]  (Done)
18.Staring Eureka Server 									[13-JUL-2019]  (Done)
19.Creating Eureka Clients 									[13-JUL-2019]  (Done)
20.Discovering Service Through Eureka  						[13-JUL-2019]  (Done)
21.Client Side Load Balancing								PENDING
22.Recap of Micro Services Level 1							PENDING
23.Creating Multiple Instances								PENDING

Search More :
*************
Client Side Discovery
Server Side Discovery


1.Spring Boot Micro Services :
******************************
It is different way of developing an Application where each module is independent of other and deployed on different Servers.
In case of Monolith Application all the functionalities/modules are bundled as single Entity(Jar/War) and deployed on a Single Server.
Both Monolith and Micro Services have the same pattern of writing the Code.

We Create the Micro Services and make them to communicate with each Other.
Here we use RestTemplate(Hard Coding the URL),Service Discovery(Eureka Server),WebClient(Hard Coding the URL but calls Asynchronously) and Eureka Client.
Some of the common Cloud Platforms used to deploy Micro Services are Spring Cloud,AWS,GCP,Azure and so on.
As an end result we get cohesive piece of code as response i.e. mostly Json from Micro Service.

Challenges while creating Micro Services are from where to start because there are lots of technologies that can be used to develop Micro Services and one of them is Spring Cloud.
In Spring Cloud there are so many buzz words/features and also design patterns to implement Micro Services.

2.Why So Many Technologies Involved in MicroServices :
******************************************************
While converting the Monolith Application into Micro Services we are solving some of the problems like scalability,modularity,deployment etc.
While developing Micro Services we have to check modularity so that release process is fine.
Also we have to check the scalability so that there won't be multiple copies of Code.

In case of Monolith Application complexity is hidden with in the Application where as in case of Micro Services complexity is between the Micro Services.
The problem that comes with Monolith Application are specific to that module where as the problems with Micro Service are generic.
One of  them  is Load Balancing.
Here individual Micro Service is doing what an Application is supposed to do and the common problem is communication between the Micro Services.

There are Lot of Frameworks/Technologies to resolve the common problems of Micro Services.
Eureka Implements Service Discovery Pattern.
Hystrix Implements  Circuit Breaker  Pattern.

3.Micro Service and Service Oriented Architecture :
***************************************************
Service Discovery is a Pattern i.e 
when we have an Application broken into Micro Services.
How Microservices communicate within each other and also how to discover among them to communicate with each other.
Eureka is one of the Technology that implements Service Discovery Pattern.

Whenever we are implementing Service Oriented Architecture,we are building a Service for reusability and we don't know where the Service is going to be used.
Using Service Oriented Architecture,we are going to create an Utility where we don't have any Application in mind.
But in case of Micro Services we have a clear idea of what an Application is supposed to do and also can be reused if requires.
Service Oriented Architecture has lot of complexity involved because they are more standardized,have an explicit contract and lot of precautions.

4.Application Building :
************************
PreRequisites for Micro Services are Spring Boot and Java

Movie Catalog Service and the output is 


{
  id: SrinivasSankoji
  name: Srinivas Chary
  movies :[
	{id:12,name:"ABC",desc:"Good",rating:4},
	{},
	{}
 ]
}

5.Designing Micro Services :
**************************
1.Movie Catalog Service  :
Input :userId 
Output : Movie List with Details
2.Movie Info Service  :
Input : movieId 
Output : Movie Details
3.Rating Data Service :
Input : userId 
Output : Movie Id and Ratings

Designing Micro Service is nothing but creating a Spring Boot Projects.

6.Creating Spring Boot Micro Service :
**************************************
Create above Spring Boot Projects in STS.

7.Building the Movie Catalog Service API  :
*******************************************
Create a Controller and Method inside the Controller to return the Response
MovieCatalogController --> getCatalog(userId)

8.Building the Movie Info Service API  :
****************************************
Create a Controller and Method inside the Controller to return the Response
MovieInfoController --> getMovieInfo(movieId)

9.Configuring Server Port  :
****************************
Change the Server port in application.properties and change all the ports of Micro Services

10.Coding Third Service (Building the Rating Data Service API) :
****************************************************************
Create a Controller and Method inside the Controller to return the Response.
RatingDataController --> getRating(movieId)

11.Using Rest Template To Call an External Movie Info Service API :
*******************************************************************
To make call to Movie Info Service from Movie Catalog Service we use RestTemplate.
Get the response back and unMarshall it and create an object instance out of it and send the response.
Spring Boot comes with the in built client in our class path i.e Rest Template.
Rest Template is going to be deprecated in later versions and we can do it by using WebClient.
Rest Template is easy way and WebClient is some what hard.
WebClient requires Reactive Programming.
Programming in Java Language is synchronous and If we want to get the data asynchronously then make the Function as Asynchronous.

Create a Rest Template and it has some methods.for example getForObject().
getForObject() accepts URL and returns the String and If we Know the it is going to return an Object then it UnMarshals the String into Object.

Note: In Micro Services there may be a chance of multiple copies of same Classes(Model).

RestTemplate restTemplate=new RestTemplate();
Movie movie=restTemplate.getForObject("http://localhost:5002/movies/"+rating.getRating(), Movie.class);

The problem in this case is we are hardCoding the URL and we have to discover the service at run time.
Here we have created RestTemplate Object.
We can create a RestTemplate Object once,Annotate with @Bean and reuse it using @Autowired Annotation.

12.Using Bean to Create a Rest Template :
*****************************************
To have Single instance of Rest Template and use it across the Application we use @Bean Annotation.
In The Spring Boot Application Main Class, Create a Method that returns RestTemplate and mark the method as @Bean.

13.Using Web Client to Make  API Calls :
****************************************
Rest Template is going to be deprecated soon and web client is going to use to make the Rest API Calls.
To create a Web Client we use the Class WebClient Builder and to make it available we have to add the dependency in pom.xml.

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		
In case of RestTemplate,we make an API call and wait for the response to come i.e Synchronous Communication.
Where as in case of Web Client,it does not wait for the response and will do the other things in Parallel.
Web Client is present in the Reactive Programming of Spring Boot and deals with Asynchronous Programming.
We have API calls to make the calls and do the Other Things.
Once we are done calling the API then call the Lambda i.e whats need to be done once received the response.

Movie movie=webClientBuilder.build().get().uri("http://localhost:5002/movies/" +rating.getRating())
							.retrieve().bodyToMono(Movie.class).block();

If we are using block() then it becomes Synchronous.
To get Asynchronous nature then return type of the Service must be Asynchronous.
							
14.Using Rest Template To Call Ratings Service API :
****************************************************
Lets create Another Service in RatingDataController that returns List.

@RequestMapping("users/{userId}")

and remove the code that return Ratings List in MovieCatalogController that has been hard coded.
Here the Problem is the Service is returning List.

15.Avoiding Returning List In API  :
************************************
Here If the Root Node is List and not an Object then Consumer  does not know which Object he has to use.
We can also know the List of Object contains what kind of Object it is.

De Serialization is on of the Problem.
If we want to enhance the Object i.e for Example add on new Variable/Field
we can do that without breaking the Consumers and they don't care about the extra Field and ignore it.
Similarly If we want to add a new Variable , then in case of returning List we cannot add any more.
We have to change the entire Structure and breaking the contract between consumer.
To resolve this issue create an Object and add the List to an Object and return the Object.

Questions and Answers :
-----------------------
Q: If the Application is being Accessed in Multi Threaded Environment do we have any Concurrency Issue.
A: When we deploy our Application In Servlet Container lot of Threads run in Parallel.
Each request is treated as One Thread and it is important that all the Services are Thread Safe.
By default Rest Template is Thread Safe i.e one call is not going to effect another Call.

Q : Is it Possible To make a Call to an External API that is not a Micro Service.
A: Yes (By using RestTemplate)

Q: How do we handle security when communicating between Micro Services
A: By using HTTPS,Basic Authentication and So on.

16.Understanding Service Discovery :
************************************
From the Movie Catalog Service,we are calling two Services and the URL is hard coded to call the Services.
The problem is changing the URL frequently and requires update in the code.
Whenever we deploy the Micro Services in the Cloud Environment we get the dynamic URL's and it will keep on Change.
We also need to do the Load Balancing and that is not possible If the URL is hard coded.
If particular Micro Service has lot of demand and we can spin up to 3 or 4 and in this Case all the URL's will be different for the Single Micro Service.
Whenever we push the code to Heroku,URL gets changed and we have no Idea about the URL.
Other drawback of hard coding the URL is whenever we deploy the Application in Multiple Environments and we have different URL for each Environment.

Because of all these reasons we have Service Discovery and it is a Design Pattern.
When we build Micro Services,it needs to communicate with each other and how do they know about the other Micro Service. We discover the Target.

Client Side Discovery Server :
------------------------------
Example we have one Client here i.e MovieCatalogService and two other Services needs to be Consumed i.e MovieInfoService and RatingsDataService
Here how does the MovieCatalogService discover the other two Services.
Minimum thing required here is URL's.
We need to provide a layer of Abstraction(Discovery Server) so that Client will call the Discovery Server to get the URL and calls the Service.
Here each Micro Service has to register with Discovery Server.(Mark the Main Method in Spring Boot Annotated with @EnableEurekaServer)
Here Discovery Server is a kind of Phone Book that maintains all the URL details of each Micro Service.
Here the Problem is Client calls the Discovery Server to get where exactly the Micro Service is and once it finds the Address(URL),then It calls the Service.
Here additional call is required instead of directly calling the Service.
This way of calling is called Client Side Discovery.
Spring Cloud uses Client Side Discovery Server.

Server Side Discovery Server :
------------------------------
In Case of Server Side Discovery Server,Client says the Discovery Server to call the Service.
Here Discovery Server is responsible to call Service and provides response to the Client.

17.Introducing Eureka :
***********************
Technology to implement Service Discovery pattern is Eureka.
Eureka is one of the project that made open source by Netflix OSS.
The other libraries form Netflix are Ribbon,Hystrix,Zuul etc.
Spring provides an Abstraction to work with these Libraries.

Steps :
-------
1.We have to start Eureka Server and we have to make individual Micro Service as a Eureka Client.
2.Eureka Client registers with Eureka Server.
3.The Service that is consuming the other Service is also Eureka Client.

18.Staring Eureka Server :
**************************
The way to create a Eureka Server is to create a Spring Boot Application.
Add the dependency Eureka Server in pom.xml.
Add the Annotation @EnableEurekaServer to the Spring Boot Application to make it as Eureka Server.
Add the property server.port=8761 in application.properties

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>
		
		@SpringBootApplication
		@EnableEurekaServer
		public class DiscoveryServiceApplication {

			public static void main(String[] args) {
				SpringApplication.run(DiscoveryServiceApplication.class, args);
			}

		}
		
		server.port=8761
		
Start the Application and run the URL http://localhost:8761/ to start the Eureka Server.
In the UI we have an option that shows the Instances that are currently registered with Eureka Server and we get unknown because No Eureka Client is registered with the Server.
While Starting the Application we get the errors and to fix those errors we have to add values in the Properties file :

eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

This means that Eureka does not register with Itself.
Because Every Eureka Server is also a Eureka Client and when it runs it not only provides a registry and also tries to register with other Eureka Server.
We not only have Multiple Instances of Micro Services,we also have Multiple Instances of Eureka Server so that they can register with each Other.
If One Server fails other Server will provide the Services.
Since we have one Server then stop behaving as a Client and to make this we added in the Properties File.

19.Creating Eureka Clients :
****************************
Start with MovieInfoService 
Add the Eureka Client dependency in pom.xml

		<dependency>
    		<groupId>org.springframework.cloud</groupId>
    		<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    		<version>2.1.2.RELEASE</version>
		</dependency>

Spring Cloud is a Technology to build bunch of Micro Services.
All the Open Source projects of Netflix became a part of Spring Cloud Family.

Add the Annotation @EnableEurekaClient to Spring Boot Client Application
Start the Eureka Server and it shows the unknown Service.
To get the name of the Application in Eureka Server add the property in properties File.

		spring.application.name=movie-info-service
		
Now we see the Service is registered with Discovery Server.
Eureka Client tries to identify the Discovery Server with default port and it registers with the Server,But it is always not the same Case.
We have to add the Configuration in the Properties file If the Discovery Server Port is changed.
Similarly do the above Steps for the other two Services i.e movie-catalog-service and ratings-data-service

20.Discovering Service Through Eureka :
***************************************
Now we have registered all the Services with the Discovery Server and we have to consume it.
We have hard coded the URL in movie-catalog-service to call the other Services.
We can make use of Rest Template or WebClient to call the Service that is registered in Discovery Server by providing @LoadBalanced (where we Configured the Rest Template).

	@Bean
	@LoadBalanced
	public RestTemplate restTemplate()
	{
		return new RestTemplate();
	}

Then change the http://localhost:8761/ to instance name in Service Discovery
The above code will do the Service Discovery in a Load Balanced Way.
Do the Same Steps for all the Services

21.Client Side Load Balancing :
*******************************



22.Recap of Micro Services Level 1 :
************************************


23.Creating Multiple Instances :
********************************
Add the properties in the Properties File
https://dzone.com/articles/registering-multiple-local-microservice-instances

server.port=${PORT:0}
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

To Call the API using Eureka discovery Client 
Click on Eureka discovery URL and add the Rest End Point along with request Mapping.

	http://desktop-er5980j:6001/catalog/one



