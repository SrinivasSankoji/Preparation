1.Introduction														(Code Evolution)   			[02-NOV-2023]  (Done)
2.Hello world                                                       (Code Evolution)   			[05-NOV-2023]  (Done)
3.Folder Structure                                                  (Code Evolution)   			[05-NOV-2023]  ()
4.Components                                                        (Code Evolution)   			[09-NOV-2023]  (Done)
5.Functional Components                                             (Code Evolution)   			[09-NOV-2023]  (Done)
6.Class Components                                                  (Code Evolution)   			[10-NOV-2023]  (Done)
7.Hooks update                                                      (Code Evolution)   			[10-NOV-2023]  ()
8.React JSX                                                         (Code Evolution)   			[10-NOV-2023]  (Done)
9.Props                                                             (Code Evolution)   			[10-NOV-2023]  (Done)
10.State                                                            (Code Evolution)   			[10-NOV-2023]  (Done)
11.setState                                                         (Code Evolution)   			[12-NOV-2023]  (Done)
12.Destructuring Props and State                                    (Code Evolution)   			[12-NOV-2023]  (Done)
13.Event Handling                                                   (Code Evolution)   			[12-NOV-2023]  (Done)
14.Binding Event Handlers                                           (Code Evolution)   			[13-NOV-2023]  ()
15.Methods as Props                                                 (Code Evolution)   			[13-NOV-2023]  ()

16.Conditional Rendering                                            (Code Evolution)   			[13-NOV-2023]  ()
17.List Rendering                                                   (Code Evolution)   			[13-NOV-2023]  ()
18.Lists and Keys                                                   (Code Evolution)   			[13-NOV-2023]  ()
19.Index as Key Anti Pattern                                        (Code Evolution)   			[13-NOV-2023]  ()
20.Styling and CSS Basics                                           (Code Evolution)   			[13-NOV-2023]  ()

21.Basics of Form Handling                                          (Code Evolution)   			[13-NOV-2023]  ()
22.Component Life Cycle Methods                                     (Code Evolution)   			[13-NOV-2023]  ()
23.Component Mounting Lifecycle Methods                             (Code Evolution)   			[13-NOV-2023]  ()
24.Component Updating Lifecycle Methods                             (Code Evolution)   			[13-NOV-2023]  ()
25.Fragments                                                        (Code Evolution)   			[13-NOV-2023]  ()

26.Pure Components                                                  (Code Evolution)   			[14-NOV-2023]  ()
27.Memo                                                             (Code Evolution)   			[14-NOV-2023]  ()

28.Refs                                                             (Code Evolution)   			[15-NOV-2023]  ()
29.Refs with Class Components                                       (Code Evolution)   			[15-NOV-2023]  ()
30.Forwarding Refs                                                  (Code Evolution)   			[15-NOV-2023]  ()

31.Portals                                                          (Code Evolution)   			[16-NOV-2023]  ()
32.Error Boundary                                                   (Code Evolution)   			[16-NOV-2023]  ()

33.Higher Order Components Part 1                                   (Code Evolution)   			[17-NOV-2023]  ()
34.Higher Order Components Part 2                                   (Code Evolution)   			[17-NOV-2023]  ()
35.Higher Order Components Part 3                                   (Code Evolution)   			[17-NOV-2023]  ()

36.Render Props Part 1                                              (Code Evolution)   			[18-NOV-2023]  ()
37.Render Props Part 2                                              (Code Evolution)   			[18-NOV-2023]  ()
38.Context Part 1                                                   (Code Evolution)   			[18-NOV-2023]  ()
39.Context Part 2                                                   (Code Evolution)   			[18-NOV-2023]  ()
40.Context Part 3                                                   (Code Evolution)   			[18-NOV-2023]  ()
41.HTTP and React                                                   (Code Evolution)   			[18-NOV-2023]  ()
42.GET Request                                                      (Code Evolution)   			[18-NOV-2023]  ()
43.POST Request                                                     (Code Evolution)   			[18-NOV-2023]  ()

########################################################### 1.Introduction	####################################################

React is a project created and maintained by Facebook.
React is an open source JavaScript library for building user interfaces.
React is not a JavaScript Framework.
React does not focus on other aspects of the Application like routing,HTTP request etc.
React is responsible only for building rich user interface.

React has component based Architecture.
This breaks down the Application into small encapsulated components which can be reused.

React is declarative.
We tell react what we want and react will build the actual UI.
React will make it painless for a developer to create a Complex UI's by abstracting the difficulties.
React will handle efficiently updating and rendering the components in the Application whenever the data changes.
DOM updates is one of the most expensive operation is handled gracefully in React.

Prerequsites :
--------------
HTML,CSS and JavaScript.
ES6 features like this,filter,map and reduce.
let,const,Arrow functions,Template literals,Default Parameters,Object literals,Rest and Spread operators and destructing Assignment.

The other parts of React are

React Fundementals (Current Series)
React HTTP
Routing
State Management with Redux
Utilities

########################################################### 2.Hello world ###########################################################

To create a React Application we will be using Create React App.
Create React App is an Command Line Interface tool that allows us to quickly create and run React Application with no configuration.
Simply run the command and Entire React Application will be created.

	npx create-react-app hello-world
	
npx is an npm package runner which gets installed when we install node.
That is the reason we directly create and run React without installing node modules.
To run the React Application

	npm start
	
Here the Application will start with the port number 3000.

Alternate approach for creating React Application :
---------------------------------------------------

In this approach we install the Create React App globally and then use the Package to generate the Projects.

	npm install create-react-app -g // Creating React App globally
	create-react-app hello-world // Create the Project
	

########################################################### 3.Folder Structure ###########################################################

At the root level we have 3 Folders and 4 Files.

package.json contains the dependencies and the scripts required for an Application.

Ther is a folder called node_modules where all the dependencies are installed.
It will generated when we run the create-react-app command or when we run npm install.

In the public folder we have index.html file.
This is the only HTML file we are going to have in a React Application.
The view might dynamically change in the Browser but it is the index.html we get displayed in the Browser.
Typically we are not going to add any code in the index.html file because we want React to control the UI.
For that purpose we have on <div> with id="root" i.e.

	<div id="root"></div>
	
As a Developer we will be working in the src folder during Development.
Starting point for React Application is index.js.
In index.js we specify the Root component i.e. App Component and DOM Element which will be controled by React.




	





########################################################### 4.Components #################################################################

In React Component represnts the part of the user interface.
The parent component is the app Component which contains all the components.
Components are reusable.

A component code is placed inside Javascript file.
For example App Component is placed inside app.js.
We can also have components placed with .jsx extension.

In React we have two types of Components.

1.Stateless Functional Component
2.Stateful Class Component

Functional Components are literally JavaScript Functions.
They return the HTML which describes the UI.

Example :
---------

	import React from 'react';

	function functionlComponent(){
			return <h1>Functional Component Example</h1>;
	}

	export default functionlComponent;
	
	import './App.css';
	import FunctionalComponent from './Components/FunctionalComponent';

	function App() {
	  return (
		<div className="App">
		  <FunctionalComponent></FunctionalComponent>
		</div>
	  );
	}

	export default App;

Class Components on the other hand are regular ES6 classes that extends Componnet Class from React Library.
They must contain render() which intern returns HTML.

Example :
---------

	import React from "react";
	import { Component } from "react";

	class Welcome extends Component {
		render(){
			return <h1>Class Component</h1>;
		};

	}
	export default Welcome;
	
	import './App.css';
	import  Welcome from './Components/Welcome';


	function App() {
	  return (
		<div className="App">
		  <Welcome></Welcome>
		</div>
	  );
	}

	export default App;


########################################################### 5.Functional Components ######################################################

Functional Components are just JavaScript Components which will optionally recieve Object of properties i.e.props and will return an HTML which will describe the UI.
Here HTML Component is nothing but JSX.

Scenario 1 :
------------

	import './App.css';
	import FunctionalComponent from './Components/FunctionalComponent';


	function App() {
	  return (
		<div className="App">
		  <FunctionalComponent></FunctionalComponent>
		</div>
	  );
	}
	
Here our functional Component is no where connected to React.
For that we need to export and import the Component.

Scenario 2 :
------------
We can also define the Functional Components using Arrow Functions.

	const functionlComponent1 = () => <h1>Functional Component Example Two</h1>;

Note1 :
-------
From the above scenario we are exporting the Component with default Component.
In this case we can import the Componnet with any name.

	export const FunctionlComponent1 = () => <h1>Functional Component Example Two</h1>;

We can also have the named export.
In this case we need to use the same name while importing the Functional Component.

	import './App.css';
	import { FunctionlComponent1 } from './Components/FunctionalComponent';

	function App() {
	  return (
		<div className="App">
		  <FunctionlComponent1/>
		</div>
	  );
	}

	export default App;
	
Note2 :
-------
For most of the cases we will be using default export.

########################################################### 6.Class Components ###########################################################

Class Componnets are basically ES6 Classes.
Similar to Functional Componnet, A Class Component optionally recieves props as an input and returns HTML.
Class Component can maintain its private internal state and uses that information to describe the user interface.

Whenever we are creating Class Component we need to import two Components 

React
Component

For the Class to become React Component It should extend Component Class and override the render().
render() either return HTML or null.

	import React from "react";
	import { Component } from "react";

	class Welcome extends Component {
		render(){
			return <h1>Class Component</h1>;
		};

	}

	export default Welcome;

	import './App.css';
	import  Welcome from './Components/Welcome';


	function App() {
	  return (
		<div className="App">
		  <Welcome></Welcome>
		</div>
	  );
	}

	export default App;
	
Difference between Functional Components and Class Components :
---------------------------------------------------------------
Functional Componnets are simple functions which recieves optionally props and returns the HTML.
Use Functional Components as much as possible.
Always prefer Functional Components.
Absence of this keyword in Functional Component.
If we are using Functional Component we will be forced to think about the solution without having a state.
If we have number of Components each having its own state maintainance and debugging the Application is bit difficult.
Functional Components are intended to be without any complicated logic and are mainly responsible for the user interface.
This is the reason Functional Components are Stateless/Dumb/Presentational Components.

Class Components are more feature rich.
Class Components can maintain their own private data i.e. state.
Class Components can contain complex UI logic.
Class Components provide life cycle hooks.
This is the reason Functional Components are Stateful/Smart/Container Components.

Note :
------
In Functional/Class Component we are simply returning HTML.
Here we are not returning regular HTML but we are returning JSX.

########################################################### 7.Hooks update ###############################################################


########################################################### 8.React JSX  #################################################################

JavaScript Xml (JSX) is an extension to JavaScript language syntax.
With React library we can  write the XML like code for elements and Components.
Just like XML,JSX tags can have tag name,attributes and children.

JSX is not a necessity to write React Application.
We can definitely write React Application without JSX.
But JSX makes React code simpler and elegant.

JSX ultimately transpiles to pure JavaScript which is understood by the Browser.

How JSX works :
---------------
Create the Component using JSX.

	const Hello = () => {
    return <h1>Hello Srinivas</h1>;
	}

	export default Hello;
	
Create the Component without using JSX.
React library provides CreateElement method to create a Component without using JSX.
CreateElement() accepts 3 parameters.

First parameter is the String which specifies the HTML element to be rendered.
Second parameter is the optional parameter.It is an Object with key value pair which can be applied to the element.
Third parameter is the children for the HTML element.

	const Hello = () => {
    return React.createElement('div',{id:'hello',className:'dummy'},React.createElement('h1',null,'Welcome Srinivas'));
	}
	
Here each JSX element is syntactically replacement of React.createElement which inturn uses React Library.
That is the reason we are importing React library whenever we are using JSX.

                     
########################################################### 9.Props  #####################################################################

props is an optional input which the Component accepts.
It also allows the Component to be dynamic.
Requirement here is to pass the name from App Component to the Greet Componnet and render that name in the Browser.

	import React from "react";

	const Greet = (props) => {
		   return(
			<div>
				<h1>Welcome {props.name} and occupation is {props.occupation}</h1>
				{props.children}
			</div>
			)
	}

	export default Greet;
	
	function App() {
	  return (
		<div className="App">
		   <Greet name='Srinivas' occupation='Software'>
			<p> Parent </p>
		  </Greet>
		  <Greet name='Nandini' occupation='Housewife' ></Greet>
		  <Greet name='Bhaumik' occupation='First' ></Greet>
		  <Greet name='Aadvik' occupation='Nursery' ></Greet>
		</div>
	  );
	}

	export default App;
	
Note :
------
If no value is assigned then {props.children} will not display anything.
Irrespective of the Components properties are mentioned as attributes.
props are immutable and its value cannot be canged.
                         
########################################################### 10.State  ####################################################################                        

Every React Component returns JSX which describes the UI.
It is posssible to influence what is rendered in the screen using props.
The second way to influence what is rendered in the screen is by using state.
Both props and state holds the information which influences the UI.

props :
props are passed to the Component.
props can be used as Function parameters.
props are immutable because variables are passed down from the Parent Component to child Component.

state :
state is managed within the Component.
variables are declared in the function body.
state can be changed because Component has full control of it.

Create the Component named Message.js.
Here the requirement is need to have subscribe button.
Whenever we click on subscribe button it should display the message Thank you for subscribing.
Here we cannot use props because these are immutable.
The solution is to use the state Object.

Steps to create state Object.
1.Create the class constructor.
2.create the state Object with the message.
3.Create the Subscribe button and perform onClick
4.Change the state on Button Click.

	import React from "react";
	import { Component } from "react";

	class Message extends Component{

		constructor(){
			super();
			this.state={
				message:'Welcome visitor',
				subscribe:'Subscribe'
			}
		}

		changeMessage(){
			this.setState({
				message: 'Thank you for Subscribing',
				subscribe: 'unsubscribe'
			})
		}

		render(){
			return(
			<div>
				<h1>{this.state.message}</h1>
				<button onClick={() => this.changeMessage()}>{this.state.subscribe}</button>
			</div>
			)
		};
	}
	export default Message;


########################################################### 11.setState  #################################################################

Create one Counter component which will have Count value and a button which will increment count value.

	import React from "react";
	import { Component } from "react";

	class Counter extends Component{

		constructor(){
			super();
			this.state={
				count : 0
			}
		}
		render(){
			return <h1>Counter value : {this.state.count}</h1>;
		}

	}

	export default Counter;
	
Add a button to the Counter.

	  render(){
        return(
            <div>
            <h1>Counter value : {this.state.count}</h1>
            <button>Increment</button>
            </div>
        )
    }
	
we use the setState() to update the state value on button click.
setState() accepts an Object as first parameter where as second parameter accepts the arrow function.

	 <button onClick={() => this.increment()}>Increment</button>
	 
	  increment() {
        this.setState({
            count: this.state.count + 1
        }
        )
    }
	
setState() with both the parameters
	
	   increment() {
            this.setState({
                count: this.state.count + 1
            },
				() => {
					console.log(this.state.count);
				}
			) 
		}
		

	
Note :
------
1.The only place where we can assign the state is constructor.
We cannot modify the state directly.If we modify the state React will not re render the Component.
Always make use of setState and nover modify the state directly.

2.If the code has to be executed after the state has been updated,place the code in the callback function which is the second argument to setState().
React will group multiple setState calls into single setState for better performance.

3.Whenever we want to update the state based on previous state value,pass in as a function argument instead of regular Object.

########################################################### 12.Destructuring Props and State  ############################################

Destructuring is an ES6 feature that makes it possible to unpack values from an arrays or props from Objects into distinct variables.
In React destructuring props and state improoves code reusability.
Destructuring can be done by using {}.

	import React from "react";

	const Greet = ({name,occupation}) => {
		return(
		<div>
			<h1>Welcome {name} and occupation is {occupation}</h1>
		</div>
		)
	}

	export default Greet;
	
The second way to destructure the props is by using function body.

	import React from "react";

	const Greet = (props) => {
		const {name,occupation} =props;
		return(
		<div>
			<h1>Welcome {name} and occupation is {occupation}</h1>
		</div>
		)
	}

	export default Greet;
	

########################################################### 13.Event Handling  ###########################################################

Any web Application we create typically tends to have user interaction.
When the user interacts with the Application Events are fired. consider the scenario of button click.
Create the component for Event Handler named FunctionClick.js.

	import React from "react";

	const ClickEvent = () => {
		return (
			<div>
				<h1><button>Click</button></h1>
			</div>
		)
	};
	export default ClickEvent;
	
Our goal is to capture the click event and perform some logic.
React events are named using camel case.

	   function clickHandler(){
        console.log('Button clicked');
	   }

	   return (
			<div>
				<h1><button onClick={clickHandler}>Click</button></h1>
			</div>
	   )

Note :
------
To the button click we pass the function as an Event handler.
Here we want the handler to be a function and not the function call.
              
########################################################### 14.Binding Event Handlers  ###################################################

       
########################################################### 15.Methods as Props  #########################################################

             
########################################################### 16.Conditional Rendering   ###################################################

       
########################################################### 17.List Rendering  ###########################################################

                
########################################################### 18.Lists and Keys ############################################################

                 
########################################################### 19.Index as Key Anti Pattern  ################################################

    
########################################################### 20.Styling and CSS Basics  ###################################################      