1.Password Hashing	  		(Java Brains)									[24-APR-2020]  (Done)
2.Password Hashing    		(Vinsloev)										[25-MAY-2020]  (Done)
3.Hashing Algorithms  		(Vinsloev)										[25-MAY-2020]  (Done)
4.Java Bcrypt    	  		(Vinsloev)										[25-MAY-2020]  (Done)
5.Hash vs Salted Hash		(Arpit Shah)									[25-MAY-2020]  (Done)	


Dictionary Tables Attack
Rainbow Table Attack
Cryptography Hash Function
Salt Pepper
Input Block Size in Hashing
Message Limitin Hashing
Hash Code Size in Hashing


		


******************************************************   1.Password Hashing (Java Brains)   ***************************************************

When we Log In to a Website ,Most of the Websites don't store their Password and they Hash the Password.
Consider the case we have created a Register Flow for an Application.
Entered the emailId,password and confirm passwrod and send it to the web application.

If the password is saved into the database there may be a chance of Hacking Issues.
This is referred to as Clear Text password.
If the passwrod is not saved then we cannot validate the password.
Here the Solution is encrypt the password and save it into the database.
Later on to compare the password,decrypt the password from the database and compare with the password enetred by the user.
Here in the database we have encrypted password.
Encryption is done by the secret key and use the same key for Decryption.
Here Application has to save the key somewhere on the Server.
If some one hacks the Server there may be a chance of hacking the key.
Anything Server needs to do that the Hacker cannot Access.
The Better Approah is Password Hashing.

Hashing is the process that takes a value and converts it into unrecognized value.
There are two Importnat properties that makes the Hashing to work best.

1.The process to mess up the value needs to be repeatable
i.e one to one mapping with the original value and messed value.

2.One way Function i.e
we can take a value and take a unique hash for that value but it is not possible to get the original value using hash value.

Hashing Functions are one way where as Encryption Functions are two way.
Popular Hashing Functions are 

1.MD5
2.SHA
3.Bcrypt

When some one registers the Application ,Web Application stores the password as Hash and discards the actual password.
Where as Hash is a One way Function and ther is no way of getting the original Value.
Later on when we try to validate the password,we use the same Hash Function to generate the Hash and compare it with the saved Hash Value.
This is where we are depending on the repeatable value of the Function.
This is also one of the reason where most of the web applications have a forgot password Flow where Application asks to reset the password.
We can make the password even more secure by using Salting.


******************************************************   2.Password Hashing (Vinsloev)   *****************************************************

Password Hashing is the Way of Increasing the Security of an Application.
Password Hashing accepts the plain Text,applies the Hashing Algorithm on the Plain Text and generates the complete unique Value for the Plain Text.
Hash is designed to act as One Way Function.
Hash are not designed to be Decrypted.
For the Next time if we use the Same Text,then it has to generate the Same Hash Algorithm.

In the Registration Form we normally accept the password as plain text,apply the Hashing Algorithm on the plain Text and insert the Hash Value into the Database.
When the User Logged In Again, then accept the password and apply the Hash Algorithm on that password and
compare it with the hashed password that is stored in the Database.
[
The other important concept in Hashing is the Salt Value.
If Multiple Users are using the Same password then the Hash Value will be the Same.
Here We can be able to see that Several users are Using the Same Passord.
This makes the Hacker to easily Hack even though we used the Hashing Algorithm.
Hackers will be using Rainbow Tables to identify the users that has the same Hashed password.

To resolve this we use the Salt Mechanism.
To the Plain text password we apply the Salt i.e unique Value apply the Hash Function on both the Plain Text and Salt Value,
then store it into the Database.
In this Case If Multiple users has the Same password then also their hash Value will be different.


******************************************************   3.Hashing Algorithms (Vinsloev)   *****************************************************

A Good Hashing Algorithm would like to have 

1.password hashing algorithm should be slow because slower the algorithm longer the time it takes to hash the password.
2.Should not be flawed with collisions i.e two different input values are giving the same Hash Value.
3.Algorithm should have gone the rough testing through Long Period.

Different Hashing Algorithms are 

1.MD5
2.SHA1
3.SHA2
4.bcrypt
5.scrypt

MD5 cannot be used because it is unsecure and flawed with collission.
SHA1 and SHA2 are used for check some File Algorithm.
If we downlaod the File,they check the exact same value as the SHA256Sum to ensure that correct file has downloaded.
MD5 and SHA Algorithms are very fast.
bcrypt is slow and it needs the table lookup and need certain amount of memory to do Hashing.
scrypt is the new algorithm  and it has be tested for certain period of time.

bcrypt is the standard password hashing algorithm for Some Linux Distributions.


******************************************************   4.Java Bcrypt (Vinsloev)   *************************************************************

	public static String hash="";
	
	@GetMapping("/bcrypt/{pass}")
	public String getHashedPassword(@PathVariable("pass") String pass)
	{
		hash=hashPassword(pass);
		return hash;
	}
	
	@GetMapping("/encrypt/{password}")
	public String validatePassword(@PathVariable("password") String password)
	{
		if (!BCrypt.checkpw(password, hash)) {
			return "Wrong Password!";
        }
		return "Success";
		
	}
	
	private String hashPassword(String plainTextPassword) {
        return BCrypt.hashpw(plainTextPassword, BCrypt.gensalt());
    }
	
	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-crypto</artifactId>
	</dependency>


******************************************************   5.Hash vs Salted Hash (Arpit Shah)   ***************************************************

Hash Function is also known as Message Digest or One Way Hash or Finger Print Function.
Hash Function is a Mathematical Function which takes variable length String as an Input and outputs 
fixed length binary Data.
It is called One Way Hashing because once it is converted into fixed length binar Data then it is really hard to work outputs
what was the actual input.

MD5 Hash Algorithm will output 16 unique bytes long binary data.
Hashing algorithms are also known as fingerprints of the actual data.

A Good Hash Function does not produce two identical hashes for two unique input Strings.
Collision should not happen for the Hash Fucntion.

A Good Hash Function should have Avlanche effect i.e
Even Slight Change in the input String should cause the Hash output to change drastically.

Most Common Hashed Algorithms are

1.MD5
2.SHA-1
3.SHA-256
4.SHA-384
5.SHA-512

Salt is a random data that can be used as an additional input to one way function that hashes the data.

Primary use of Salt is to defend against 
1.Dictionary Attacks.
In case of Dcitionary Attack,Attacker tries to compare each keyword of the dictionary with the password.

2.Pre Computed Rainbow Table Attack.
In case of Rainbow Table Attack,Attacker has pre computed Table for reverse Engineering cryptographic Hash Functions.
If the Hash Falls into any of the Category,then they reverse engineering the Hash and gets the Clear Text.







 

























